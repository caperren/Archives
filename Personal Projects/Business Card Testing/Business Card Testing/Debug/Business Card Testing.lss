
Business Card Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac1c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  0000ac1c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003004  20000070  0000ac8c  00018070  2**2
                  ALLOC
  3 .stack        00002004  20003074  0000dc90  00018070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f1fe  00000000  00000000  000180f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ece  00000000  00000000  000472f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004bca  00000000  00000000  0004b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da0  00000000  00000000  0004fd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000be8  00000000  00000000  00050b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009cbd  00000000  00000000  00051711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016bcf  00000000  00000000  0005b3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095476  00000000  00000000  00071f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000330c  00000000  00000000  00107414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20005078 	.word	0x20005078
       4:	00007211 	.word	0x00007211
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	00007309 	.word	0x00007309
       c:	00007309 	.word	0x00007309
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	00007309 	.word	0x00007309
	...
      38:	00007309 	.word	0x00007309
      3c:	00007309 	.word	0x00007309
      40:	00007309 	.word	0x00007309

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	00007309 	.word	0x00007309
      48:	00007309 	.word	0x00007309
      4c:	000015d1 	.word	0x000015d1
      50:	000060a1 	.word	0x000060a1
      54:	00007309 	.word	0x00007309
      58:	00007309 	.word	0x00007309
		if (time.hour == 0) {
      5c:	0000561d 	.word	0x0000561d
      60:	00007309 	.word	0x00007309
      64:	00007309 	.word	0x00007309
			time.hour = 12;
      68:	00007309 	.word	0x00007309
      6c:	00007309 	.word	0x00007309
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      70:	00007309 	.word	0x00007309
      74:	00007309 	.word	0x00007309
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00007309 	.word	0x00007309
      7c:	00007309 	.word	0x00007309
      80:	00007309 	.word	0x00007309
      84:	00007309 	.word	0x00007309
      88:	000011e5 	.word	0x000011e5
      8c:	000011f9 	.word	0x000011f9
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      90:	0000120d 	.word	0x0000120d
      94:	00001221 	.word	0x00001221
      98:	00001235 	.word	0x00001235
      9c:	00000b0d 	.word	0x00000b0d
      a0:	00007309 	.word	0x00007309
      a4:	00007309 	.word	0x00007309
      a8:	00007309 	.word	0x00007309
			alarm.time.hour = alarm.time.hour % 12;
      ac:	00007309 	.word	0x00007309
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
			if (alarm.time.hour == 0) {
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
				alarm.time.hour = 12;
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
			}
			module->clock_24h = false;
      d8:	0000ac1c 	.word	0x0000ac1c

000000dc <frame_dummy>:
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
			module->clock_24h = true;
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000ac1c 	.word	0x0000ac1c
     108:	20000074 	.word	0x20000074
     10c:	0000ac1c 	.word	0x0000ac1c
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
			time.hour = time.hour + 12;
     122:	46bd      	mov	sp, r7
     124:	b002      	add	sp, #8
     126:	bd80      	pop	{r7, pc}

00000128 <system_apb_clock_set_mask>:
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
     12e:	1c02      	adds	r2, r0, #0
     130:	6039      	str	r1, [r7, #0]

			time.pm = 0;
     132:	1dfb      	adds	r3, r7, #7
     134:	701a      	strb	r2, [r3, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	781b      	ldrb	r3, [r3, #0]
     13a:	2b01      	cmp	r3, #1
		} else if (time.hour == 12) {
     13c:	d00a      	beq.n	154 <system_apb_clock_set_mask+0x2c>
     13e:	2b02      	cmp	r3, #2
     140:	d00f      	beq.n	162 <system_apb_clock_set_mask+0x3a>
     142:	2b00      	cmp	r3, #0
     144:	d114      	bne.n	170 <system_apb_clock_set_mask+0x48>
			time.hour = 0;
     146:	4b0e      	ldr	r3, [pc, #56]	; (180 <system_apb_clock_set_mask+0x58>)
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <system_apb_clock_set_mask+0x58>)
     14a:	6991      	ldr	r1, [r2, #24]
     14c:	683a      	ldr	r2, [r7, #0]
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     14e:	430a      	orrs	r2, r1
     150:	619a      	str	r2, [r3, #24]
     152:	e00f      	b.n	174 <system_apb_clock_set_mask+0x4c>
     154:	4b0a      	ldr	r3, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
     156:	4a0a      	ldr	r2, [pc, #40]	; (180 <system_apb_clock_set_mask+0x58>)
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
     158:	69d1      	ldr	r1, [r2, #28]
     15a:	683a      	ldr	r2, [r7, #0]
     15c:	430a      	orrs	r2, r1
     15e:	61da      	str	r2, [r3, #28]
     160:	e008      	b.n	174 <system_apb_clock_set_mask+0x4c>
     162:	4b07      	ldr	r3, [pc, #28]	; (180 <system_apb_clock_set_mask+0x58>)
     164:	4a06      	ldr	r2, [pc, #24]	; (180 <system_apb_clock_set_mask+0x58>)
     166:	6a11      	ldr	r1, [r2, #32]
     168:	683a      	ldr	r2, [r7, #0]
     16a:	430a      	orrs	r2, r1
     16c:	621a      	str	r2, [r3, #32]
			if (alarm.time.pm == 1) {
     16e:	e001      	b.n	174 <system_apb_clock_set_mask+0x4c>
     170:	2317      	movs	r3, #23
     172:	e000      	b.n	176 <system_apb_clock_set_mask+0x4e>
     174:	2300      	movs	r3, #0
     176:	1c18      	adds	r0, r3, #0
				alarm.time.hour = alarm.time.hour + 12;
     178:	46bd      	mov	sp, r7
     17a:	b002      	add	sp, #8
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400

00000184 <system_pinmux_get_config_defaults>:
     184:	b580      	push	{r7, lr}
     186:	b082      	sub	sp, #8
				alarm.time.pm = 0;
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	687b      	ldr	r3, [r7, #4]
     18e:	2280      	movs	r2, #128	; 0x80
				module->clock_24h = true;
     190:	701a      	strb	r2, [r3, #0]
     192:	687b      	ldr	r3, [r7, #4]
     194:	2200      	movs	r2, #0
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
     196:	705a      	strb	r2, [r3, #1]
     198:	687b      	ldr	r3, [r7, #4]
     19a:	2201      	movs	r2, #1
     19c:	709a      	strb	r2, [r3, #2]
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	2200      	movs	r2, #0
     1a2:	70da      	strb	r2, [r3, #3]
     1a4:	46bd      	mov	sp, r7
     1a6:	b002      	add	sp, #8
     1a8:	bd80      	pop	{r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)

000001ac <system_voltage_reference_enable>:
				module->clock_24h = false;
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	1c02      	adds	r2, r0, #0
			} else if (alarm.time.hour == 12) {
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	701a      	strb	r2, [r3, #0]
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	2b00      	cmp	r3, #0
				alarm.time.hour = 0;
     1be:	d002      	beq.n	1c6 <system_voltage_reference_enable+0x1a>
     1c0:	2b01      	cmp	r3, #1
     1c2:	d007      	beq.n	1d4 <system_voltage_reference_enable+0x28>
     1c4:	e00d      	b.n	1e2 <system_voltage_reference_enable+0x36>
		} else if (time.hour == 12) {
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
     1c6:	4b08      	ldr	r3, [pc, #32]	; (1e8 <system_voltage_reference_enable+0x3c>)
     1c8:	4a07      	ldr	r2, [pc, #28]	; (1e8 <system_voltage_reference_enable+0x3c>)
     1ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1cc:	2102      	movs	r1, #2
     1ce:	430a      	orrs	r2, r1
     1d0:	641a      	str	r2, [r3, #64]	; 0x40
     1d2:	e006      	b.n	1e2 <system_voltage_reference_enable+0x36>
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <system_voltage_reference_enable+0x3c>)
     1d6:	4a04      	ldr	r2, [pc, #16]	; (1e8 <system_voltage_reference_enable+0x3c>)
     1d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
     1da:	2104      	movs	r1, #4
     1dc:	430a      	orrs	r2, r1
				alarm.time.hour = 0;
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
     1de:	641a      	str	r2, [r3, #64]	; 0x40
     1e0:	46c0      	nop			; (mov r8, r8)
     1e2:	46bd      	mov	sp, r7
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
     1e4:	b002      	add	sp, #8
     1e6:	bd80      	pop	{r7, pc}
     1e8:	40000800 	.word	0x40000800

000001ec <adc_is_syncing>:

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
     1ec:	b580      	push	{r7, lr}
     1ee:	b084      	sub	sp, #16
     1f0:	af00      	add	r7, sp, #0
     1f2:	6078      	str	r0, [r7, #4]
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	681b      	ldr	r3, [r3, #0]
     1f8:	60fb      	str	r3, [r7, #12]
     1fa:	68fb      	ldr	r3, [r7, #12]

	/* Enable RTC. */
	rtc_calendar_enable(module);
     1fc:	7e5b      	ldrb	r3, [r3, #25]
     1fe:	b2db      	uxtb	r3, r3
     200:	b2db      	uxtb	r3, r3
     202:	b25b      	sxtb	r3, r3

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
     204:	2b00      	cmp	r3, #0
     206:	da01      	bge.n	20c <adc_is_syncing+0x20>
     208:	2301      	movs	r3, #1
     20a:	e000      	b.n	20e <adc_is_syncing+0x22>
     20c:	2300      	movs	r3, #0
     20e:	1c18      	adds	r0, r3, #0
     210:	46bd      	mov	sp, r7
}
     212:	b004      	add	sp, #16
     214:	bd80      	pop	{r7, pc}
     216:	46c0      	nop			; (mov r8, r8)

00000218 <adc_get_config_defaults>:
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	6078      	str	r0, [r7, #4]
     220:	687b      	ldr	r3, [r7, #4]
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	705a      	strb	r2, [r3, #1]
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	2200      	movs	r2, #0
     230:	805a      	strh	r2, [r3, #2]
     232:	687b      	ldr	r3, [r7, #4]
     234:	2200      	movs	r2, #0
     236:	711a      	strb	r2, [r3, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
	config->reference                     = ADC_REFERENCE_INT1V;
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
	config->resolution                    = ADC_RESOLUTION_12BIT;
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2200      	movs	r2, #0
     23c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2200      	movs	r2, #0
     254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     256:	687b      	ldr	r3, [r7, #4]
     258:	22c0      	movs	r2, #192	; 0xc0
     25a:	0152      	lsls	r2, r2, #5
     25c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2200      	movs	r2, #0
     262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     276:	687b      	ldr	r3, [r7, #4]
     278:	2200      	movs	r2, #0
     27a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	222a      	movs	r2, #42	; 0x2a
     280:	2100      	movs	r1, #0
     282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2224      	movs	r2, #36	; 0x24
     294:	2100      	movs	r1, #0
     296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2200      	movs	r2, #0
     2a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	222b      	movs	r2, #43	; 0x2b
     2ae:	2100      	movs	r1, #0
     2b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	222c      	movs	r2, #44	; 0x2c
     2b6:	2100      	movs	r1, #0
     2b8:	5499      	strb	r1, [r3, r2]
}
     2ba:	46bd      	mov	sp, r7
     2bc:	b002      	add	sp, #8
     2be:	bd80      	pop	{r7, pc}

000002c0 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     2c0:	b580      	push	{r7, lr}
     2c2:	b098      	sub	sp, #96	; 0x60
     2c4:	af00      	add	r7, sp, #0
     2c6:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2c8:	230c      	movs	r3, #12
     2ca:	18fa      	adds	r2, r7, r3
     2cc:	4b15      	ldr	r3, [pc, #84]	; (324 <_adc_configure_ain_pin+0x64>)
     2ce:	1c11      	adds	r1, r2, #0
     2d0:	1c1a      	adds	r2, r3, #0
     2d2:	2350      	movs	r3, #80	; 0x50
     2d4:	1c08      	adds	r0, r1, #0
     2d6:	1c11      	adds	r1, r2, #0
     2d8:	1c1a      	adds	r2, r3, #0
     2da:	4b13      	ldr	r3, [pc, #76]	; (328 <_adc_configure_ain_pin+0x68>)
     2dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     2de:	4b13      	ldr	r3, [pc, #76]	; (32c <_adc_configure_ain_pin+0x6c>)
     2e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	2b13      	cmp	r3, #19
     2e6:	d81a      	bhi.n	31e <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2e8:	230c      	movs	r3, #12
     2ea:	18fb      	adds	r3, r7, r3
     2ec:	687a      	ldr	r2, [r7, #4]
     2ee:	0092      	lsls	r2, r2, #2
     2f0:	58d3      	ldr	r3, [r2, r3]
     2f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	1c18      	adds	r0, r3, #0
     2fa:	4b0d      	ldr	r3, [pc, #52]	; (330 <_adc_configure_ain_pin+0x70>)
     2fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2fe:	2308      	movs	r3, #8
     300:	18fb      	adds	r3, r7, r3
     302:	2200      	movs	r2, #0
     304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     306:	2308      	movs	r3, #8
     308:	18fb      	adds	r3, r7, r3
     30a:	2201      	movs	r2, #1
     30c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     310:	b2da      	uxtb	r2, r3
     312:	2308      	movs	r3, #8
     314:	18fb      	adds	r3, r7, r3
     316:	1c10      	adds	r0, r2, #0
     318:	1c19      	adds	r1, r3, #0
     31a:	4b06      	ldr	r3, [pc, #24]	; (334 <_adc_configure_ain_pin+0x74>)
     31c:	4798      	blx	r3
	}
}
     31e:	46bd      	mov	sp, r7
     320:	b018      	add	sp, #96	; 0x60
     322:	bd80      	pop	{r7, pc}
     324:	00009e64 	.word	0x00009e64
     328:	00009e41 	.word	0x00009e41
     32c:	0000ffff 	.word	0x0000ffff
     330:	00000185 	.word	0x00000185
     334:	00007189 	.word	0x00007189

00000338 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     338:	b5f0      	push	{r4, r5, r6, r7, lr}
     33a:	b089      	sub	sp, #36	; 0x24
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
     340:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     342:	231f      	movs	r3, #31
     344:	18fb      	adds	r3, r7, r3
     346:	2200      	movs	r2, #0
     348:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     34a:	2310      	movs	r3, #16
     34c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     34e:	2317      	movs	r3, #23
     350:	18fb      	adds	r3, r7, r3
     352:	2200      	movs	r2, #0
     354:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     356:	687b      	ldr	r3, [r7, #4]
     358:	681b      	ldr	r3, [r3, #0]
     35a:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     35c:	230c      	movs	r3, #12
     35e:	18fb      	adds	r3, r7, r3
     360:	1c18      	adds	r0, r3, #0
     362:	4bc1      	ldr	r3, [pc, #772]	; (668 <_adc_set_config+0x330>)
     364:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     366:	683b      	ldr	r3, [r7, #0]
     368:	781a      	ldrb	r2, [r3, #0]
     36a:	230c      	movs	r3, #12
     36c:	18fb      	adds	r3, r7, r3
     36e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     370:	230c      	movs	r3, #12
     372:	18fb      	adds	r3, r7, r3
     374:	201e      	movs	r0, #30
     376:	1c19      	adds	r1, r3, #0
     378:	4bbc      	ldr	r3, [pc, #752]	; (66c <_adc_set_config+0x334>)
     37a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     37c:	201e      	movs	r0, #30
     37e:	4bbc      	ldr	r3, [pc, #752]	; (670 <_adc_set_config+0x338>)
     380:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     382:	683b      	ldr	r3, [r7, #0]
     384:	222c      	movs	r2, #44	; 0x2c
     386:	5c9b      	ldrb	r3, [r3, r2]
     388:	2b00      	cmp	r3, #0
     38a:	d040      	beq.n	40e <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     38c:	2316      	movs	r3, #22
     38e:	18fb      	adds	r3, r7, r3
     390:	683a      	ldr	r2, [r7, #0]
     392:	212b      	movs	r1, #43	; 0x2b
     394:	5c52      	ldrb	r2, [r2, r1]
     396:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     398:	683b      	ldr	r3, [r7, #0]
     39a:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     39c:	2315      	movs	r3, #21
     39e:	18fb      	adds	r3, r7, r3
     3a0:	2216      	movs	r2, #22
     3a2:	18ba      	adds	r2, r7, r2
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	188a      	adds	r2, r1, r2
     3a8:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     3aa:	683b      	ldr	r3, [r7, #0]
     3ac:	222c      	movs	r2, #44	; 0x2c
     3ae:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     3b0:	230f      	movs	r3, #15
     3b2:	18fb      	adds	r3, r7, r3
     3b4:	2215      	movs	r2, #21
     3b6:	18ba      	adds	r2, r7, r2
     3b8:	7812      	ldrb	r2, [r2, #0]
     3ba:	188a      	adds	r2, r1, r2
     3bc:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3be:	e018      	b.n	3f2 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3c0:	2316      	movs	r3, #22
     3c2:	18fb      	adds	r3, r7, r3
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	220f      	movs	r2, #15
     3c8:	4013      	ands	r3, r2
     3ca:	683a      	ldr	r2, [r7, #0]
     3cc:	7b12      	ldrb	r2, [r2, #12]
     3ce:	189b      	adds	r3, r3, r2
     3d0:	1c18      	adds	r0, r3, #0
     3d2:	4ba8      	ldr	r3, [pc, #672]	; (674 <_adc_set_config+0x33c>)
     3d4:	4798      	blx	r3
			start_pin++;
     3d6:	2315      	movs	r3, #21
     3d8:	18fb      	adds	r3, r7, r3
     3da:	781a      	ldrb	r2, [r3, #0]
     3dc:	2315      	movs	r3, #21
     3de:	18fb      	adds	r3, r7, r3
     3e0:	3201      	adds	r2, #1
     3e2:	701a      	strb	r2, [r3, #0]
			offset++;
     3e4:	2316      	movs	r3, #22
     3e6:	18fb      	adds	r3, r7, r3
     3e8:	781a      	ldrb	r2, [r3, #0]
     3ea:	2316      	movs	r3, #22
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	3201      	adds	r2, #1
     3f0:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3f2:	2315      	movs	r3, #21
     3f4:	18fa      	adds	r2, r7, r3
     3f6:	230f      	movs	r3, #15
     3f8:	18fb      	adds	r3, r7, r3
     3fa:	7812      	ldrb	r2, [r2, #0]
     3fc:	781b      	ldrb	r3, [r3, #0]
     3fe:	429a      	cmp	r2, r3
     400:	d3de      	bcc.n	3c0 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     402:	683b      	ldr	r3, [r7, #0]
     404:	89db      	ldrh	r3, [r3, #14]
     406:	1c18      	adds	r0, r3, #0
     408:	4b9a      	ldr	r3, [pc, #616]	; (674 <_adc_set_config+0x33c>)
     40a:	4798      	blx	r3
     40c:	e009      	b.n	422 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     40e:	683b      	ldr	r3, [r7, #0]
     410:	7b1b      	ldrb	r3, [r3, #12]
     412:	1c18      	adds	r0, r3, #0
     414:	4b97      	ldr	r3, [pc, #604]	; (674 <_adc_set_config+0x33c>)
     416:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     418:	683b      	ldr	r3, [r7, #0]
     41a:	89db      	ldrh	r3, [r3, #14]
     41c:	1c18      	adds	r0, r3, #0
     41e:	4b95      	ldr	r3, [pc, #596]	; (674 <_adc_set_config+0x33c>)
     420:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     422:	683b      	ldr	r3, [r7, #0]
     424:	7d5b      	ldrb	r3, [r3, #21]
     426:	009b      	lsls	r3, r3, #2
     428:	b2da      	uxtb	r2, r3
     42a:	693b      	ldr	r3, [r7, #16]
     42c:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     42e:	683b      	ldr	r3, [r7, #0]
     430:	7d9b      	ldrb	r3, [r3, #22]
     432:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     434:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     436:	683b      	ldr	r3, [r7, #0]
     438:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     43a:	b2db      	uxtb	r3, r3
     43c:	4313      	orrs	r3, r2
     43e:	b2db      	uxtb	r3, r3
     440:	b2da      	uxtb	r2, r3
     442:	693b      	ldr	r3, [r7, #16]
     444:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     446:	683b      	ldr	r3, [r7, #0]
     448:	791b      	ldrb	r3, [r3, #4]
     44a:	2b34      	cmp	r3, #52	; 0x34
     44c:	d846      	bhi.n	4dc <_adc_set_config+0x1a4>
     44e:	009a      	lsls	r2, r3, #2
     450:	4b89      	ldr	r3, [pc, #548]	; (678 <_adc_set_config+0x340>)
     452:	18d3      	adds	r3, r2, r3
     454:	681b      	ldr	r3, [r3, #0]
     456:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     458:	231f      	movs	r3, #31
     45a:	18fb      	adds	r3, r7, r3
     45c:	683a      	ldr	r2, [r7, #0]
     45e:	7c52      	ldrb	r2, [r2, #17]
     460:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     462:	2317      	movs	r3, #23
     464:	18fb      	adds	r3, r7, r3
     466:	683a      	ldr	r2, [r7, #0]
     468:	7c12      	ldrb	r2, [r2, #16]
     46a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     46c:	2310      	movs	r3, #16
     46e:	61bb      	str	r3, [r7, #24]
		break;
     470:	e036      	b.n	4e0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     472:	231f      	movs	r3, #31
     474:	18fb      	adds	r3, r7, r3
     476:	2201      	movs	r2, #1
     478:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     47a:	2317      	movs	r3, #23
     47c:	18fb      	adds	r3, r7, r3
     47e:	2202      	movs	r2, #2
     480:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     482:	2310      	movs	r3, #16
     484:	61bb      	str	r3, [r7, #24]
		break;
     486:	e02b      	b.n	4e0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     488:	231f      	movs	r3, #31
     48a:	18fb      	adds	r3, r7, r3
     48c:	2202      	movs	r2, #2
     48e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     490:	2317      	movs	r3, #23
     492:	18fb      	adds	r3, r7, r3
     494:	2204      	movs	r2, #4
     496:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     498:	2310      	movs	r3, #16
     49a:	61bb      	str	r3, [r7, #24]
		break;
     49c:	e020      	b.n	4e0 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     49e:	231f      	movs	r3, #31
     4a0:	18fb      	adds	r3, r7, r3
     4a2:	2201      	movs	r2, #1
     4a4:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4a6:	2317      	movs	r3, #23
     4a8:	18fb      	adds	r3, r7, r3
     4aa:	2206      	movs	r2, #6
     4ac:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ae:	2310      	movs	r3, #16
     4b0:	61bb      	str	r3, [r7, #24]
		break;
     4b2:	e015      	b.n	4e0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4b4:	231f      	movs	r3, #31
     4b6:	18fb      	adds	r3, r7, r3
     4b8:	2200      	movs	r2, #0
     4ba:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4bc:	2317      	movs	r3, #23
     4be:	18fb      	adds	r3, r7, r3
     4c0:	2208      	movs	r2, #8
     4c2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c4:	2310      	movs	r3, #16
     4c6:	61bb      	str	r3, [r7, #24]
		break;
     4c8:	e00a      	b.n	4e0 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4ca:	2330      	movs	r3, #48	; 0x30
     4cc:	61bb      	str	r3, [r7, #24]
		break;
     4ce:	e007      	b.n	4e0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4d0:	2320      	movs	r3, #32
     4d2:	61bb      	str	r3, [r7, #24]
		break;
     4d4:	e004      	b.n	4e0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4d6:	2300      	movs	r3, #0
     4d8:	61bb      	str	r3, [r7, #24]
		break;
     4da:	e001      	b.n	4e0 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     4dc:	2317      	movs	r3, #23
     4de:	e1a3      	b.n	828 <_adc_set_config+0x4f0>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4e0:	231f      	movs	r3, #31
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	011b      	lsls	r3, r3, #4
     4e8:	b2db      	uxtb	r3, r3
     4ea:	2270      	movs	r2, #112	; 0x70
     4ec:	4013      	ands	r3, r2
     4ee:	b2da      	uxtb	r2, r3
     4f0:	2317      	movs	r3, #23
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	4313      	orrs	r3, r2
     4f8:	b2da      	uxtb	r2, r3
     4fa:	693b      	ldr	r3, [r7, #16]
     4fc:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	7ddb      	ldrb	r3, [r3, #23]
     502:	2b3f      	cmp	r3, #63	; 0x3f
     504:	d901      	bls.n	50a <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     506:	2317      	movs	r3, #23
     508:	e18e      	b.n	828 <_adc_set_config+0x4f0>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     50a:	683b      	ldr	r3, [r7, #0]
     50c:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     50e:	693b      	ldr	r3, [r7, #16]
     510:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     512:	46c0      	nop			; (mov r8, r8)
     514:	687b      	ldr	r3, [r7, #4]
     516:	1c18      	adds	r0, r3, #0
     518:	4b58      	ldr	r3, [pc, #352]	; (67c <_adc_set_config+0x344>)
     51a:	4798      	blx	r3
     51c:	1e03      	subs	r3, r0, #0
     51e:	d1f9      	bne.n	514 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     520:	683b      	ldr	r3, [r7, #0]
     522:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     524:	69bb      	ldr	r3, [r7, #24]
     526:	b29b      	uxth	r3, r3
     528:	4313      	orrs	r3, r2
     52a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     52c:	683b      	ldr	r3, [r7, #0]
     52e:	2124      	movs	r1, #36	; 0x24
     530:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     532:	b29b      	uxth	r3, r3
     534:	00db      	lsls	r3, r3, #3
     536:	b29b      	uxth	r3, r3
     538:	4313      	orrs	r3, r2
     53a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     53c:	683b      	ldr	r3, [r7, #0]
     53e:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     540:	b29b      	uxth	r3, r3
     542:	009b      	lsls	r3, r3, #2
     544:	b29b      	uxth	r3, r3
     546:	4313      	orrs	r3, r2
     548:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     54a:	683b      	ldr	r3, [r7, #0]
     54c:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     54e:	b29b      	uxth	r3, r3
     550:	18db      	adds	r3, r3, r3
     552:	b29b      	uxth	r3, r3
     554:	4313      	orrs	r3, r2
     556:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     558:	683b      	ldr	r3, [r7, #0]
     55a:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     55c:	b29b      	uxth	r3, r3
     55e:	4313      	orrs	r3, r2
     560:	b29a      	uxth	r2, r3
     562:	693b      	ldr	r3, [r7, #16]
     564:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     566:	683b      	ldr	r3, [r7, #0]
     568:	7e1b      	ldrb	r3, [r3, #24]
     56a:	2b00      	cmp	r3, #0
     56c:	d100      	bne.n	570 <_adc_set_config+0x238>
     56e:	e0ba      	b.n	6e6 <_adc_set_config+0x3ae>
		switch (resolution) {
     570:	69bb      	ldr	r3, [r7, #24]
     572:	2b10      	cmp	r3, #16
     574:	d100      	bne.n	578 <_adc_set_config+0x240>
     576:	e08f      	b.n	698 <_adc_set_config+0x360>
     578:	d802      	bhi.n	580 <_adc_set_config+0x248>
     57a:	2b00      	cmp	r3, #0
     57c:	d04d      	beq.n	61a <_adc_set_config+0x2e2>
     57e:	e0b2      	b.n	6e6 <_adc_set_config+0x3ae>
     580:	2b20      	cmp	r3, #32
     582:	d023      	beq.n	5cc <_adc_set_config+0x294>
     584:	2b30      	cmp	r3, #48	; 0x30
     586:	d000      	beq.n	58a <_adc_set_config+0x252>
     588:	e0ad      	b.n	6e6 <_adc_set_config+0x3ae>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     58a:	683b      	ldr	r3, [r7, #0]
     58c:	7cdb      	ldrb	r3, [r3, #19]
     58e:	2b00      	cmp	r3, #0
     590:	d011      	beq.n	5b6 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     592:	683b      	ldr	r3, [r7, #0]
     594:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     596:	2b7f      	cmp	r3, #127	; 0x7f
     598:	dc0b      	bgt.n	5b2 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     59e:	3380      	adds	r3, #128	; 0x80
     5a0:	db07      	blt.n	5b2 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5a2:	683b      	ldr	r3, [r7, #0]
     5a4:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     5a6:	2b7f      	cmp	r3, #127	; 0x7f
     5a8:	dc03      	bgt.n	5b2 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     5aa:	683b      	ldr	r3, [r7, #0]
     5ac:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     5ae:	3380      	adds	r3, #128	; 0x80
     5b0:	da01      	bge.n	5b6 <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5b2:	2317      	movs	r3, #23
     5b4:	e138      	b.n	828 <_adc_set_config+0x4f0>
			} else if (config->window.window_lower_value > 255 ||
     5b6:	683b      	ldr	r3, [r7, #0]
     5b8:	69db      	ldr	r3, [r3, #28]
     5ba:	2bff      	cmp	r3, #255	; 0xff
     5bc:	dc03      	bgt.n	5c6 <_adc_set_config+0x28e>
					config->window.window_upper_value > 255){
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     5c2:	2bff      	cmp	r3, #255	; 0xff
     5c4:	dd01      	ble.n	5ca <_adc_set_config+0x292>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5c6:	2317      	movs	r3, #23
     5c8:	e12e      	b.n	828 <_adc_set_config+0x4f0>
			}
			break;
     5ca:	e08c      	b.n	6e6 <_adc_set_config+0x3ae>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5cc:	683b      	ldr	r3, [r7, #0]
     5ce:	7cdb      	ldrb	r3, [r3, #19]
     5d0:	2b00      	cmp	r3, #0
     5d2:	d015      	beq.n	600 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     5d8:	4a29      	ldr	r2, [pc, #164]	; (680 <_adc_set_config+0x348>)
     5da:	4293      	cmp	r3, r2
     5dc:	dc0e      	bgt.n	5fc <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5de:	683b      	ldr	r3, [r7, #0]
     5e0:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     5e2:	4a28      	ldr	r2, [pc, #160]	; (684 <_adc_set_config+0x34c>)
     5e4:	4293      	cmp	r3, r2
     5e6:	db09      	blt.n	5fc <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     5e8:	683b      	ldr	r3, [r7, #0]
     5ea:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     5ec:	4a24      	ldr	r2, [pc, #144]	; (680 <_adc_set_config+0x348>)
     5ee:	4293      	cmp	r3, r2
     5f0:	dc04      	bgt.n	5fc <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
     5f2:	683b      	ldr	r3, [r7, #0]
     5f4:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     5f6:	4a23      	ldr	r2, [pc, #140]	; (684 <_adc_set_config+0x34c>)
     5f8:	4293      	cmp	r3, r2
     5fa:	da01      	bge.n	600 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5fc:	2317      	movs	r3, #23
     5fe:	e113      	b.n	828 <_adc_set_config+0x4f0>
			} else if (config->window.window_lower_value > 1023 ||
     600:	683b      	ldr	r3, [r7, #0]
     602:	69db      	ldr	r3, [r3, #28]
     604:	4a20      	ldr	r2, [pc, #128]	; (688 <_adc_set_config+0x350>)
     606:	4293      	cmp	r3, r2
     608:	dc04      	bgt.n	614 <_adc_set_config+0x2dc>
					config->window.window_upper_value > 1023){
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     60e:	4a1e      	ldr	r2, [pc, #120]	; (688 <_adc_set_config+0x350>)
     610:	4293      	cmp	r3, r2
     612:	dd01      	ble.n	618 <_adc_set_config+0x2e0>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     614:	2317      	movs	r3, #23
     616:	e107      	b.n	828 <_adc_set_config+0x4f0>
			}
			break;
     618:	e065      	b.n	6e6 <_adc_set_config+0x3ae>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     61a:	683b      	ldr	r3, [r7, #0]
     61c:	7cdb      	ldrb	r3, [r3, #19]
     61e:	2b00      	cmp	r3, #0
     620:	d015      	beq.n	64e <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     622:	683b      	ldr	r3, [r7, #0]
     624:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     626:	4a19      	ldr	r2, [pc, #100]	; (68c <_adc_set_config+0x354>)
     628:	4293      	cmp	r3, r2
     62a:	dc0e      	bgt.n	64a <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     62c:	683b      	ldr	r3, [r7, #0]
     62e:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     630:	4a17      	ldr	r2, [pc, #92]	; (690 <_adc_set_config+0x358>)
     632:	4293      	cmp	r3, r2
     634:	db09      	blt.n	64a <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     636:	683b      	ldr	r3, [r7, #0]
     638:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     63a:	4a14      	ldr	r2, [pc, #80]	; (68c <_adc_set_config+0x354>)
     63c:	4293      	cmp	r3, r2
     63e:	dc04      	bgt.n	64a <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     640:	683b      	ldr	r3, [r7, #0]
     642:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     644:	4a12      	ldr	r2, [pc, #72]	; (690 <_adc_set_config+0x358>)
     646:	4293      	cmp	r3, r2
     648:	da01      	bge.n	64e <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     64a:	2317      	movs	r3, #23
     64c:	e0ec      	b.n	828 <_adc_set_config+0x4f0>
			} else if (config->window.window_lower_value > 4095 ||
     64e:	683b      	ldr	r3, [r7, #0]
     650:	69db      	ldr	r3, [r3, #28]
     652:	4a10      	ldr	r2, [pc, #64]	; (694 <_adc_set_config+0x35c>)
     654:	4293      	cmp	r3, r2
     656:	dc04      	bgt.n	662 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     658:	683b      	ldr	r3, [r7, #0]
     65a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     65c:	4a0d      	ldr	r2, [pc, #52]	; (694 <_adc_set_config+0x35c>)
     65e:	4293      	cmp	r3, r2
     660:	dd01      	ble.n	666 <_adc_set_config+0x32e>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     662:	2317      	movs	r3, #23
     664:	e0e0      	b.n	828 <_adc_set_config+0x4f0>
			}
			break;
     666:	e03e      	b.n	6e6 <_adc_set_config+0x3ae>
     668:	00000115 	.word	0x00000115
     66c:	00006e9d 	.word	0x00006e9d
     670:	00006ee1 	.word	0x00006ee1
     674:	000002c1 	.word	0x000002c1
     678:	00009eb4 	.word	0x00009eb4
     67c:	000001ed 	.word	0x000001ed
     680:	000001ff 	.word	0x000001ff
     684:	fffffe00 	.word	0xfffffe00
     688:	000003ff 	.word	0x000003ff
     68c:	000007ff 	.word	0x000007ff
     690:	fffff800 	.word	0xfffff800
     694:	00000fff 	.word	0x00000fff
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     698:	683b      	ldr	r3, [r7, #0]
     69a:	7cdb      	ldrb	r3, [r3, #19]
     69c:	2b00      	cmp	r3, #0
     69e:	d015      	beq.n	6cc <_adc_set_config+0x394>
					(config->window.window_lower_value > 32767 ||
     6a0:	683b      	ldr	r3, [r7, #0]
     6a2:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     6a4:	4a62      	ldr	r2, [pc, #392]	; (830 <_adc_set_config+0x4f8>)
     6a6:	4293      	cmp	r3, r2
     6a8:	dc0e      	bgt.n	6c8 <_adc_set_config+0x390>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     6aa:	683b      	ldr	r3, [r7, #0]
     6ac:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     6ae:	4a61      	ldr	r2, [pc, #388]	; (834 <_adc_set_config+0x4fc>)
     6b0:	4293      	cmp	r3, r2
     6b2:	db09      	blt.n	6c8 <_adc_set_config+0x390>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     6b8:	4a5d      	ldr	r2, [pc, #372]	; (830 <_adc_set_config+0x4f8>)
     6ba:	4293      	cmp	r3, r2
     6bc:	dc04      	bgt.n	6c8 <_adc_set_config+0x390>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     6be:	683b      	ldr	r3, [r7, #0]
     6c0:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     6c2:	4a5c      	ldr	r2, [pc, #368]	; (834 <_adc_set_config+0x4fc>)
     6c4:	4293      	cmp	r3, r2
     6c6:	da01      	bge.n	6cc <_adc_set_config+0x394>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6c8:	2317      	movs	r3, #23
     6ca:	e0ad      	b.n	828 <_adc_set_config+0x4f0>
			} else if (config->window.window_lower_value > 65535 ||
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	69db      	ldr	r3, [r3, #28]
     6d0:	4a59      	ldr	r2, [pc, #356]	; (838 <_adc_set_config+0x500>)
     6d2:	4293      	cmp	r3, r2
     6d4:	dc04      	bgt.n	6e0 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 65535){
     6d6:	683b      	ldr	r3, [r7, #0]
     6d8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     6da:	4a57      	ldr	r2, [pc, #348]	; (838 <_adc_set_config+0x500>)
     6dc:	4293      	cmp	r3, r2
     6de:	dd01      	ble.n	6e4 <_adc_set_config+0x3ac>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     6e0:	2317      	movs	r3, #23
     6e2:	e0a1      	b.n	828 <_adc_set_config+0x4f0>
			}
			break;
     6e4:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	1c18      	adds	r0, r3, #0
     6ec:	4b53      	ldr	r3, [pc, #332]	; (83c <_adc_set_config+0x504>)
     6ee:	4798      	blx	r3
     6f0:	1e03      	subs	r3, r0, #0
     6f2:	d1f9      	bne.n	6e8 <_adc_set_config+0x3b0>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     6f4:	683b      	ldr	r3, [r7, #0]
     6f6:	7e1a      	ldrb	r2, [r3, #24]
     6f8:	693b      	ldr	r3, [r7, #16]
     6fa:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     6fc:	46c0      	nop			; (mov r8, r8)
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	1c18      	adds	r0, r3, #0
     702:	4b4e      	ldr	r3, [pc, #312]	; (83c <_adc_set_config+0x504>)
     704:	4798      	blx	r3
     706:	1e03      	subs	r3, r0, #0
     708:	d1f9      	bne.n	6fe <_adc_set_config+0x3c6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     70a:	683b      	ldr	r3, [r7, #0]
     70c:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     70e:	b29a      	uxth	r2, r3
     710:	693b      	ldr	r3, [r7, #16]
     712:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     714:	46c0      	nop			; (mov r8, r8)
     716:	687b      	ldr	r3, [r7, #4]
     718:	1c18      	adds	r0, r3, #0
     71a:	4b48      	ldr	r3, [pc, #288]	; (83c <_adc_set_config+0x504>)
     71c:	4798      	blx	r3
     71e:	1e03      	subs	r3, r0, #0
     720:	d1f9      	bne.n	716 <_adc_set_config+0x3de>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     722:	683b      	ldr	r3, [r7, #0]
     724:	6a1b      	ldr	r3, [r3, #32]
     726:	b29a      	uxth	r2, r3
     728:	693b      	ldr	r3, [r7, #16]
     72a:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     72c:	2314      	movs	r3, #20
     72e:	18fb      	adds	r3, r7, r3
     730:	683a      	ldr	r2, [r7, #0]
     732:	212c      	movs	r1, #44	; 0x2c
     734:	5c52      	ldrb	r2, [r2, r1]
     736:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     738:	2314      	movs	r3, #20
     73a:	18fb      	adds	r3, r7, r3
     73c:	781b      	ldrb	r3, [r3, #0]
     73e:	2b00      	cmp	r3, #0
     740:	d006      	beq.n	750 <_adc_set_config+0x418>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     742:	2314      	movs	r3, #20
     744:	18fb      	adds	r3, r7, r3
     746:	781a      	ldrb	r2, [r3, #0]
     748:	2314      	movs	r3, #20
     74a:	18fb      	adds	r3, r7, r3
     74c:	3a01      	subs	r2, #1
     74e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     750:	2314      	movs	r3, #20
     752:	18fb      	adds	r3, r7, r3
     754:	781b      	ldrb	r3, [r3, #0]
     756:	2b0f      	cmp	r3, #15
     758:	d804      	bhi.n	764 <_adc_set_config+0x42c>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	222b      	movs	r2, #43	; 0x2b
     75e:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     760:	2b0f      	cmp	r3, #15
     762:	d901      	bls.n	768 <_adc_set_config+0x430>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     764:	2317      	movs	r3, #23
     766:	e05f      	b.n	828 <_adc_set_config+0x4f0>
	}

	while (adc_is_syncing(module_inst)) {
     768:	46c0      	nop			; (mov r8, r8)
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	1c18      	adds	r0, r3, #0
     76e:	4b33      	ldr	r3, [pc, #204]	; (83c <_adc_set_config+0x504>)
     770:	4798      	blx	r3
     772:	1e03      	subs	r3, r0, #0
     774:	d1f9      	bne.n	76a <_adc_set_config+0x432>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     776:	683b      	ldr	r3, [r7, #0]
     778:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     77a:	683a      	ldr	r2, [r7, #0]
     77c:	212b      	movs	r1, #43	; 0x2b
     77e:	5c52      	ldrb	r2, [r2, r1]
     780:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     782:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     784:	2214      	movs	r2, #20
     786:	18ba      	adds	r2, r7, r2
     788:	7812      	ldrb	r2, [r2, #0]
     78a:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     78c:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     78e:	683a      	ldr	r2, [r7, #0]
     790:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     792:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     794:	683a      	ldr	r2, [r7, #0]
     796:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     798:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     79a:	693b      	ldr	r3, [r7, #16]
     79c:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     79e:	683b      	ldr	r3, [r7, #0]
     7a0:	222a      	movs	r2, #42	; 0x2a
     7a2:	5c9a      	ldrb	r2, [r3, r2]
     7a4:	693b      	ldr	r3, [r7, #16]
     7a6:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     7a8:	693b      	ldr	r3, [r7, #16]
     7aa:	220f      	movs	r2, #15
     7ac:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     7ae:	683b      	ldr	r3, [r7, #0]
     7b0:	2224      	movs	r2, #36	; 0x24
     7b2:	5c9b      	ldrb	r3, [r3, r2]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d01d      	beq.n	7f4 <_adc_set_config+0x4bc>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     7bc:	4a20      	ldr	r2, [pc, #128]	; (840 <_adc_set_config+0x508>)
     7be:	4293      	cmp	r3, r2
     7c0:	d901      	bls.n	7c6 <_adc_set_config+0x48e>
			return STATUS_ERR_INVALID_ARG;
     7c2:	2317      	movs	r3, #23
     7c4:	e030      	b.n	828 <_adc_set_config+0x4f0>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     7ca:	693b      	ldr	r3, [r7, #16]
     7cc:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7ce:	683b      	ldr	r3, [r7, #0]
     7d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     7d2:	b21b      	sxth	r3, r3
     7d4:	4a1b      	ldr	r2, [pc, #108]	; (844 <_adc_set_config+0x50c>)
     7d6:	4293      	cmp	r3, r2
     7d8:	dc05      	bgt.n	7e6 <_adc_set_config+0x4ae>
				config->correction.offset_correction < -2048) {
     7da:	683b      	ldr	r3, [r7, #0]
     7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     7de:	b21b      	sxth	r3, r3
     7e0:	4a19      	ldr	r2, [pc, #100]	; (848 <_adc_set_config+0x510>)
     7e2:	4293      	cmp	r3, r2
     7e4:	da01      	bge.n	7ea <_adc_set_config+0x4b2>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     7e6:	2317      	movs	r3, #23
     7e8:	e01e      	b.n	828 <_adc_set_config+0x4f0>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     7ea:	683b      	ldr	r3, [r7, #0]
     7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     7ee:	b29a      	uxth	r2, r3
     7f0:	693b      	ldr	r3, [r7, #16]
     7f2:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     7f4:	4b15      	ldr	r3, [pc, #84]	; (84c <_adc_set_config+0x514>)
     7f6:	681b      	ldr	r3, [r3, #0]
     7f8:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     7fa:	b29b      	uxth	r3, r3
     7fc:	021b      	lsls	r3, r3, #8
     7fe:	b29a      	uxth	r2, r3
     800:	23e0      	movs	r3, #224	; 0xe0
     802:	00db      	lsls	r3, r3, #3
     804:	4013      	ands	r3, r2
     806:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     808:	4b11      	ldr	r3, [pc, #68]	; (850 <_adc_set_config+0x518>)
     80a:	685c      	ldr	r4, [r3, #4]
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	0161      	lsls	r1, r4, #5
     810:	0edd      	lsrs	r5, r3, #27
     812:	430d      	orrs	r5, r1
     814:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     816:	b2ab      	uxth	r3, r5
     818:	21ff      	movs	r1, #255	; 0xff
     81a:	400b      	ands	r3, r1
     81c:	b29b      	uxth	r3, r3
     81e:	4313      	orrs	r3, r2
     820:	b29a      	uxth	r2, r3
     822:	693b      	ldr	r3, [r7, #16]
     824:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     826:	2300      	movs	r3, #0
}
     828:	1c18      	adds	r0, r3, #0
     82a:	46bd      	mov	sp, r7
     82c:	b009      	add	sp, #36	; 0x24
     82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     830:	00007fff 	.word	0x00007fff
     834:	ffff8000 	.word	0xffff8000
     838:	0000ffff 	.word	0x0000ffff
     83c:	000001ed 	.word	0x000001ed
     840:	00000fff 	.word	0x00000fff
     844:	000007ff 	.word	0x000007ff
     848:	fffff800 	.word	0xfffff800
     84c:	00806024 	.word	0x00806024
     850:	00806020 	.word	0x00806020

00000854 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     854:	b580      	push	{r7, lr}
     856:	b086      	sub	sp, #24
     858:	af00      	add	r7, sp, #0
     85a:	60f8      	str	r0, [r7, #12]
     85c:	60b9      	str	r1, [r7, #8]
     85e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     860:	68fb      	ldr	r3, [r7, #12]
     862:	68ba      	ldr	r2, [r7, #8]
     864:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     866:	2380      	movs	r3, #128	; 0x80
     868:	025b      	lsls	r3, r3, #9
     86a:	2002      	movs	r0, #2
     86c:	1c19      	adds	r1, r3, #0
     86e:	4b32      	ldr	r3, [pc, #200]	; (938 <adc_init+0xe4>)
     870:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     872:	68bb      	ldr	r3, [r7, #8]
     874:	781b      	ldrb	r3, [r3, #0]
     876:	b2db      	uxtb	r3, r3
     878:	1c1a      	adds	r2, r3, #0
     87a:	2301      	movs	r3, #1
     87c:	4013      	ands	r3, r2
     87e:	d001      	beq.n	884 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     880:	2305      	movs	r3, #5
     882:	e055      	b.n	930 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     884:	68bb      	ldr	r3, [r7, #8]
     886:	781b      	ldrb	r3, [r3, #0]
     888:	b2db      	uxtb	r3, r3
     88a:	1c1a      	adds	r2, r3, #0
     88c:	2302      	movs	r3, #2
     88e:	4013      	ands	r3, r2
     890:	d001      	beq.n	896 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     892:	231c      	movs	r3, #28
     894:	e04c      	b.n	930 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     896:	687b      	ldr	r3, [r7, #4]
     898:	785a      	ldrb	r2, [r3, #1]
     89a:	68fb      	ldr	r3, [r7, #12]
     89c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	791b      	ldrb	r3, [r3, #4]
     8a2:	2b00      	cmp	r3, #0
     8a4:	d102      	bne.n	8ac <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     8a6:	2001      	movs	r0, #1
     8a8:	4b24      	ldr	r3, [pc, #144]	; (93c <adc_init+0xe8>)
     8aa:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8ac:	2317      	movs	r3, #23
     8ae:	18fb      	adds	r3, r7, r3
     8b0:	2200      	movs	r2, #0
     8b2:	701a      	strb	r2, [r3, #0]
     8b4:	e00e      	b.n	8d4 <adc_init+0x80>
		module_inst->callback[i] = NULL;
     8b6:	2317      	movs	r3, #23
     8b8:	18fb      	adds	r3, r7, r3
     8ba:	781a      	ldrb	r2, [r3, #0]
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	3202      	adds	r2, #2
     8c0:	0092      	lsls	r2, r2, #2
     8c2:	2100      	movs	r1, #0
     8c4:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     8c6:	2317      	movs	r3, #23
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	781a      	ldrb	r2, [r3, #0]
     8cc:	2317      	movs	r3, #23
     8ce:	18fb      	adds	r3, r7, r3
     8d0:	3201      	adds	r2, #1
     8d2:	701a      	strb	r2, [r3, #0]
     8d4:	2317      	movs	r3, #23
     8d6:	18fb      	adds	r3, r7, r3
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	2b02      	cmp	r3, #2
     8dc:	d9eb      	bls.n	8b6 <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	2200      	movs	r2, #0
     8e2:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     8e4:	68fb      	ldr	r3, [r7, #12]
     8e6:	2200      	movs	r2, #0
     8e8:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     8ea:	68fb      	ldr	r3, [r7, #12]
     8ec:	2200      	movs	r2, #0
     8ee:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     8f0:	68fb      	ldr	r3, [r7, #12]
     8f2:	2200      	movs	r2, #0
     8f4:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
     8f6:	4b12      	ldr	r3, [pc, #72]	; (940 <adc_init+0xec>)
     8f8:	68fa      	ldr	r2, [r7, #12]
     8fa:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	222a      	movs	r2, #42	; 0x2a
     900:	5c9b      	ldrb	r3, [r3, r2]
     902:	2b00      	cmp	r3, #0
     904:	d10a      	bne.n	91c <adc_init+0xc8>
			!config->freerunning) {
     906:	687b      	ldr	r3, [r7, #4]
     908:	7d1b      	ldrb	r3, [r3, #20]
     90a:	2201      	movs	r2, #1
     90c:	4053      	eors	r3, r2
     90e:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     910:	2b00      	cmp	r3, #0
     912:	d003      	beq.n	91c <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
     914:	68fb      	ldr	r3, [r7, #12]
     916:	2201      	movs	r2, #1
     918:	775a      	strb	r2, [r3, #29]
     91a:	e002      	b.n	922 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
     91c:	68fb      	ldr	r3, [r7, #12]
     91e:	2200      	movs	r2, #0
     920:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     922:	68fa      	ldr	r2, [r7, #12]
     924:	687b      	ldr	r3, [r7, #4]
     926:	1c10      	adds	r0, r2, #0
     928:	1c19      	adds	r1, r3, #0
     92a:	4b06      	ldr	r3, [pc, #24]	; (944 <adc_init+0xf0>)
     92c:	4798      	blx	r3
     92e:	1c03      	adds	r3, r0, #0
}
     930:	1c18      	adds	r0, r3, #0
     932:	46bd      	mov	sp, r7
     934:	b006      	add	sp, #24
     936:	bd80      	pop	{r7, pc}
     938:	00000129 	.word	0x00000129
     93c:	000001ad 	.word	0x000001ad
     940:	2000016c 	.word	0x2000016c
     944:	00000339 	.word	0x00000339

00000948 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     948:	b580      	push	{r7, lr}
     94a:	b084      	sub	sp, #16
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     950:	687b      	ldr	r3, [r7, #4]
     952:	681b      	ldr	r3, [r3, #0]
     954:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     956:	68fb      	ldr	r3, [r7, #12]
     958:	7e5b      	ldrb	r3, [r3, #25]
     95a:	b2db      	uxtb	r3, r3
     95c:	b2db      	uxtb	r3, r3
     95e:	b25b      	sxtb	r3, r3
     960:	2b00      	cmp	r3, #0
     962:	da01      	bge.n	968 <adc_is_syncing+0x20>
		return true;
     964:	2301      	movs	r3, #1
     966:	e000      	b.n	96a <adc_is_syncing+0x22>
	}

	return false;
     968:	2300      	movs	r3, #0
}
     96a:	1c18      	adds	r0, r3, #0
     96c:	46bd      	mov	sp, r7
     96e:	b004      	add	sp, #16
     970:	bd80      	pop	{r7, pc}
     972:	46c0      	nop			; (mov r8, r8)

00000974 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     974:	b580      	push	{r7, lr}
     976:	b084      	sub	sp, #16
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	681b      	ldr	r3, [r3, #0]
     980:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     982:	46c0      	nop			; (mov r8, r8)
     984:	687b      	ldr	r3, [r7, #4]
     986:	1c18      	adds	r0, r3, #0
     988:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <adc_start_conversion+0x40>)
     98a:	4798      	blx	r3
     98c:	1e03      	subs	r3, r0, #0
     98e:	d1f9      	bne.n	984 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     990:	68fb      	ldr	r3, [r7, #12]
     992:	7b1b      	ldrb	r3, [r3, #12]
     994:	b2db      	uxtb	r3, r3
     996:	2202      	movs	r2, #2
     998:	4313      	orrs	r3, r2
     99a:	b2da      	uxtb	r2, r3
     99c:	68fb      	ldr	r3, [r7, #12]
     99e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     9a0:	46c0      	nop			; (mov r8, r8)
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	1c18      	adds	r0, r3, #0
     9a6:	4b03      	ldr	r3, [pc, #12]	; (9b4 <adc_start_conversion+0x40>)
     9a8:	4798      	blx	r3
     9aa:	1e03      	subs	r3, r0, #0
     9ac:	d1f9      	bne.n	9a2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     9ae:	46bd      	mov	sp, r7
     9b0:	b004      	add	sp, #16
     9b2:	bd80      	pop	{r7, pc}
     9b4:	00000949 	.word	0x00000949

000009b8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b084      	sub	sp, #16
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
     9c0:	1c0a      	adds	r2, r1, #0
     9c2:	1cfb      	adds	r3, r7, #3
     9c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	681b      	ldr	r3, [r3, #0]
     9ca:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     9cc:	68fb      	ldr	r3, [r7, #12]
     9ce:	1cfa      	adds	r2, r7, #3
     9d0:	7812      	ldrb	r2, [r2, #0]
     9d2:	759a      	strb	r2, [r3, #22]
}
     9d4:	46bd      	mov	sp, r7
     9d6:	b004      	add	sp, #16
     9d8:	bd80      	pop	{r7, pc}
     9da:	46c0      	nop			; (mov r8, r8)

000009dc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     9dc:	b580      	push	{r7, lr}
     9de:	b084      	sub	sp, #16
     9e0:	af00      	add	r7, sp, #0
     9e2:	1c02      	adds	r2, r0, #0
     9e4:	1dfb      	adds	r3, r7, #7
     9e6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     9e8:	1dfb      	adds	r3, r7, #7
     9ea:	781a      	ldrb	r2, [r3, #0]
     9ec:	4b43      	ldr	r3, [pc, #268]	; (afc <_adc_interrupt_handler+0x120>)
     9ee:	0092      	lsls	r2, r2, #2
     9f0:	58d3      	ldr	r3, [r2, r3]
     9f2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	681b      	ldr	r3, [r3, #0]
     9f8:	7e1b      	ldrb	r3, [r3, #24]
     9fa:	b2db      	uxtb	r3, r3
     9fc:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     9fe:	68bb      	ldr	r3, [r7, #8]
     a00:	2201      	movs	r2, #1
     a02:	4013      	ands	r3, r2
     a04:	d045      	beq.n	a92 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	7edb      	ldrb	r3, [r3, #27]
     a0a:	1c1a      	adds	r2, r3, #0
     a0c:	2301      	movs	r3, #1
     a0e:	4013      	ands	r3, r2
     a10:	d03f      	beq.n	a92 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     a12:	68fb      	ldr	r3, [r7, #12]
     a14:	7e9b      	ldrb	r3, [r3, #26]
     a16:	1c1a      	adds	r2, r3, #0
     a18:	2301      	movs	r3, #1
     a1a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     a1c:	d039      	beq.n	a92 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a1e:	68fb      	ldr	r3, [r7, #12]
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	2201      	movs	r2, #1
     a24:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	68fb      	ldr	r3, [r7, #12]
     a2a:	1c18      	adds	r0, r3, #0
     a2c:	4b34      	ldr	r3, [pc, #208]	; (b00 <_adc_interrupt_handler+0x124>)
     a2e:	4798      	blx	r3
     a30:	1e03      	subs	r3, r0, #0
     a32:	d1f9      	bne.n	a28 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	695b      	ldr	r3, [r3, #20]
     a38:	1c99      	adds	r1, r3, #2
     a3a:	68fa      	ldr	r2, [r7, #12]
     a3c:	6151      	str	r1, [r2, #20]
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	6812      	ldr	r2, [r2, #0]
     a42:	8b52      	ldrh	r2, [r2, #26]
     a44:	b292      	uxth	r2, r2
     a46:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	8b1b      	ldrh	r3, [r3, #24]
     a4c:	b29b      	uxth	r3, r3
     a4e:	3b01      	subs	r3, #1
     a50:	b29b      	uxth	r3, r3
     a52:	68fa      	ldr	r2, [r7, #12]
     a54:	1c19      	adds	r1, r3, #0
     a56:	8311      	strh	r1, [r2, #24]
     a58:	2b00      	cmp	r3, #0
     a5a:	d008      	beq.n	a6e <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	7f5b      	ldrb	r3, [r3, #29]
     a60:	2b00      	cmp	r3, #0
     a62:	d016      	beq.n	a92 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
     a64:	68fb      	ldr	r3, [r7, #12]
     a66:	1c18      	adds	r0, r3, #0
     a68:	4b26      	ldr	r3, [pc, #152]	; (b04 <_adc_interrupt_handler+0x128>)
     a6a:	4798      	blx	r3
     a6c:	e011      	b.n	a92 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	7f1b      	ldrb	r3, [r3, #28]
     a72:	b2db      	uxtb	r3, r3
     a74:	2b05      	cmp	r3, #5
     a76:	d10c      	bne.n	a92 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	2200      	movs	r2, #0
     a7c:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     a7e:	68fb      	ldr	r3, [r7, #12]
     a80:	1c18      	adds	r0, r3, #0
     a82:	2101      	movs	r1, #1
     a84:	4b20      	ldr	r3, [pc, #128]	; (b08 <_adc_interrupt_handler+0x12c>)
     a86:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	689b      	ldr	r3, [r3, #8]
     a8c:	68fa      	ldr	r2, [r7, #12]
     a8e:	1c10      	adds	r0, r2, #0
     a90:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     a92:	68bb      	ldr	r3, [r7, #8]
     a94:	2204      	movs	r2, #4
     a96:	4013      	ands	r3, r2
     a98:	d014      	beq.n	ac4 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     a9a:	68fb      	ldr	r3, [r7, #12]
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	2204      	movs	r2, #4
     aa0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     aa2:	68fb      	ldr	r3, [r7, #12]
     aa4:	7edb      	ldrb	r3, [r3, #27]
     aa6:	1c1a      	adds	r2, r3, #0
     aa8:	2302      	movs	r3, #2
     aaa:	4013      	ands	r3, r2
     aac:	d00a      	beq.n	ac4 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	7e9b      	ldrb	r3, [r3, #26]
     ab2:	1c1a      	adds	r2, r3, #0
     ab4:	2302      	movs	r3, #2
     ab6:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ab8:	d004      	beq.n	ac4 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     aba:	68fb      	ldr	r3, [r7, #12]
     abc:	68db      	ldr	r3, [r3, #12]
     abe:	68fa      	ldr	r2, [r7, #12]
     ac0:	1c10      	adds	r0, r2, #0
     ac2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     ac4:	68bb      	ldr	r3, [r7, #8]
     ac6:	2202      	movs	r2, #2
     ac8:	4013      	ands	r3, r2
     aca:	d014      	beq.n	af6 <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	2202      	movs	r2, #2
     ad2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	7edb      	ldrb	r3, [r3, #27]
     ad8:	1c1a      	adds	r2, r3, #0
     ada:	2304      	movs	r3, #4
     adc:	4013      	ands	r3, r2
     ade:	d00a      	beq.n	af6 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     ae0:	68fb      	ldr	r3, [r7, #12]
     ae2:	7e9b      	ldrb	r3, [r3, #26]
     ae4:	1c1a      	adds	r2, r3, #0
     ae6:	2304      	movs	r3, #4
     ae8:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     aea:	d004      	beq.n	af6 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     aec:	68fb      	ldr	r3, [r7, #12]
     aee:	691b      	ldr	r3, [r3, #16]
     af0:	68fa      	ldr	r2, [r7, #12]
     af2:	1c10      	adds	r0, r2, #0
     af4:	4798      	blx	r3
		}
	}
}
     af6:	46bd      	mov	sp, r7
     af8:	b004      	add	sp, #16
     afa:	bd80      	pop	{r7, pc}
     afc:	2000016c 	.word	0x2000016c
     b00:	00000949 	.word	0x00000949
     b04:	00000975 	.word	0x00000975
     b08:	000009b9 	.word	0x000009b9

00000b0c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     b10:	2000      	movs	r0, #0
     b12:	4b02      	ldr	r3, [pc, #8]	; (b1c <ADC_Handler+0x10>)
     b14:	4798      	blx	r3
}
     b16:	46bd      	mov	sp, r7
     b18:	bd80      	pop	{r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	000009dd 	.word	0x000009dd

00000b20 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	2200      	movs	r2, #0
     b2c:	701a      	strb	r2, [r3, #0]
}
     b2e:	46bd      	mov	sp, r7
     b30:	b002      	add	sp, #8
     b32:	bd80      	pop	{r7, pc}

00000b34 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     b34:	b580      	push	{r7, lr}
     b36:	b082      	sub	sp, #8
     b38:	af00      	add	r7, sp, #0
     b3a:	1c02      	adds	r2, r0, #0
     b3c:	6039      	str	r1, [r7, #0]
     b3e:	1dfb      	adds	r3, r7, #7
     b40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     b42:	1dfb      	adds	r3, r7, #7
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	2b01      	cmp	r3, #1
     b48:	d00a      	beq.n	b60 <system_apb_clock_set_mask+0x2c>
     b4a:	2b02      	cmp	r3, #2
     b4c:	d00f      	beq.n	b6e <system_apb_clock_set_mask+0x3a>
     b4e:	2b00      	cmp	r3, #0
     b50:	d114      	bne.n	b7c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <system_apb_clock_set_mask+0x58>)
     b54:	4a0d      	ldr	r2, [pc, #52]	; (b8c <system_apb_clock_set_mask+0x58>)
     b56:	6991      	ldr	r1, [r2, #24]
     b58:	683a      	ldr	r2, [r7, #0]
     b5a:	430a      	orrs	r2, r1
     b5c:	619a      	str	r2, [r3, #24]
			break;
     b5e:	e00f      	b.n	b80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     b60:	4b0a      	ldr	r3, [pc, #40]	; (b8c <system_apb_clock_set_mask+0x58>)
     b62:	4a0a      	ldr	r2, [pc, #40]	; (b8c <system_apb_clock_set_mask+0x58>)
     b64:	69d1      	ldr	r1, [r2, #28]
     b66:	683a      	ldr	r2, [r7, #0]
     b68:	430a      	orrs	r2, r1
     b6a:	61da      	str	r2, [r3, #28]
			break;
     b6c:	e008      	b.n	b80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <system_apb_clock_set_mask+0x58>)
     b70:	4a06      	ldr	r2, [pc, #24]	; (b8c <system_apb_clock_set_mask+0x58>)
     b72:	6a11      	ldr	r1, [r2, #32]
     b74:	683a      	ldr	r2, [r7, #0]
     b76:	430a      	orrs	r2, r1
     b78:	621a      	str	r2, [r3, #32]
			break;
     b7a:	e001      	b.n	b80 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b7c:	2317      	movs	r3, #23
     b7e:	e000      	b.n	b82 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     b80:	2300      	movs	r3, #0
}
     b82:	1c18      	adds	r0, r3, #0
     b84:	46bd      	mov	sp, r7
     b86:	b002      	add	sp, #8
     b88:	bd80      	pop	{r7, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	40000400 	.word	0x40000400

00000b90 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     b90:	b580      	push	{r7, lr}
     b92:	b082      	sub	sp, #8
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b98:	687b      	ldr	r3, [r7, #4]
     b9a:	2280      	movs	r2, #128	; 0x80
     b9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	2200      	movs	r2, #0
     ba2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	2201      	movs	r2, #1
     ba8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	2200      	movs	r2, #0
     bae:	70da      	strb	r2, [r3, #3]
}
     bb0:	46bd      	mov	sp, r7
     bb2:	b002      	add	sp, #8
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)

00000bb8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b084      	sub	sp, #16
     bbc:	af00      	add	r7, sp, #0
     bbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	681b      	ldr	r3, [r3, #0]
     bc4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	7bdb      	ldrb	r3, [r3, #15]
     bca:	b2db      	uxtb	r3, r3
     bcc:	1c1a      	adds	r2, r3, #0
     bce:	2380      	movs	r3, #128	; 0x80
     bd0:	4013      	ands	r3, r2
     bd2:	1e5a      	subs	r2, r3, #1
     bd4:	4193      	sbcs	r3, r2
     bd6:	b2db      	uxtb	r3, r3
#endif
}
     bd8:	1c18      	adds	r0, r3, #0
     bda:	46bd      	mov	sp, r7
     bdc:	b004      	add	sp, #16
     bde:	bd80      	pop	{r7, pc}

00000be0 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
     be0:	b580      	push	{r7, lr}
     be2:	b084      	sub	sp, #16
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	681b      	ldr	r3, [r3, #0]
     bec:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	1c18      	adds	r0, r3, #0
     bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <tc_disable+0x34>)
     bf6:	4798      	blx	r3
     bf8:	1e03      	subs	r3, r0, #0
     bfa:	d1f9      	bne.n	bf0 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     bfc:	68fb      	ldr	r3, [r7, #12]
     bfe:	881b      	ldrh	r3, [r3, #0]
     c00:	b29b      	uxth	r3, r3
     c02:	2202      	movs	r2, #2
     c04:	4393      	bics	r3, r2
     c06:	b29a      	uxth	r2, r3
     c08:	68fb      	ldr	r3, [r7, #12]
     c0a:	801a      	strh	r2, [r3, #0]
}
     c0c:	46bd      	mov	sp, r7
     c0e:	b004      	add	sp, #16
     c10:	bd80      	pop	{r7, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00000bb9 	.word	0x00000bb9

00000c18 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     c18:	b590      	push	{r4, r7, lr}
     c1a:	b089      	sub	sp, #36	; 0x24
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c20:	2308      	movs	r3, #8
     c22:	18fb      	adds	r3, r7, r3
     c24:	4a0e      	ldr	r2, [pc, #56]	; (c60 <_tc_get_inst_index+0x48>)
     c26:	ca13      	ldmia	r2!, {r0, r1, r4}
     c28:	c313      	stmia	r3!, {r0, r1, r4}
     c2a:	ca03      	ldmia	r2!, {r0, r1}
     c2c:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c2e:	2300      	movs	r3, #0
     c30:	61fb      	str	r3, [r7, #28]
     c32:	e00d      	b.n	c50 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
     c34:	2308      	movs	r3, #8
     c36:	18fb      	adds	r3, r7, r3
     c38:	69fa      	ldr	r2, [r7, #28]
     c3a:	0092      	lsls	r2, r2, #2
     c3c:	58d2      	ldr	r2, [r2, r3]
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	429a      	cmp	r2, r3
     c42:	d102      	bne.n	c4a <_tc_get_inst_index+0x32>
			return i;
     c44:	69fb      	ldr	r3, [r7, #28]
     c46:	b2db      	uxtb	r3, r3
     c48:	e006      	b.n	c58 <_tc_get_inst_index+0x40>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c4a:	69fb      	ldr	r3, [r7, #28]
     c4c:	3301      	adds	r3, #1
     c4e:	61fb      	str	r3, [r7, #28]
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	2b04      	cmp	r3, #4
     c54:	d9ee      	bls.n	c34 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c56:	2300      	movs	r3, #0
}
     c58:	1c18      	adds	r0, r3, #0
     c5a:	46bd      	mov	sp, r7
     c5c:	b009      	add	sp, #36	; 0x24
     c5e:	bd90      	pop	{r4, r7, pc}
     c60:	00009f88 	.word	0x00009f88

00000c64 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     c64:	b590      	push	{r4, r7, lr}
     c66:	b08d      	sub	sp, #52	; 0x34
     c68:	af00      	add	r7, sp, #0
     c6a:	60f8      	str	r0, [r7, #12]
     c6c:	60b9      	str	r1, [r7, #8]
     c6e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     c70:	232e      	movs	r3, #46	; 0x2e
     c72:	18fb      	adds	r3, r7, r3
     c74:	2200      	movs	r2, #0
     c76:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     c78:	232d      	movs	r3, #45	; 0x2d
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	2200      	movs	r2, #0
     c7e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     c80:	232c      	movs	r3, #44	; 0x2c
     c82:	18fb      	adds	r3, r7, r3
     c84:	2200      	movs	r2, #0
     c86:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     c88:	2329      	movs	r3, #41	; 0x29
     c8a:	18fc      	adds	r4, r7, r3
     c8c:	68bb      	ldr	r3, [r7, #8]
     c8e:	1c18      	adds	r0, r3, #0
     c90:	4bc1      	ldr	r3, [pc, #772]	; (f98 <tc_init+0x334>)
     c92:	4798      	blx	r3
     c94:	1c03      	adds	r3, r0, #0
     c96:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     c98:	2324      	movs	r3, #36	; 0x24
     c9a:	18fa      	adds	r2, r7, r3
     c9c:	4bbf      	ldr	r3, [pc, #764]	; (f9c <tc_init+0x338>)
     c9e:	1c11      	adds	r1, r2, #0
     ca0:	1c1a      	adds	r2, r3, #0
     ca2:	2305      	movs	r3, #5
     ca4:	1c08      	adds	r0, r1, #0
     ca6:	1c11      	adds	r1, r2, #0
     ca8:	1c1a      	adds	r2, r3, #0
     caa:	4bbd      	ldr	r3, [pc, #756]	; (fa0 <tc_init+0x33c>)
     cac:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     cae:	2318      	movs	r3, #24
     cb0:	18fa      	adds	r2, r7, r3
     cb2:	4bbc      	ldr	r3, [pc, #752]	; (fa4 <tc_init+0x340>)
     cb4:	1c11      	adds	r1, r2, #0
     cb6:	1c1a      	adds	r2, r3, #0
     cb8:	230a      	movs	r3, #10
     cba:	1c08      	adds	r0, r1, #0
     cbc:	1c11      	adds	r1, r2, #0
     cbe:	1c1a      	adds	r2, r3, #0
     cc0:	4bb7      	ldr	r3, [pc, #732]	; (fa0 <tc_init+0x33c>)
     cc2:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     cc4:	232b      	movs	r3, #43	; 0x2b
     cc6:	18fb      	adds	r3, r7, r3
     cc8:	2200      	movs	r2, #0
     cca:	701a      	strb	r2, [r3, #0]
     ccc:	e00e      	b.n	cec <tc_init+0x88>
		module_inst->callback[i]        = NULL;
     cce:	232b      	movs	r3, #43	; 0x2b
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	781a      	ldrb	r2, [r3, #0]
     cd4:	68fb      	ldr	r3, [r7, #12]
     cd6:	3202      	adds	r2, #2
     cd8:	0092      	lsls	r2, r2, #2
     cda:	2100      	movs	r1, #0
     cdc:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     cde:	232b      	movs	r3, #43	; 0x2b
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	781a      	ldrb	r2, [r3, #0]
     ce4:	232b      	movs	r3, #43	; 0x2b
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	3201      	adds	r2, #1
     cea:	701a      	strb	r2, [r3, #0]
     cec:	232b      	movs	r3, #43	; 0x2b
     cee:	18fb      	adds	r3, r7, r3
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b03      	cmp	r3, #3
     cf4:	d9eb      	bls.n	cce <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	2200      	movs	r2, #0
     cfa:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     cfc:	68fb      	ldr	r3, [r7, #12]
     cfe:	2200      	movs	r2, #0
     d00:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     d02:	2329      	movs	r3, #41	; 0x29
     d04:	18fb      	adds	r3, r7, r3
     d06:	781a      	ldrb	r2, [r3, #0]
     d08:	4ba7      	ldr	r3, [pc, #668]	; (fa8 <tc_init+0x344>)
     d0a:	0092      	lsls	r2, r2, #2
     d0c:	68f9      	ldr	r1, [r7, #12]
     d0e:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     d10:	68fb      	ldr	r3, [r7, #12]
     d12:	68ba      	ldr	r2, [r7, #8]
     d14:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	789b      	ldrb	r3, [r3, #2]
     d1a:	2b08      	cmp	r3, #8
     d1c:	d108      	bne.n	d30 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     d1e:	2329      	movs	r3, #41	; 0x29
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	3303      	adds	r3, #3
     d26:	2201      	movs	r2, #1
     d28:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     d2a:	d001      	beq.n	d30 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d2c:	2317      	movs	r3, #23
     d2e:	e1c4      	b.n	10ba <tc_init+0x456>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	789a      	ldrb	r2, [r3, #2]
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     d38:	68bb      	ldr	r3, [r7, #8]
     d3a:	881b      	ldrh	r3, [r3, #0]
     d3c:	b29b      	uxth	r3, r3
     d3e:	1c1a      	adds	r2, r3, #0
     d40:	2301      	movs	r3, #1
     d42:	4013      	ands	r3, r2
     d44:	d001      	beq.n	d4a <tc_init+0xe6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     d46:	2305      	movs	r3, #5
     d48:	e1b7      	b.n	10ba <tc_init+0x456>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     d4a:	68bb      	ldr	r3, [r7, #8]
     d4c:	7bdb      	ldrb	r3, [r3, #15]
     d4e:	b2db      	uxtb	r3, r3
     d50:	1c1a      	adds	r2, r3, #0
     d52:	2310      	movs	r3, #16
     d54:	4013      	ands	r3, r2
     d56:	d001      	beq.n	d5c <tc_init+0xf8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     d58:	231c      	movs	r3, #28
     d5a:	e1ae      	b.n	10ba <tc_init+0x456>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     d5c:	68bb      	ldr	r3, [r7, #8]
     d5e:	881b      	ldrh	r3, [r3, #0]
     d60:	b29b      	uxth	r3, r3
     d62:	1c1a      	adds	r2, r3, #0
     d64:	2302      	movs	r3, #2
     d66:	4013      	ands	r3, r2
     d68:	d001      	beq.n	d6e <tc_init+0x10a>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     d6a:	231c      	movs	r3, #28
     d6c:	e1a5      	b.n	10ba <tc_init+0x456>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	7c1b      	ldrb	r3, [r3, #16]
     d72:	2b00      	cmp	r3, #0
     d74:	d017      	beq.n	da6 <tc_init+0x142>
		system_pinmux_get_config_defaults(&pin_config);
     d76:	2314      	movs	r3, #20
     d78:	18fb      	adds	r3, r7, r3
     d7a:	1c18      	adds	r0, r3, #0
     d7c:	4b8b      	ldr	r3, [pc, #556]	; (fac <tc_init+0x348>)
     d7e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	699b      	ldr	r3, [r3, #24]
     d84:	b2da      	uxtb	r2, r3
     d86:	2314      	movs	r3, #20
     d88:	18fb      	adds	r3, r7, r3
     d8a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d8c:	2314      	movs	r3, #20
     d8e:	18fb      	adds	r3, r7, r3
     d90:	2201      	movs	r2, #1
     d92:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     d98:	b2da      	uxtb	r2, r3
     d9a:	2314      	movs	r3, #20
     d9c:	18fb      	adds	r3, r7, r3
     d9e:	1c10      	adds	r0, r2, #0
     da0:	1c19      	adds	r1, r3, #0
     da2:	4b83      	ldr	r3, [pc, #524]	; (fb0 <tc_init+0x34c>)
     da4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	7f1b      	ldrb	r3, [r3, #28]
     daa:	2b00      	cmp	r3, #0
     dac:	d017      	beq.n	dde <tc_init+0x17a>
		system_pinmux_get_config_defaults(&pin_config);
     dae:	2314      	movs	r3, #20
     db0:	18fb      	adds	r3, r7, r3
     db2:	1c18      	adds	r0, r3, #0
     db4:	4b7d      	ldr	r3, [pc, #500]	; (fac <tc_init+0x348>)
     db6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     dbc:	b2da      	uxtb	r2, r3
     dbe:	2314      	movs	r3, #20
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dc4:	2314      	movs	r3, #20
     dc6:	18fb      	adds	r3, r7, r3
     dc8:	2201      	movs	r2, #1
     dca:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     dd0:	b2da      	uxtb	r2, r3
     dd2:	2314      	movs	r3, #20
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	1c10      	adds	r0, r2, #0
     dd8:	1c19      	adds	r1, r3, #0
     dda:	4b75      	ldr	r3, [pc, #468]	; (fb0 <tc_init+0x34c>)
     ddc:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     dde:	2329      	movs	r3, #41	; 0x29
     de0:	18fb      	adds	r3, r7, r3
     de2:	781a      	ldrb	r2, [r3, #0]
     de4:	2318      	movs	r3, #24
     de6:	18fb      	adds	r3, r7, r3
     de8:	0052      	lsls	r2, r2, #1
     dea:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     dec:	2002      	movs	r0, #2
     dee:	1c19      	adds	r1, r3, #0
     df0:	4b70      	ldr	r3, [pc, #448]	; (fb4 <tc_init+0x350>)
     df2:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	789b      	ldrb	r3, [r3, #2]
     df8:	2b08      	cmp	r3, #8
     dfa:	d10b      	bne.n	e14 <tc_init+0x1b0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     dfc:	2329      	movs	r3, #41	; 0x29
     dfe:	18fb      	adds	r3, r7, r3
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	1c5a      	adds	r2, r3, #1
     e04:	2318      	movs	r3, #24
     e06:	18fb      	adds	r3, r7, r3
     e08:	0052      	lsls	r2, r2, #1
     e0a:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     e0c:	2002      	movs	r0, #2
     e0e:	1c19      	adds	r1, r3, #0
     e10:	4b68      	ldr	r3, [pc, #416]	; (fb4 <tc_init+0x350>)
     e12:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     e14:	2310      	movs	r3, #16
     e16:	18fb      	adds	r3, r7, r3
     e18:	1c18      	adds	r0, r3, #0
     e1a:	4b67      	ldr	r3, [pc, #412]	; (fb8 <tc_init+0x354>)
     e1c:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	781a      	ldrb	r2, [r3, #0]
     e22:	2310      	movs	r3, #16
     e24:	18fb      	adds	r3, r7, r3
     e26:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     e28:	2329      	movs	r3, #41	; 0x29
     e2a:	18fb      	adds	r3, r7, r3
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	2224      	movs	r2, #36	; 0x24
     e30:	18ba      	adds	r2, r7, r2
     e32:	5cd2      	ldrb	r2, [r2, r3]
     e34:	2310      	movs	r3, #16
     e36:	18fb      	adds	r3, r7, r3
     e38:	1c10      	adds	r0, r2, #0
     e3a:	1c19      	adds	r1, r3, #0
     e3c:	4b5f      	ldr	r3, [pc, #380]	; (fbc <tc_init+0x358>)
     e3e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     e40:	2329      	movs	r3, #41	; 0x29
     e42:	18fb      	adds	r3, r7, r3
     e44:	781b      	ldrb	r3, [r3, #0]
     e46:	2224      	movs	r2, #36	; 0x24
     e48:	18ba      	adds	r2, r7, r2
     e4a:	5cd3      	ldrb	r3, [r2, r3]
     e4c:	1c18      	adds	r0, r3, #0
     e4e:	4b5c      	ldr	r3, [pc, #368]	; (fc0 <tc_init+0x35c>)
     e50:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     e5a:	4313      	orrs	r3, r2
     e5c:	b2db      	uxtb	r3, r3
     e5e:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     e64:	4313      	orrs	r3, r2
     e66:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     e6c:	232e      	movs	r3, #46	; 0x2e
     e6e:	18fb      	adds	r3, r7, r3
     e70:	430a      	orrs	r2, r1
     e72:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	785b      	ldrb	r3, [r3, #1]
     e78:	2b00      	cmp	r3, #0
     e7a:	d008      	beq.n	e8e <tc_init+0x22a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     e7c:	232e      	movs	r3, #46	; 0x2e
     e7e:	18fb      	adds	r3, r7, r3
     e80:	222e      	movs	r2, #46	; 0x2e
     e82:	18ba      	adds	r2, r7, r2
     e84:	8812      	ldrh	r2, [r2, #0]
     e86:	2180      	movs	r1, #128	; 0x80
     e88:	0109      	lsls	r1, r1, #4
     e8a:	430a      	orrs	r2, r1
     e8c:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	1c18      	adds	r0, r3, #0
     e94:	4b4b      	ldr	r3, [pc, #300]	; (fc4 <tc_init+0x360>)
     e96:	4798      	blx	r3
     e98:	1e03      	subs	r3, r0, #0
     e9a:	d1f9      	bne.n	e90 <tc_init+0x22c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	222e      	movs	r2, #46	; 0x2e
     ea0:	18ba      	adds	r2, r7, r2
     ea2:	8812      	ldrh	r2, [r2, #0]
     ea4:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	7b5b      	ldrb	r3, [r3, #13]
     eaa:	2b00      	cmp	r3, #0
     eac:	d003      	beq.n	eb6 <tc_init+0x252>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     eae:	232d      	movs	r3, #45	; 0x2d
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	2204      	movs	r2, #4
     eb4:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	7b9b      	ldrb	r3, [r3, #14]
     eba:	2b00      	cmp	r3, #0
     ebc:	d007      	beq.n	ece <tc_init+0x26a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     ebe:	232d      	movs	r3, #45	; 0x2d
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	222d      	movs	r2, #45	; 0x2d
     ec4:	18ba      	adds	r2, r7, r2
     ec6:	7812      	ldrb	r2, [r2, #0]
     ec8:	2101      	movs	r1, #1
     eca:	430a      	orrs	r2, r1
     ecc:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	68fb      	ldr	r3, [r7, #12]
     ed2:	1c18      	adds	r0, r3, #0
     ed4:	4b3b      	ldr	r3, [pc, #236]	; (fc4 <tc_init+0x360>)
     ed6:	4798      	blx	r3
     ed8:	1e03      	subs	r3, r0, #0
     eda:	d1f9      	bne.n	ed0 <tc_init+0x26c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	22ff      	movs	r2, #255	; 0xff
     ee0:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     ee2:	232d      	movs	r3, #45	; 0x2d
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d00b      	beq.n	f04 <tc_init+0x2a0>
		while (tc_is_syncing(module_inst)) {
     eec:	46c0      	nop			; (mov r8, r8)
     eee:	68fb      	ldr	r3, [r7, #12]
     ef0:	1c18      	adds	r0, r3, #0
     ef2:	4b34      	ldr	r3, [pc, #208]	; (fc4 <tc_init+0x360>)
     ef4:	4798      	blx	r3
     ef6:	1e03      	subs	r3, r0, #0
     ef8:	d1f9      	bne.n	eee <tc_init+0x28a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     efa:	68bb      	ldr	r3, [r7, #8]
     efc:	222d      	movs	r2, #45	; 0x2d
     efe:	18ba      	adds	r2, r7, r2
     f00:	7812      	ldrb	r2, [r2, #0]
     f02:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     f04:	232c      	movs	r3, #44	; 0x2c
     f06:	18fb      	adds	r3, r7, r3
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	7a92      	ldrb	r2, [r2, #10]
     f0c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     f0e:	232a      	movs	r3, #42	; 0x2a
     f10:	18fb      	adds	r3, r7, r3
     f12:	2200      	movs	r2, #0
     f14:	701a      	strb	r2, [r3, #0]
     f16:	e01c      	b.n	f52 <tc_init+0x2ee>
		if (config->enable_capture_on_channel[i] == true) {
     f18:	232a      	movs	r3, #42	; 0x2a
     f1a:	18fb      	adds	r3, r7, r3
     f1c:	781b      	ldrb	r3, [r3, #0]
     f1e:	687a      	ldr	r2, [r7, #4]
     f20:	18d3      	adds	r3, r2, r3
     f22:	7adb      	ldrb	r3, [r3, #11]
     f24:	2b00      	cmp	r3, #0
     f26:	d00d      	beq.n	f44 <tc_init+0x2e0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     f28:	232a      	movs	r3, #42	; 0x2a
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2210      	movs	r2, #16
     f30:	409a      	lsls	r2, r3
     f32:	1c13      	adds	r3, r2, #0
     f34:	b2d9      	uxtb	r1, r3
     f36:	232c      	movs	r3, #44	; 0x2c
     f38:	18fb      	adds	r3, r7, r3
     f3a:	222c      	movs	r2, #44	; 0x2c
     f3c:	18ba      	adds	r2, r7, r2
     f3e:	7812      	ldrb	r2, [r2, #0]
     f40:	430a      	orrs	r2, r1
     f42:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     f44:	232a      	movs	r3, #42	; 0x2a
     f46:	18fb      	adds	r3, r7, r3
     f48:	781a      	ldrb	r2, [r3, #0]
     f4a:	232a      	movs	r3, #42	; 0x2a
     f4c:	18fb      	adds	r3, r7, r3
     f4e:	3201      	adds	r2, #1
     f50:	701a      	strb	r2, [r3, #0]
     f52:	232a      	movs	r3, #42	; 0x2a
     f54:	18fb      	adds	r3, r7, r3
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	2b01      	cmp	r3, #1
     f5a:	d9dd      	bls.n	f18 <tc_init+0x2b4>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     f5c:	46c0      	nop			; (mov r8, r8)
     f5e:	68fb      	ldr	r3, [r7, #12]
     f60:	1c18      	adds	r0, r3, #0
     f62:	4b18      	ldr	r3, [pc, #96]	; (fc4 <tc_init+0x360>)
     f64:	4798      	blx	r3
     f66:	1e03      	subs	r3, r0, #0
     f68:	d1f9      	bne.n	f5e <tc_init+0x2fa>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     f6a:	68bb      	ldr	r3, [r7, #8]
     f6c:	222c      	movs	r2, #44	; 0x2c
     f6e:	18ba      	adds	r2, r7, r2
     f70:	7812      	ldrb	r2, [r2, #0]
     f72:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     f74:	46c0      	nop			; (mov r8, r8)
     f76:	68fb      	ldr	r3, [r7, #12]
     f78:	1c18      	adds	r0, r3, #0
     f7a:	4b12      	ldr	r3, [pc, #72]	; (fc4 <tc_init+0x360>)
     f7c:	4798      	blx	r3
     f7e:	1e03      	subs	r3, r0, #0
     f80:	d1f9      	bne.n	f76 <tc_init+0x312>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     f82:	68fb      	ldr	r3, [r7, #12]
     f84:	791b      	ldrb	r3, [r3, #4]
     f86:	2b04      	cmp	r3, #4
     f88:	d01e      	beq.n	fc8 <tc_init+0x364>
     f8a:	2b08      	cmp	r3, #8
     f8c:	d100      	bne.n	f90 <tc_init+0x32c>
     f8e:	e070      	b.n	1072 <tc_init+0x40e>
     f90:	2b00      	cmp	r3, #0
     f92:	d04b      	beq.n	102c <tc_init+0x3c8>
     f94:	e090      	b.n	10b8 <tc_init+0x454>
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000c19 	.word	0x00000c19
     f9c:	00009f9c 	.word	0x00009f9c
     fa0:	00009e41 	.word	0x00009e41
     fa4:	00009fa4 	.word	0x00009fa4
     fa8:	20000170 	.word	0x20000170
     fac:	00000b91 	.word	0x00000b91
     fb0:	00007189 	.word	0x00007189
     fb4:	00000b35 	.word	0x00000b35
     fb8:	00000b21 	.word	0x00000b21
     fbc:	00006e9d 	.word	0x00006e9d
     fc0:	00006ee1 	.word	0x00006ee1
     fc4:	00000bb9 	.word	0x00000bb9
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     fc8:	46c0      	nop			; (mov r8, r8)
     fca:	68fb      	ldr	r3, [r7, #12]
     fcc:	1c18      	adds	r0, r3, #0
     fce:	4b3d      	ldr	r3, [pc, #244]	; (10c4 <tc_init+0x460>)
     fd0:	4798      	blx	r3
     fd2:	1e03      	subs	r3, r0, #0
     fd4:	d1f9      	bne.n	fca <tc_init+0x366>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	2228      	movs	r2, #40	; 0x28
     fda:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     fdc:	68bb      	ldr	r3, [r7, #8]
     fde:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     fe0:	46c0      	nop			; (mov r8, r8)
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	1c18      	adds	r0, r3, #0
     fe6:	4b37      	ldr	r3, [pc, #220]	; (10c4 <tc_init+0x460>)
     fe8:	4798      	blx	r3
     fea:	1e03      	subs	r3, r0, #0
     fec:	d1f9      	bne.n	fe2 <tc_init+0x37e>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	2229      	movs	r2, #41	; 0x29
     ff2:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     ff4:	68bb      	ldr	r3, [r7, #8]
     ff6:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     ff8:	46c0      	nop			; (mov r8, r8)
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	1c18      	adds	r0, r3, #0
     ffe:	4b31      	ldr	r3, [pc, #196]	; (10c4 <tc_init+0x460>)
    1000:	4798      	blx	r3
    1002:	1e03      	subs	r3, r0, #0
    1004:	d1f9      	bne.n	ffa <tc_init+0x396>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	222a      	movs	r2, #42	; 0x2a
    100a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    100c:	68bb      	ldr	r3, [r7, #8]
    100e:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1010:	46c0      	nop			; (mov r8, r8)
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	1c18      	adds	r0, r3, #0
    1016:	4b2b      	ldr	r3, [pc, #172]	; (10c4 <tc_init+0x460>)
    1018:	4798      	blx	r3
    101a:	1e03      	subs	r3, r0, #0
    101c:	d1f9      	bne.n	1012 <tc_init+0x3ae>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	222b      	movs	r2, #43	; 0x2b
    1022:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1024:	68bb      	ldr	r3, [r7, #8]
    1026:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1028:	2300      	movs	r3, #0
    102a:	e046      	b.n	10ba <tc_init+0x456>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    102c:	46c0      	nop			; (mov r8, r8)
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	1c18      	adds	r0, r3, #0
    1032:	4b24      	ldr	r3, [pc, #144]	; (10c4 <tc_init+0x460>)
    1034:	4798      	blx	r3
    1036:	1e03      	subs	r3, r0, #0
    1038:	d1f9      	bne.n	102e <tc_init+0x3ca>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    103e:	68bb      	ldr	r3, [r7, #8]
    1040:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	1c18      	adds	r0, r3, #0
    1048:	4b1e      	ldr	r3, [pc, #120]	; (10c4 <tc_init+0x460>)
    104a:	4798      	blx	r3
    104c:	1e03      	subs	r3, r0, #0
    104e:	d1f9      	bne.n	1044 <tc_init+0x3e0>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1054:	68bb      	ldr	r3, [r7, #8]
    1056:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1058:	46c0      	nop			; (mov r8, r8)
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	1c18      	adds	r0, r3, #0
    105e:	4b19      	ldr	r3, [pc, #100]	; (10c4 <tc_init+0x460>)
    1060:	4798      	blx	r3
    1062:	1e03      	subs	r3, r0, #0
    1064:	d1f9      	bne.n	105a <tc_init+0x3f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    106a:	68bb      	ldr	r3, [r7, #8]
    106c:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    106e:	2300      	movs	r3, #0
    1070:	e023      	b.n	10ba <tc_init+0x456>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	68fb      	ldr	r3, [r7, #12]
    1076:	1c18      	adds	r0, r3, #0
    1078:	4b12      	ldr	r3, [pc, #72]	; (10c4 <tc_init+0x460>)
    107a:	4798      	blx	r3
    107c:	1e03      	subs	r3, r0, #0
    107e:	d1f9      	bne.n	1074 <tc_init+0x410>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1084:	68bb      	ldr	r3, [r7, #8]
    1086:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1088:	46c0      	nop			; (mov r8, r8)
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	1c18      	adds	r0, r3, #0
    108e:	4b0d      	ldr	r3, [pc, #52]	; (10c4 <tc_init+0x460>)
    1090:	4798      	blx	r3
    1092:	1e03      	subs	r3, r0, #0
    1094:	d1f9      	bne.n	108a <tc_init+0x426>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    109a:	68bb      	ldr	r3, [r7, #8]
    109c:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	1c18      	adds	r0, r3, #0
    10a4:	4b07      	ldr	r3, [pc, #28]	; (10c4 <tc_init+0x460>)
    10a6:	4798      	blx	r3
    10a8:	1e03      	subs	r3, r0, #0
    10aa:	d1f9      	bne.n	10a0 <tc_init+0x43c>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    10ac:	687b      	ldr	r3, [r7, #4]
    10ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    10b0:	68bb      	ldr	r3, [r7, #8]
    10b2:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    10b4:	2300      	movs	r3, #0
    10b6:	e000      	b.n	10ba <tc_init+0x456>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    10b8:	2317      	movs	r3, #23
}
    10ba:	1c18      	adds	r0, r3, #0
    10bc:	46bd      	mov	sp, r7
    10be:	b00d      	add	sp, #52	; 0x34
    10c0:	bd90      	pop	{r4, r7, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00000bb9 	.word	0x00000bb9

000010c8 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b084      	sub	sp, #16
    10cc:	af00      	add	r7, sp, #0
    10ce:	6078      	str	r0, [r7, #4]
    10d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    10d8:	46c0      	nop			; (mov r8, r8)
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	1c18      	adds	r0, r3, #0
    10de:	4b11      	ldr	r3, [pc, #68]	; (1124 <tc_set_count_value+0x5c>)
    10e0:	4798      	blx	r3
    10e2:	1e03      	subs	r3, r0, #0
    10e4:	d1f9      	bne.n	10da <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	791b      	ldrb	r3, [r3, #4]
    10ea:	2b04      	cmp	r3, #4
    10ec:	d004      	beq.n	10f8 <tc_set_count_value+0x30>
    10ee:	2b08      	cmp	r3, #8
    10f0:	d00e      	beq.n	1110 <tc_set_count_value+0x48>
    10f2:	2b00      	cmp	r3, #0
    10f4:	d006      	beq.n	1104 <tc_set_count_value+0x3c>
    10f6:	e010      	b.n	111a <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    10f8:	683b      	ldr	r3, [r7, #0]
    10fa:	b2da      	uxtb	r2, r3
    10fc:	68fb      	ldr	r3, [r7, #12]
    10fe:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
    1100:	2300      	movs	r3, #0
    1102:	e00b      	b.n	111c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1104:	683b      	ldr	r3, [r7, #0]
    1106:	b29a      	uxth	r2, r3
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
    110c:	2300      	movs	r3, #0
    110e:	e005      	b.n	111c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	683a      	ldr	r2, [r7, #0]
    1114:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
    1116:	2300      	movs	r3, #0
    1118:	e000      	b.n	111c <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
    111a:	2317      	movs	r3, #23
	}
}
    111c:	1c18      	adds	r0, r3, #0
    111e:	46bd      	mov	sp, r7
    1120:	b004      	add	sp, #16
    1122:	bd80      	pop	{r7, pc}
    1124:	00000bb9 	.word	0x00000bb9

00001128 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    1128:	b580      	push	{r7, lr}
    112a:	b084      	sub	sp, #16
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1130:	687b      	ldr	r3, [r7, #4]
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	1c18      	adds	r0, r3, #0
    113c:	4b0e      	ldr	r3, [pc, #56]	; (1178 <tc_get_count_value+0x50>)
    113e:	4798      	blx	r3
    1140:	1e03      	subs	r3, r0, #0
    1142:	d1f9      	bne.n	1138 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	791b      	ldrb	r3, [r3, #4]
    1148:	2b04      	cmp	r3, #4
    114a:	d004      	beq.n	1156 <tc_get_count_value+0x2e>
    114c:	2b08      	cmp	r3, #8
    114e:	d00a      	beq.n	1166 <tc_get_count_value+0x3e>
    1150:	2b00      	cmp	r3, #0
    1152:	d004      	beq.n	115e <tc_get_count_value+0x36>
    1154:	e00a      	b.n	116c <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	7c1b      	ldrb	r3, [r3, #16]
    115a:	b2db      	uxtb	r3, r3
    115c:	e007      	b.n	116e <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	8a1b      	ldrh	r3, [r3, #16]
    1162:	b29b      	uxth	r3, r3
    1164:	e003      	b.n	116e <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	691b      	ldr	r3, [r3, #16]
    116a:	e000      	b.n	116e <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    116c:	2300      	movs	r3, #0
}
    116e:	1c18      	adds	r0, r3, #0
    1170:	46bd      	mov	sp, r7
    1172:	b004      	add	sp, #16
    1174:	bd80      	pop	{r7, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00000bb9 	.word	0x00000bb9

0000117c <tc_reset>:
 *                                     the function. Only use reset on master
 *                                     TC
 */
enum status_code tc_reset(
		const struct tc_module *const module_inst)
{
    117c:	b580      	push	{r7, lr}
    117e:	b084      	sub	sp, #16
    1180:	af00      	add	r7, sp, #0
    1182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	60fb      	str	r3, [r7, #12]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    118a:	68fb      	ldr	r3, [r7, #12]
    118c:	7bdb      	ldrb	r3, [r3, #15]
    118e:	b2db      	uxtb	r3, r3
    1190:	1c1a      	adds	r2, r3, #0
    1192:	2310      	movs	r3, #16
    1194:	4013      	ands	r3, r2
    1196:	d001      	beq.n	119c <tc_reset+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1198:	2315      	movs	r3, #21
    119a:	e01a      	b.n	11d2 <tc_reset+0x56>
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    119c:	68fb      	ldr	r3, [r7, #12]
    119e:	881b      	ldrh	r3, [r3, #0]
    11a0:	b29b      	uxth	r3, r3
    11a2:	1c1a      	adds	r2, r3, #0
    11a4:	2302      	movs	r3, #2
    11a6:	4013      	ands	r3, r2
    11a8:	d00a      	beq.n	11c0 <tc_reset+0x44>
		tc_disable(module_inst);
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	1c18      	adds	r0, r3, #0
    11ae:	4b0b      	ldr	r3, [pc, #44]	; (11dc <tc_reset+0x60>)
    11b0:	4798      	blx	r3
		while (tc_is_syncing(module_inst)) {
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	1c18      	adds	r0, r3, #0
    11b8:	4b09      	ldr	r3, [pc, #36]	; (11e0 <tc_reset+0x64>)
    11ba:	4798      	blx	r3
    11bc:	1e03      	subs	r3, r0, #0
    11be:	d1f9      	bne.n	11b4 <tc_reset+0x38>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    11c0:	68fb      	ldr	r3, [r7, #12]
    11c2:	881b      	ldrh	r3, [r3, #0]
    11c4:	b29b      	uxth	r3, r3
    11c6:	2201      	movs	r2, #1
    11c8:	4313      	orrs	r3, r2
    11ca:	b29a      	uxth	r2, r3
    11cc:	68fb      	ldr	r3, [r7, #12]
    11ce:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    11d0:	2300      	movs	r3, #0
}
    11d2:	1c18      	adds	r0, r3, #0
    11d4:	46bd      	mov	sp, r7
    11d6:	b004      	add	sp, #16
    11d8:	bd80      	pop	{r7, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000be1 	.word	0x00000be1
    11e0:	00000bb9 	.word	0x00000bb9

000011e4 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    11e4:	b580      	push	{r7, lr}
    11e6:	af00      	add	r7, sp, #0
    11e8:	2000      	movs	r0, #0
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <TC3_Handler+0x10>)
    11ec:	4798      	blx	r3
    11ee:	46bd      	mov	sp, r7
    11f0:	bd80      	pop	{r7, pc}
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	00001249 	.word	0x00001249

000011f8 <TC4_Handler>:
    11f8:	b580      	push	{r7, lr}
    11fa:	af00      	add	r7, sp, #0
    11fc:	2001      	movs	r0, #1
    11fe:	4b02      	ldr	r3, [pc, #8]	; (1208 <TC4_Handler+0x10>)
    1200:	4798      	blx	r3
    1202:	46bd      	mov	sp, r7
    1204:	bd80      	pop	{r7, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	00001249 	.word	0x00001249

0000120c <TC5_Handler>:
    120c:	b580      	push	{r7, lr}
    120e:	af00      	add	r7, sp, #0
    1210:	2002      	movs	r0, #2
    1212:	4b02      	ldr	r3, [pc, #8]	; (121c <TC5_Handler+0x10>)
    1214:	4798      	blx	r3
    1216:	46bd      	mov	sp, r7
    1218:	bd80      	pop	{r7, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	00001249 	.word	0x00001249

00001220 <TC6_Handler>:
    1220:	b580      	push	{r7, lr}
    1222:	af00      	add	r7, sp, #0
    1224:	2003      	movs	r0, #3
    1226:	4b02      	ldr	r3, [pc, #8]	; (1230 <TC6_Handler+0x10>)
    1228:	4798      	blx	r3
    122a:	46bd      	mov	sp, r7
    122c:	bd80      	pop	{r7, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	00001249 	.word	0x00001249

00001234 <TC7_Handler>:
    1234:	b580      	push	{r7, lr}
    1236:	af00      	add	r7, sp, #0
    1238:	2004      	movs	r0, #4
    123a:	4b02      	ldr	r3, [pc, #8]	; (1244 <TC7_Handler+0x10>)
    123c:	4798      	blx	r3
    123e:	46bd      	mov	sp, r7
    1240:	bd80      	pop	{r7, pc}
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	00001249 	.word	0x00001249

00001248 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1248:	b580      	push	{r7, lr}
    124a:	b084      	sub	sp, #16
    124c:	af00      	add	r7, sp, #0
    124e:	1c02      	adds	r2, r0, #0
    1250:	1dfb      	adds	r3, r7, #7
    1252:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1254:	1dfb      	adds	r3, r7, #7
    1256:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1258:	4b28      	ldr	r3, [pc, #160]	; (12fc <_tc_interrupt_handler+0xb4>)
    125a:	0092      	lsls	r2, r2, #2
    125c:	58d3      	ldr	r3, [r2, r3]
    125e:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	7b9b      	ldrb	r3, [r3, #14]
    1266:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    1268:	68fa      	ldr	r2, [r7, #12]
    126a:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    126c:	4013      	ands	r3, r2
    126e:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1274:	230b      	movs	r3, #11
    1276:	18fb      	adds	r3, r7, r3
    1278:	400a      	ands	r2, r1
    127a:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    127c:	230b      	movs	r3, #11
    127e:	18fb      	adds	r3, r7, r3
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	2201      	movs	r2, #1
    1284:	4013      	ands	r3, r2
    1286:	d008      	beq.n	129a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	689b      	ldr	r3, [r3, #8]
    128c:	68fa      	ldr	r2, [r7, #12]
    128e:	1c10      	adds	r0, r2, #0
    1290:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	2201      	movs	r2, #1
    1298:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    129a:	230b      	movs	r3, #11
    129c:	18fb      	adds	r3, r7, r3
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	2202      	movs	r2, #2
    12a2:	4013      	ands	r3, r2
    12a4:	d008      	beq.n	12b8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	68db      	ldr	r3, [r3, #12]
    12aa:	68fa      	ldr	r2, [r7, #12]
    12ac:	1c10      	adds	r0, r2, #0
    12ae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	2202      	movs	r2, #2
    12b6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    12b8:	230b      	movs	r3, #11
    12ba:	18fb      	adds	r3, r7, r3
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	2210      	movs	r2, #16
    12c0:	4013      	ands	r3, r2
    12c2:	d008      	beq.n	12d6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	691b      	ldr	r3, [r3, #16]
    12c8:	68fa      	ldr	r2, [r7, #12]
    12ca:	1c10      	adds	r0, r2, #0
    12cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    12ce:	68fb      	ldr	r3, [r7, #12]
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	2210      	movs	r2, #16
    12d4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    12d6:	230b      	movs	r3, #11
    12d8:	18fb      	adds	r3, r7, r3
    12da:	781b      	ldrb	r3, [r3, #0]
    12dc:	2220      	movs	r2, #32
    12de:	4013      	ands	r3, r2
    12e0:	d008      	beq.n	12f4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	695b      	ldr	r3, [r3, #20]
    12e6:	68fa      	ldr	r2, [r7, #12]
    12e8:	1c10      	adds	r0, r2, #0
    12ea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	2220      	movs	r2, #32
    12f2:	739a      	strb	r2, [r3, #14]
	}
}
    12f4:	46bd      	mov	sp, r7
    12f6:	b004      	add	sp, #16
    12f8:	bd80      	pop	{r7, pc}
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	20000170 	.word	0x20000170

00001300 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1300:	b580      	push	{r7, lr}
    1302:	b082      	sub	sp, #8
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	2200      	movs	r2, #0
    130c:	701a      	strb	r2, [r3, #0]
}
    130e:	46bd      	mov	sp, r7
    1310:	b002      	add	sp, #8
    1312:	bd80      	pop	{r7, pc}

00001314 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1314:	b580      	push	{r7, lr}
    1316:	b082      	sub	sp, #8
    1318:	af00      	add	r7, sp, #0
    131a:	1c02      	adds	r2, r0, #0
    131c:	6039      	str	r1, [r7, #0]
    131e:	1dfb      	adds	r3, r7, #7
    1320:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1322:	1dfb      	adds	r3, r7, #7
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	2b01      	cmp	r3, #1
    1328:	d00a      	beq.n	1340 <system_apb_clock_set_mask+0x2c>
    132a:	2b02      	cmp	r3, #2
    132c:	d00f      	beq.n	134e <system_apb_clock_set_mask+0x3a>
    132e:	2b00      	cmp	r3, #0
    1330:	d114      	bne.n	135c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1332:	4b0e      	ldr	r3, [pc, #56]	; (136c <system_apb_clock_set_mask+0x58>)
    1334:	4a0d      	ldr	r2, [pc, #52]	; (136c <system_apb_clock_set_mask+0x58>)
    1336:	6991      	ldr	r1, [r2, #24]
    1338:	683a      	ldr	r2, [r7, #0]
    133a:	430a      	orrs	r2, r1
    133c:	619a      	str	r2, [r3, #24]
			break;
    133e:	e00f      	b.n	1360 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1340:	4b0a      	ldr	r3, [pc, #40]	; (136c <system_apb_clock_set_mask+0x58>)
    1342:	4a0a      	ldr	r2, [pc, #40]	; (136c <system_apb_clock_set_mask+0x58>)
    1344:	69d1      	ldr	r1, [r2, #28]
    1346:	683a      	ldr	r2, [r7, #0]
    1348:	430a      	orrs	r2, r1
    134a:	61da      	str	r2, [r3, #28]
			break;
    134c:	e008      	b.n	1360 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    134e:	4b07      	ldr	r3, [pc, #28]	; (136c <system_apb_clock_set_mask+0x58>)
    1350:	4a06      	ldr	r2, [pc, #24]	; (136c <system_apb_clock_set_mask+0x58>)
    1352:	6a11      	ldr	r1, [r2, #32]
    1354:	683a      	ldr	r2, [r7, #0]
    1356:	430a      	orrs	r2, r1
    1358:	621a      	str	r2, [r3, #32]
			break;
    135a:	e001      	b.n	1360 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    135c:	2317      	movs	r3, #23
    135e:	e000      	b.n	1362 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1360:	2300      	movs	r3, #0
}
    1362:	1c18      	adds	r0, r3, #0
    1364:	46bd      	mov	sp, r7
    1366:	b002      	add	sp, #8
    1368:	bd80      	pop	{r7, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	40000400 	.word	0x40000400

00001370 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1370:	b580      	push	{r7, lr}
    1372:	b082      	sub	sp, #8
    1374:	af00      	add	r7, sp, #0
    1376:	1c02      	adds	r2, r0, #0
    1378:	1dfb      	adds	r3, r7, #7
    137a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    137c:	4b06      	ldr	r3, [pc, #24]	; (1398 <system_interrupt_enable+0x28>)
    137e:	1dfa      	adds	r2, r7, #7
    1380:	7812      	ldrb	r2, [r2, #0]
    1382:	1c11      	adds	r1, r2, #0
    1384:	221f      	movs	r2, #31
    1386:	400a      	ands	r2, r1
    1388:	2101      	movs	r1, #1
    138a:	4091      	lsls	r1, r2
    138c:	1c0a      	adds	r2, r1, #0
    138e:	601a      	str	r2, [r3, #0]
}
    1390:	46bd      	mov	sp, r7
    1392:	b002      	add	sp, #8
    1394:	bd80      	pop	{r7, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	e000e100 	.word	0xe000e100

0000139c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    13a2:	4b10      	ldr	r3, [pc, #64]	; (13e4 <extint_is_syncing+0x48>)
    13a4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    13a6:	2300      	movs	r3, #0
    13a8:	607b      	str	r3, [r7, #4]
    13aa:	e012      	b.n	13d2 <extint_is_syncing+0x36>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	009b      	lsls	r3, r3, #2
    13b0:	2208      	movs	r2, #8
    13b2:	4694      	mov	ip, r2
    13b4:	44bc      	add	ip, r7
    13b6:	4463      	add	r3, ip
    13b8:	3b08      	subs	r3, #8
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	785b      	ldrb	r3, [r3, #1]
    13be:	b2db      	uxtb	r3, r3
    13c0:	b2db      	uxtb	r3, r3
    13c2:	b25b      	sxtb	r3, r3
    13c4:	2b00      	cmp	r3, #0
    13c6:	da01      	bge.n	13cc <extint_is_syncing+0x30>
			return true;
    13c8:	2301      	movs	r3, #1
    13ca:	e006      	b.n	13da <extint_is_syncing+0x3e>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	3301      	adds	r3, #1
    13d0:	607b      	str	r3, [r7, #4]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d0e9      	beq.n	13ac <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    13d8:	2300      	movs	r3, #0
}
    13da:	1c18      	adds	r0, r3, #0
    13dc:	46bd      	mov	sp, r7
    13de:	b002      	add	sp, #8
    13e0:	bd80      	pop	{r7, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	40001800 	.word	0x40001800

000013e8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	b084      	sub	sp, #16
    13ec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    13ee:	4b2c      	ldr	r3, [pc, #176]	; (14a0 <_system_extint_init+0xb8>)
    13f0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    13f2:	2000      	movs	r0, #0
    13f4:	2140      	movs	r1, #64	; 0x40
    13f6:	4b2b      	ldr	r3, [pc, #172]	; (14a4 <_system_extint_init+0xbc>)
    13f8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    13fa:	1c3b      	adds	r3, r7, #0
    13fc:	1c18      	adds	r0, r3, #0
    13fe:	4b2a      	ldr	r3, [pc, #168]	; (14a8 <_system_extint_init+0xc0>)
    1400:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    1402:	1c3b      	adds	r3, r7, #0
    1404:	2200      	movs	r2, #0
    1406:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1408:	1c3b      	adds	r3, r7, #0
    140a:	2005      	movs	r0, #5
    140c:	1c19      	adds	r1, r3, #0
    140e:	4b27      	ldr	r3, [pc, #156]	; (14ac <_system_extint_init+0xc4>)
    1410:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    1412:	2005      	movs	r0, #5
    1414:	4b26      	ldr	r3, [pc, #152]	; (14b0 <_system_extint_init+0xc8>)
    1416:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1418:	2300      	movs	r3, #0
    141a:	60fb      	str	r3, [r7, #12]
    141c:	e018      	b.n	1450 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	009b      	lsls	r3, r3, #2
    1422:	2210      	movs	r2, #16
    1424:	4694      	mov	ip, r2
    1426:	44bc      	add	ip, r7
    1428:	4463      	add	r3, ip
    142a:	3b0c      	subs	r3, #12
    142c:	681a      	ldr	r2, [r3, #0]
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	009b      	lsls	r3, r3, #2
    1432:	2110      	movs	r1, #16
    1434:	468c      	mov	ip, r1
    1436:	44bc      	add	ip, r7
    1438:	4463      	add	r3, ip
    143a:	3b0c      	subs	r3, #12
    143c:	681b      	ldr	r3, [r3, #0]
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	b2db      	uxtb	r3, r3
    1442:	2101      	movs	r1, #1
    1444:	430b      	orrs	r3, r1
    1446:	b2db      	uxtb	r3, r3
    1448:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    144a:	68fb      	ldr	r3, [r7, #12]
    144c:	3301      	adds	r3, #1
    144e:	60fb      	str	r3, [r7, #12]
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	2b00      	cmp	r3, #0
    1454:	d0e3      	beq.n	141e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	4b16      	ldr	r3, [pc, #88]	; (14b4 <_system_extint_init+0xcc>)
    145a:	4798      	blx	r3
    145c:	1e03      	subs	r3, r0, #0
    145e:	d1fb      	bne.n	1458 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1460:	230b      	movs	r3, #11
    1462:	18fb      	adds	r3, r7, r3
    1464:	2200      	movs	r2, #0
    1466:	701a      	strb	r2, [r3, #0]
    1468:	e00d      	b.n	1486 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    146a:	230b      	movs	r3, #11
    146c:	18fb      	adds	r3, r7, r3
    146e:	781a      	ldrb	r2, [r3, #0]
    1470:	4b11      	ldr	r3, [pc, #68]	; (14b8 <_system_extint_init+0xd0>)
    1472:	0092      	lsls	r2, r2, #2
    1474:	2100      	movs	r1, #0
    1476:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1478:	230b      	movs	r3, #11
    147a:	18fb      	adds	r3, r7, r3
    147c:	781a      	ldrb	r2, [r3, #0]
    147e:	230b      	movs	r3, #11
    1480:	18fb      	adds	r3, r7, r3
    1482:	3201      	adds	r2, #1
    1484:	701a      	strb	r2, [r3, #0]
    1486:	230b      	movs	r3, #11
    1488:	18fb      	adds	r3, r7, r3
    148a:	781b      	ldrb	r3, [r3, #0]
    148c:	2b0f      	cmp	r3, #15
    148e:	d9ec      	bls.n	146a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    1490:	2004      	movs	r0, #4
    1492:	4b0a      	ldr	r3, [pc, #40]	; (14bc <_system_extint_init+0xd4>)
    1494:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1496:	4b0a      	ldr	r3, [pc, #40]	; (14c0 <_system_extint_init+0xd8>)
    1498:	4798      	blx	r3
}
    149a:	46bd      	mov	sp, r7
    149c:	b004      	add	sp, #16
    149e:	bd80      	pop	{r7, pc}
    14a0:	40001800 	.word	0x40001800
    14a4:	00001315 	.word	0x00001315
    14a8:	00001301 	.word	0x00001301
    14ac:	00006e9d 	.word	0x00006e9d
    14b0:	00006ee1 	.word	0x00006ee1
    14b4:	0000139d 	.word	0x0000139d
    14b8:	20000184 	.word	0x20000184
    14bc:	00001371 	.word	0x00001371
    14c0:	000014c5 	.word	0x000014c5

000014c4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    14ca:	4b14      	ldr	r3, [pc, #80]	; (151c <_extint_enable+0x58>)
    14cc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    14ce:	2300      	movs	r3, #0
    14d0:	607b      	str	r3, [r7, #4]
    14d2:	e018      	b.n	1506 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	009b      	lsls	r3, r3, #2
    14d8:	2208      	movs	r2, #8
    14da:	4694      	mov	ip, r2
    14dc:	44bc      	add	ip, r7
    14de:	4463      	add	r3, ip
    14e0:	3b08      	subs	r3, #8
    14e2:	681a      	ldr	r2, [r3, #0]
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	009b      	lsls	r3, r3, #2
    14e8:	2108      	movs	r1, #8
    14ea:	468c      	mov	ip, r1
    14ec:	44bc      	add	ip, r7
    14ee:	4463      	add	r3, ip
    14f0:	3b08      	subs	r3, #8
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2102      	movs	r1, #2
    14fa:	430b      	orrs	r3, r1
    14fc:	b2db      	uxtb	r3, r3
    14fe:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	3301      	adds	r3, #1
    1504:	607b      	str	r3, [r7, #4]
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	2b00      	cmp	r3, #0
    150a:	d0e3      	beq.n	14d4 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    150c:	46c0      	nop			; (mov r8, r8)
    150e:	4b04      	ldr	r3, [pc, #16]	; (1520 <_extint_enable+0x5c>)
    1510:	4798      	blx	r3
    1512:	1e03      	subs	r3, r0, #0
    1514:	d1fb      	bne.n	150e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1516:	46bd      	mov	sp, r7
    1518:	b002      	add	sp, #8
    151a:	bd80      	pop	{r7, pc}
    151c:	40001800 	.word	0x40001800
    1520:	0000139d 	.word	0x0000139d

00001524 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1524:	b580      	push	{r7, lr}
    1526:	b086      	sub	sp, #24
    1528:	af00      	add	r7, sp, #0
    152a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    152c:	4b27      	ldr	r3, [pc, #156]	; (15cc <_rtc_interrupt_handler+0xa8>)
    152e:	687a      	ldr	r2, [r7, #4]
    1530:	0092      	lsls	r2, r2, #2
    1532:	58d3      	ldr	r3, [r2, r3]
    1534:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    1536:	697b      	ldr	r3, [r7, #20]
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    153c:	230e      	movs	r3, #14
    153e:	18fb      	adds	r3, r7, r3
    1540:	697a      	ldr	r2, [r7, #20]
    1542:	8a52      	ldrh	r2, [r2, #18]
    1544:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1546:	697b      	ldr	r3, [r7, #20]
    1548:	8a1b      	ldrh	r3, [r3, #16]
    154a:	b29a      	uxth	r2, r3
    154c:	230e      	movs	r3, #14
    154e:	18fb      	adds	r3, r7, r3
    1550:	210e      	movs	r1, #14
    1552:	1879      	adds	r1, r7, r1
    1554:	8809      	ldrh	r1, [r1, #0]
    1556:	400a      	ands	r2, r1
    1558:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    155a:	693b      	ldr	r3, [r7, #16]
    155c:	7a1b      	ldrb	r3, [r3, #8]
    155e:	b2da      	uxtb	r2, r3
    1560:	230c      	movs	r3, #12
    1562:	18fb      	adds	r3, r7, r3
    1564:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1566:	693b      	ldr	r3, [r7, #16]
    1568:	79db      	ldrb	r3, [r3, #7]
    156a:	b2db      	uxtb	r3, r3
    156c:	b29a      	uxth	r2, r3
    156e:	230c      	movs	r3, #12
    1570:	18fb      	adds	r3, r7, r3
    1572:	210c      	movs	r1, #12
    1574:	1879      	adds	r1, r7, r1
    1576:	8809      	ldrh	r1, [r1, #0]
    1578:	400a      	ands	r2, r1
    157a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    157c:	230c      	movs	r3, #12
    157e:	18fb      	adds	r3, r7, r3
    1580:	881b      	ldrh	r3, [r3, #0]
    1582:	2280      	movs	r2, #128	; 0x80
    1584:	4013      	ands	r3, r2
    1586:	d00c      	beq.n	15a2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    1588:	230e      	movs	r3, #14
    158a:	18fb      	adds	r3, r7, r3
    158c:	881b      	ldrh	r3, [r3, #0]
    158e:	2202      	movs	r2, #2
    1590:	4013      	ands	r3, r2
    1592:	d002      	beq.n	159a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1594:	697b      	ldr	r3, [r7, #20]
    1596:	68db      	ldr	r3, [r3, #12]
    1598:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    159a:	693b      	ldr	r3, [r7, #16]
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	721a      	strb	r2, [r3, #8]
    15a0:	e011      	b.n	15c6 <_rtc_interrupt_handler+0xa2>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    15a2:	230c      	movs	r3, #12
    15a4:	18fb      	adds	r3, r7, r3
    15a6:	881b      	ldrh	r3, [r3, #0]
    15a8:	2201      	movs	r2, #1
    15aa:	4013      	ands	r3, r2
    15ac:	d00b      	beq.n	15c6 <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    15ae:	230e      	movs	r3, #14
    15b0:	18fb      	adds	r3, r7, r3
    15b2:	881b      	ldrh	r3, [r3, #0]
    15b4:	2201      	movs	r2, #1
    15b6:	4013      	ands	r3, r2
    15b8:	d002      	beq.n	15c0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    15ba:	697b      	ldr	r3, [r7, #20]
    15bc:	689b      	ldr	r3, [r3, #8]
    15be:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    15c0:	693b      	ldr	r3, [r7, #16]
    15c2:	2201      	movs	r2, #1
    15c4:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    15c6:	46bd      	mov	sp, r7
    15c8:	b006      	add	sp, #24
    15ca:	bd80      	pop	{r7, pc}
    15cc:	200001c4 	.word	0x200001c4

000015d0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    15d4:	2000      	movs	r0, #0
    15d6:	4b02      	ldr	r3, [pc, #8]	; (15e0 <RTC_Handler+0x10>)
    15d8:	4798      	blx	r3
}
    15da:	46bd      	mov	sp, r7
    15dc:	bd80      	pop	{r7, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00001525 	.word	0x00001525

000015e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b082      	sub	sp, #8
    15e8:	af00      	add	r7, sp, #0
    15ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	2200      	movs	r2, #0
    15f0:	701a      	strb	r2, [r3, #0]
}
    15f2:	46bd      	mov	sp, r7
    15f4:	b002      	add	sp, #8
    15f6:	bd80      	pop	{r7, pc}

000015f8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b086      	sub	sp, #24
    15fc:	af00      	add	r7, sp, #0
    15fe:	60f8      	str	r0, [r7, #12]
    1600:	60b9      	str	r1, [r7, #8]
    1602:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1604:	2316      	movs	r3, #22
    1606:	18fb      	adds	r3, r7, r3
    1608:	2200      	movs	r2, #0
    160a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    160c:	68bb      	ldr	r3, [r7, #8]
    160e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1610:	68bb      	ldr	r3, [r7, #8]
    1612:	085a      	lsrs	r2, r3, #1
    1614:	68fb      	ldr	r3, [r7, #12]
    1616:	429a      	cmp	r2, r3
    1618:	d201      	bcs.n	161e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    161a:	2340      	movs	r3, #64	; 0x40
    161c:	e026      	b.n	166c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    161e:	68bb      	ldr	r3, [r7, #8]
    1620:	085b      	lsrs	r3, r3, #1
    1622:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1624:	e00a      	b.n	163c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1626:	693a      	ldr	r2, [r7, #16]
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	1ad3      	subs	r3, r2, r3
    162c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    162e:	2316      	movs	r3, #22
    1630:	18fb      	adds	r3, r7, r3
    1632:	881a      	ldrh	r2, [r3, #0]
    1634:	2316      	movs	r3, #22
    1636:	18fb      	adds	r3, r7, r3
    1638:	3201      	adds	r2, #1
    163a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    163c:	693a      	ldr	r2, [r7, #16]
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	429a      	cmp	r2, r3
    1642:	d2f0      	bcs.n	1626 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1644:	2316      	movs	r3, #22
    1646:	18fb      	adds	r3, r7, r3
    1648:	2216      	movs	r2, #22
    164a:	18ba      	adds	r2, r7, r2
    164c:	8812      	ldrh	r2, [r2, #0]
    164e:	3a01      	subs	r2, #1
    1650:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1652:	2316      	movs	r3, #22
    1654:	18fb      	adds	r3, r7, r3
    1656:	881b      	ldrh	r3, [r3, #0]
    1658:	2bff      	cmp	r3, #255	; 0xff
    165a:	d901      	bls.n	1660 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    165c:	2340      	movs	r3, #64	; 0x40
    165e:	e005      	b.n	166c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	2216      	movs	r2, #22
    1664:	18ba      	adds	r2, r7, r2
    1666:	8812      	ldrh	r2, [r2, #0]
    1668:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    166a:	2300      	movs	r3, #0
	}
}
    166c:	1c18      	adds	r0, r3, #0
    166e:	46bd      	mov	sp, r7
    1670:	b006      	add	sp, #24
    1672:	bd80      	pop	{r7, pc}

00001674 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1674:	b580      	push	{r7, lr}
    1676:	b084      	sub	sp, #16
    1678:	af00      	add	r7, sp, #0
    167a:	1c02      	adds	r2, r0, #0
    167c:	1dfb      	adds	r3, r7, #7
    167e:	701a      	strb	r2, [r3, #0]
    1680:	1dbb      	adds	r3, r7, #6
    1682:	1c0a      	adds	r2, r1, #0
    1684:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1686:	4b1a      	ldr	r3, [pc, #104]	; (16f0 <sercom_set_gclk_generator+0x7c>)
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	2201      	movs	r2, #1
    168c:	4053      	eors	r3, r2
    168e:	b2db      	uxtb	r3, r3
    1690:	2b00      	cmp	r3, #0
    1692:	d103      	bne.n	169c <sercom_set_gclk_generator+0x28>
    1694:	1dbb      	adds	r3, r7, #6
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	2b00      	cmp	r3, #0
    169a:	d01b      	beq.n	16d4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    169c:	230c      	movs	r3, #12
    169e:	18fb      	adds	r3, r7, r3
    16a0:	1c18      	adds	r0, r3, #0
    16a2:	4b14      	ldr	r3, [pc, #80]	; (16f4 <sercom_set_gclk_generator+0x80>)
    16a4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    16a6:	230c      	movs	r3, #12
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	1dfa      	adds	r2, r7, #7
    16ac:	7812      	ldrb	r2, [r2, #0]
    16ae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    16b0:	230c      	movs	r3, #12
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	2013      	movs	r0, #19
    16b6:	1c19      	adds	r1, r3, #0
    16b8:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <sercom_set_gclk_generator+0x84>)
    16ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    16bc:	2013      	movs	r0, #19
    16be:	4b0f      	ldr	r3, [pc, #60]	; (16fc <sercom_set_gclk_generator+0x88>)
    16c0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    16c2:	4b0b      	ldr	r3, [pc, #44]	; (16f0 <sercom_set_gclk_generator+0x7c>)
    16c4:	1dfa      	adds	r2, r7, #7
    16c6:	7812      	ldrb	r2, [r2, #0]
    16c8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    16ca:	4b09      	ldr	r3, [pc, #36]	; (16f0 <sercom_set_gclk_generator+0x7c>)
    16cc:	2201      	movs	r2, #1
    16ce:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    16d0:	2300      	movs	r3, #0
    16d2:	e008      	b.n	16e6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    16d4:	4b06      	ldr	r3, [pc, #24]	; (16f0 <sercom_set_gclk_generator+0x7c>)
    16d6:	785b      	ldrb	r3, [r3, #1]
    16d8:	1dfa      	adds	r2, r7, #7
    16da:	7812      	ldrb	r2, [r2, #0]
    16dc:	429a      	cmp	r2, r3
    16de:	d101      	bne.n	16e4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    16e0:	2300      	movs	r3, #0
    16e2:	e000      	b.n	16e6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    16e4:	231d      	movs	r3, #29
}
    16e6:	1c18      	adds	r0, r3, #0
    16e8:	46bd      	mov	sp, r7
    16ea:	b004      	add	sp, #16
    16ec:	bd80      	pop	{r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	2000008c 	.word	0x2000008c
    16f4:	000015e5 	.word	0x000015e5
    16f8:	00006e9d 	.word	0x00006e9d
    16fc:	00006ee1 	.word	0x00006ee1

00001700 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1700:	b580      	push	{r7, lr}
    1702:	b082      	sub	sp, #8
    1704:	af00      	add	r7, sp, #0
    1706:	6078      	str	r0, [r7, #4]
    1708:	1c0a      	adds	r2, r1, #0
    170a:	1cfb      	adds	r3, r7, #3
    170c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	4a4d      	ldr	r2, [pc, #308]	; (1848 <_sercom_get_default_pad+0x148>)
    1712:	4293      	cmp	r3, r2
    1714:	d03f      	beq.n	1796 <_sercom_get_default_pad+0x96>
    1716:	4a4c      	ldr	r2, [pc, #304]	; (1848 <_sercom_get_default_pad+0x148>)
    1718:	4293      	cmp	r3, r2
    171a:	d806      	bhi.n	172a <_sercom_get_default_pad+0x2a>
    171c:	4a4b      	ldr	r2, [pc, #300]	; (184c <_sercom_get_default_pad+0x14c>)
    171e:	4293      	cmp	r3, r2
    1720:	d00f      	beq.n	1742 <_sercom_get_default_pad+0x42>
    1722:	4a4b      	ldr	r2, [pc, #300]	; (1850 <_sercom_get_default_pad+0x150>)
    1724:	4293      	cmp	r3, r2
    1726:	d021      	beq.n	176c <_sercom_get_default_pad+0x6c>
    1728:	e089      	b.n	183e <_sercom_get_default_pad+0x13e>
    172a:	4a4a      	ldr	r2, [pc, #296]	; (1854 <_sercom_get_default_pad+0x154>)
    172c:	4293      	cmp	r3, r2
    172e:	d100      	bne.n	1732 <_sercom_get_default_pad+0x32>
    1730:	e05b      	b.n	17ea <_sercom_get_default_pad+0xea>
    1732:	4a49      	ldr	r2, [pc, #292]	; (1858 <_sercom_get_default_pad+0x158>)
    1734:	4293      	cmp	r3, r2
    1736:	d100      	bne.n	173a <_sercom_get_default_pad+0x3a>
    1738:	e06c      	b.n	1814 <_sercom_get_default_pad+0x114>
    173a:	4a48      	ldr	r2, [pc, #288]	; (185c <_sercom_get_default_pad+0x15c>)
    173c:	4293      	cmp	r3, r2
    173e:	d03f      	beq.n	17c0 <_sercom_get_default_pad+0xc0>
    1740:	e07d      	b.n	183e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1742:	1cfb      	adds	r3, r7, #3
    1744:	781b      	ldrb	r3, [r3, #0]
    1746:	2b01      	cmp	r3, #1
    1748:	d00a      	beq.n	1760 <_sercom_get_default_pad+0x60>
    174a:	dc02      	bgt.n	1752 <_sercom_get_default_pad+0x52>
    174c:	2b00      	cmp	r3, #0
    174e:	d005      	beq.n	175c <_sercom_get_default_pad+0x5c>
    1750:	e075      	b.n	183e <_sercom_get_default_pad+0x13e>
    1752:	2b02      	cmp	r3, #2
    1754:	d006      	beq.n	1764 <_sercom_get_default_pad+0x64>
    1756:	2b03      	cmp	r3, #3
    1758:	d006      	beq.n	1768 <_sercom_get_default_pad+0x68>
    175a:	e070      	b.n	183e <_sercom_get_default_pad+0x13e>
    175c:	4b40      	ldr	r3, [pc, #256]	; (1860 <_sercom_get_default_pad+0x160>)
    175e:	e06f      	b.n	1840 <_sercom_get_default_pad+0x140>
    1760:	4b40      	ldr	r3, [pc, #256]	; (1864 <_sercom_get_default_pad+0x164>)
    1762:	e06d      	b.n	1840 <_sercom_get_default_pad+0x140>
    1764:	4b40      	ldr	r3, [pc, #256]	; (1868 <_sercom_get_default_pad+0x168>)
    1766:	e06b      	b.n	1840 <_sercom_get_default_pad+0x140>
    1768:	4b40      	ldr	r3, [pc, #256]	; (186c <_sercom_get_default_pad+0x16c>)
    176a:	e069      	b.n	1840 <_sercom_get_default_pad+0x140>
    176c:	1cfb      	adds	r3, r7, #3
    176e:	781b      	ldrb	r3, [r3, #0]
    1770:	2b01      	cmp	r3, #1
    1772:	d00a      	beq.n	178a <_sercom_get_default_pad+0x8a>
    1774:	dc02      	bgt.n	177c <_sercom_get_default_pad+0x7c>
    1776:	2b00      	cmp	r3, #0
    1778:	d005      	beq.n	1786 <_sercom_get_default_pad+0x86>
    177a:	e060      	b.n	183e <_sercom_get_default_pad+0x13e>
    177c:	2b02      	cmp	r3, #2
    177e:	d006      	beq.n	178e <_sercom_get_default_pad+0x8e>
    1780:	2b03      	cmp	r3, #3
    1782:	d006      	beq.n	1792 <_sercom_get_default_pad+0x92>
    1784:	e05b      	b.n	183e <_sercom_get_default_pad+0x13e>
    1786:	2303      	movs	r3, #3
    1788:	e05a      	b.n	1840 <_sercom_get_default_pad+0x140>
    178a:	4b39      	ldr	r3, [pc, #228]	; (1870 <_sercom_get_default_pad+0x170>)
    178c:	e058      	b.n	1840 <_sercom_get_default_pad+0x140>
    178e:	4b39      	ldr	r3, [pc, #228]	; (1874 <_sercom_get_default_pad+0x174>)
    1790:	e056      	b.n	1840 <_sercom_get_default_pad+0x140>
    1792:	4b39      	ldr	r3, [pc, #228]	; (1878 <_sercom_get_default_pad+0x178>)
    1794:	e054      	b.n	1840 <_sercom_get_default_pad+0x140>
    1796:	1cfb      	adds	r3, r7, #3
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	2b01      	cmp	r3, #1
    179c:	d00a      	beq.n	17b4 <_sercom_get_default_pad+0xb4>
    179e:	dc02      	bgt.n	17a6 <_sercom_get_default_pad+0xa6>
    17a0:	2b00      	cmp	r3, #0
    17a2:	d005      	beq.n	17b0 <_sercom_get_default_pad+0xb0>
    17a4:	e04b      	b.n	183e <_sercom_get_default_pad+0x13e>
    17a6:	2b02      	cmp	r3, #2
    17a8:	d006      	beq.n	17b8 <_sercom_get_default_pad+0xb8>
    17aa:	2b03      	cmp	r3, #3
    17ac:	d006      	beq.n	17bc <_sercom_get_default_pad+0xbc>
    17ae:	e046      	b.n	183e <_sercom_get_default_pad+0x13e>
    17b0:	4b32      	ldr	r3, [pc, #200]	; (187c <_sercom_get_default_pad+0x17c>)
    17b2:	e045      	b.n	1840 <_sercom_get_default_pad+0x140>
    17b4:	4b32      	ldr	r3, [pc, #200]	; (1880 <_sercom_get_default_pad+0x180>)
    17b6:	e043      	b.n	1840 <_sercom_get_default_pad+0x140>
    17b8:	4b32      	ldr	r3, [pc, #200]	; (1884 <_sercom_get_default_pad+0x184>)
    17ba:	e041      	b.n	1840 <_sercom_get_default_pad+0x140>
    17bc:	4b32      	ldr	r3, [pc, #200]	; (1888 <_sercom_get_default_pad+0x188>)
    17be:	e03f      	b.n	1840 <_sercom_get_default_pad+0x140>
    17c0:	1cfb      	adds	r3, r7, #3
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b01      	cmp	r3, #1
    17c6:	d00a      	beq.n	17de <_sercom_get_default_pad+0xde>
    17c8:	dc02      	bgt.n	17d0 <_sercom_get_default_pad+0xd0>
    17ca:	2b00      	cmp	r3, #0
    17cc:	d005      	beq.n	17da <_sercom_get_default_pad+0xda>
    17ce:	e036      	b.n	183e <_sercom_get_default_pad+0x13e>
    17d0:	2b02      	cmp	r3, #2
    17d2:	d006      	beq.n	17e2 <_sercom_get_default_pad+0xe2>
    17d4:	2b03      	cmp	r3, #3
    17d6:	d006      	beq.n	17e6 <_sercom_get_default_pad+0xe6>
    17d8:	e031      	b.n	183e <_sercom_get_default_pad+0x13e>
    17da:	4b2c      	ldr	r3, [pc, #176]	; (188c <_sercom_get_default_pad+0x18c>)
    17dc:	e030      	b.n	1840 <_sercom_get_default_pad+0x140>
    17de:	4b2c      	ldr	r3, [pc, #176]	; (1890 <_sercom_get_default_pad+0x190>)
    17e0:	e02e      	b.n	1840 <_sercom_get_default_pad+0x140>
    17e2:	4b2c      	ldr	r3, [pc, #176]	; (1894 <_sercom_get_default_pad+0x194>)
    17e4:	e02c      	b.n	1840 <_sercom_get_default_pad+0x140>
    17e6:	4b2c      	ldr	r3, [pc, #176]	; (1898 <_sercom_get_default_pad+0x198>)
    17e8:	e02a      	b.n	1840 <_sercom_get_default_pad+0x140>
    17ea:	1cfb      	adds	r3, r7, #3
    17ec:	781b      	ldrb	r3, [r3, #0]
    17ee:	2b01      	cmp	r3, #1
    17f0:	d00a      	beq.n	1808 <_sercom_get_default_pad+0x108>
    17f2:	dc02      	bgt.n	17fa <_sercom_get_default_pad+0xfa>
    17f4:	2b00      	cmp	r3, #0
    17f6:	d005      	beq.n	1804 <_sercom_get_default_pad+0x104>
    17f8:	e021      	b.n	183e <_sercom_get_default_pad+0x13e>
    17fa:	2b02      	cmp	r3, #2
    17fc:	d006      	beq.n	180c <_sercom_get_default_pad+0x10c>
    17fe:	2b03      	cmp	r3, #3
    1800:	d006      	beq.n	1810 <_sercom_get_default_pad+0x110>
    1802:	e01c      	b.n	183e <_sercom_get_default_pad+0x13e>
    1804:	4b25      	ldr	r3, [pc, #148]	; (189c <_sercom_get_default_pad+0x19c>)
    1806:	e01b      	b.n	1840 <_sercom_get_default_pad+0x140>
    1808:	4b25      	ldr	r3, [pc, #148]	; (18a0 <_sercom_get_default_pad+0x1a0>)
    180a:	e019      	b.n	1840 <_sercom_get_default_pad+0x140>
    180c:	4b25      	ldr	r3, [pc, #148]	; (18a4 <_sercom_get_default_pad+0x1a4>)
    180e:	e017      	b.n	1840 <_sercom_get_default_pad+0x140>
    1810:	4b25      	ldr	r3, [pc, #148]	; (18a8 <_sercom_get_default_pad+0x1a8>)
    1812:	e015      	b.n	1840 <_sercom_get_default_pad+0x140>
    1814:	1cfb      	adds	r3, r7, #3
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	2b01      	cmp	r3, #1
    181a:	d00a      	beq.n	1832 <_sercom_get_default_pad+0x132>
    181c:	dc02      	bgt.n	1824 <_sercom_get_default_pad+0x124>
    181e:	2b00      	cmp	r3, #0
    1820:	d005      	beq.n	182e <_sercom_get_default_pad+0x12e>
    1822:	e00c      	b.n	183e <_sercom_get_default_pad+0x13e>
    1824:	2b02      	cmp	r3, #2
    1826:	d006      	beq.n	1836 <_sercom_get_default_pad+0x136>
    1828:	2b03      	cmp	r3, #3
    182a:	d006      	beq.n	183a <_sercom_get_default_pad+0x13a>
    182c:	e007      	b.n	183e <_sercom_get_default_pad+0x13e>
    182e:	4b1f      	ldr	r3, [pc, #124]	; (18ac <_sercom_get_default_pad+0x1ac>)
    1830:	e006      	b.n	1840 <_sercom_get_default_pad+0x140>
    1832:	4b1f      	ldr	r3, [pc, #124]	; (18b0 <_sercom_get_default_pad+0x1b0>)
    1834:	e004      	b.n	1840 <_sercom_get_default_pad+0x140>
    1836:	4b1f      	ldr	r3, [pc, #124]	; (18b4 <_sercom_get_default_pad+0x1b4>)
    1838:	e002      	b.n	1840 <_sercom_get_default_pad+0x140>
    183a:	4b1f      	ldr	r3, [pc, #124]	; (18b8 <_sercom_get_default_pad+0x1b8>)
    183c:	e000      	b.n	1840 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    183e:	2300      	movs	r3, #0
}
    1840:	1c18      	adds	r0, r3, #0
    1842:	46bd      	mov	sp, r7
    1844:	b002      	add	sp, #8
    1846:	bd80      	pop	{r7, pc}
    1848:	42001000 	.word	0x42001000
    184c:	42000800 	.word	0x42000800
    1850:	42000c00 	.word	0x42000c00
    1854:	42001800 	.word	0x42001800
    1858:	42001c00 	.word	0x42001c00
    185c:	42001400 	.word	0x42001400
    1860:	00040003 	.word	0x00040003
    1864:	00050003 	.word	0x00050003
    1868:	00060003 	.word	0x00060003
    186c:	00070003 	.word	0x00070003
    1870:	00010003 	.word	0x00010003
    1874:	001e0003 	.word	0x001e0003
    1878:	001f0003 	.word	0x001f0003
    187c:	00080003 	.word	0x00080003
    1880:	00090003 	.word	0x00090003
    1884:	000a0003 	.word	0x000a0003
    1888:	000b0003 	.word	0x000b0003
    188c:	00100003 	.word	0x00100003
    1890:	00110003 	.word	0x00110003
    1894:	00120003 	.word	0x00120003
    1898:	00130003 	.word	0x00130003
    189c:	000c0003 	.word	0x000c0003
    18a0:	000d0003 	.word	0x000d0003
    18a4:	000e0003 	.word	0x000e0003
    18a8:	000f0003 	.word	0x000f0003
    18ac:	00160003 	.word	0x00160003
    18b0:	00170003 	.word	0x00170003
    18b4:	00180003 	.word	0x00180003
    18b8:	00190003 	.word	0x00190003

000018bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    18bc:	b590      	push	{r4, r7, lr}
    18be:	b08b      	sub	sp, #44	; 0x2c
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18c4:	230c      	movs	r3, #12
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	4a0e      	ldr	r2, [pc, #56]	; (1904 <_sercom_get_sercom_inst_index+0x48>)
    18ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    18cc:	c313      	stmia	r3!, {r0, r1, r4}
    18ce:	ca13      	ldmia	r2!, {r0, r1, r4}
    18d0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18d2:	2300      	movs	r3, #0
    18d4:	627b      	str	r3, [r7, #36]	; 0x24
    18d6:	e00d      	b.n	18f4 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	220c      	movs	r2, #12
    18dc:	18ba      	adds	r2, r7, r2
    18de:	6a79      	ldr	r1, [r7, #36]	; 0x24
    18e0:	0089      	lsls	r1, r1, #2
    18e2:	588a      	ldr	r2, [r1, r2]
    18e4:	4293      	cmp	r3, r2
    18e6:	d102      	bne.n	18ee <_sercom_get_sercom_inst_index+0x32>
			return i;
    18e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ea:	b2db      	uxtb	r3, r3
    18ec:	e006      	b.n	18fc <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18f0:	3301      	adds	r3, #1
    18f2:	627b      	str	r3, [r7, #36]	; 0x24
    18f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18f6:	2b05      	cmp	r3, #5
    18f8:	d9ee      	bls.n	18d8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18fa:	2300      	movs	r3, #0
}
    18fc:	1c18      	adds	r0, r3, #0
    18fe:	46bd      	mov	sp, r7
    1900:	b00b      	add	sp, #44	; 0x2c
    1902:	bd90      	pop	{r4, r7, pc}
    1904:	00009fb0 	.word	0x00009fb0

00001908 <epd_display>:
 *  Author: corwinperren
 */ 
#include "epd_graphics_library.h"


void epd_display(uint8_t orientation){
    1908:	b590      	push	{r4, r7, lr}
    190a:	b083      	sub	sp, #12
    190c:	af00      	add	r7, sp, #0
    190e:	1c02      	adds	r2, r0, #0
    1910:	1dfb      	adds	r3, r7, #7
    1912:	701a      	strb	r2, [r3, #0]
	
	if (orientation != LANDSCAPE_FLIPPED){
    1914:	1dfb      	adds	r3, r7, #7
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b01      	cmp	r3, #1
    191a:	d017      	beq.n	194c <epd_display+0x44>
		framebuffer_x_y_mirror();
    191c:	4b16      	ldr	r3, [pc, #88]	; (1978 <epd_display+0x70>)
    191e:	4798      	blx	r3
	
		EPD_display_from_pointer(EPD_270, previous_framebuffer, current_framebuffer);
    1920:	4b16      	ldr	r3, [pc, #88]	; (197c <epd_display+0x74>)
    1922:	681a      	ldr	r2, [r3, #0]
    1924:	4b16      	ldr	r3, [pc, #88]	; (1980 <epd_display+0x78>)
    1926:	681b      	ldr	r3, [r3, #0]
    1928:	2002      	movs	r0, #2
    192a:	1c11      	adds	r1, r2, #0
    192c:	1c1a      	adds	r2, r3, #0
    192e:	4b15      	ldr	r3, [pc, #84]	; (1984 <epd_display+0x7c>)
    1930:	4798      	blx	r3
		memcpy(previous_framebuffer, current_framebuffer, sizeof(previous_framebuffer)*1452);
    1932:	4b12      	ldr	r3, [pc, #72]	; (197c <epd_display+0x74>)
    1934:	681a      	ldr	r2, [r3, #0]
    1936:	4b12      	ldr	r3, [pc, #72]	; (1980 <epd_display+0x78>)
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	4c13      	ldr	r4, [pc, #76]	; (1988 <epd_display+0x80>)
    193c:	1c10      	adds	r0, r2, #0
    193e:	1c19      	adds	r1, r3, #0
    1940:	1c22      	adds	r2, r4, #0
    1942:	4b12      	ldr	r3, [pc, #72]	; (198c <epd_display+0x84>)
    1944:	4798      	blx	r3
		
		framebuffer_x_y_mirror();
    1946:	4b0c      	ldr	r3, [pc, #48]	; (1978 <epd_display+0x70>)
    1948:	4798      	blx	r3
    194a:	e012      	b.n	1972 <epd_display+0x6a>
		
	}else{
		EPD_display_from_pointer(EPD_270, previous_framebuffer, current_framebuffer);
    194c:	4b0b      	ldr	r3, [pc, #44]	; (197c <epd_display+0x74>)
    194e:	681a      	ldr	r2, [r3, #0]
    1950:	4b0b      	ldr	r3, [pc, #44]	; (1980 <epd_display+0x78>)
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	2002      	movs	r0, #2
    1956:	1c11      	adds	r1, r2, #0
    1958:	1c1a      	adds	r2, r3, #0
    195a:	4b0a      	ldr	r3, [pc, #40]	; (1984 <epd_display+0x7c>)
    195c:	4798      	blx	r3
		memcpy(previous_framebuffer, current_framebuffer, sizeof(previous_framebuffer)*1452);
    195e:	4b07      	ldr	r3, [pc, #28]	; (197c <epd_display+0x74>)
    1960:	681a      	ldr	r2, [r3, #0]
    1962:	4b07      	ldr	r3, [pc, #28]	; (1980 <epd_display+0x78>)
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	4c08      	ldr	r4, [pc, #32]	; (1988 <epd_display+0x80>)
    1968:	1c10      	adds	r0, r2, #0
    196a:	1c19      	adds	r1, r3, #0
    196c:	1c22      	adds	r2, r4, #0
    196e:	4b07      	ldr	r3, [pc, #28]	; (198c <epd_display+0x84>)
    1970:	4798      	blx	r3
		
	}
}
    1972:	46bd      	mov	sp, r7
    1974:	b003      	add	sp, #12
    1976:	bd90      	pop	{r4, r7, pc}
    1978:	000019e5 	.word	0x000019e5
    197c:	200001c8 	.word	0x200001c8
    1980:	200001cc 	.word	0x200001cc
    1984:	00004b61 	.word	0x00004b61
    1988:	000016b0 	.word	0x000016b0
    198c:	00009e41 	.word	0x00009e41

00001990 <set_framebuffers>:

void set_framebuffers(uint8_t *current, uint8_t *previous){
    1990:	b580      	push	{r7, lr}
    1992:	b084      	sub	sp, #16
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
    1998:	6039      	str	r1, [r7, #0]
	current_framebuffer = current;
    199a:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <set_framebuffers+0x48>)
    199c:	687a      	ldr	r2, [r7, #4]
    199e:	601a      	str	r2, [r3, #0]
	previous_framebuffer = previous;
    19a0:	4b0e      	ldr	r3, [pc, #56]	; (19dc <set_framebuffers+0x4c>)
    19a2:	683a      	ldr	r2, [r7, #0]
    19a4:	601a      	str	r2, [r3, #0]
	
	for(int i = 0 ; i < ((DISPLAY_WIDTH/8)*DISPLAY_HEIGHT) ; i++){
    19a6:	2300      	movs	r3, #0
    19a8:	60fb      	str	r3, [r7, #12]
    19aa:	e00e      	b.n	19ca <set_framebuffers+0x3a>
		current_framebuffer[i] = 0xFF;
    19ac:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <set_framebuffers+0x48>)
    19ae:	681a      	ldr	r2, [r3, #0]
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	18d3      	adds	r3, r2, r3
    19b4:	22ff      	movs	r2, #255	; 0xff
    19b6:	701a      	strb	r2, [r3, #0]
		previous_framebuffer[i] = 0xFF;
    19b8:	4b08      	ldr	r3, [pc, #32]	; (19dc <set_framebuffers+0x4c>)
    19ba:	681a      	ldr	r2, [r3, #0]
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	18d3      	adds	r3, r2, r3
    19c0:	22ff      	movs	r2, #255	; 0xff
    19c2:	701a      	strb	r2, [r3, #0]

void set_framebuffers(uint8_t *current, uint8_t *previous){
	current_framebuffer = current;
	previous_framebuffer = previous;
	
	for(int i = 0 ; i < ((DISPLAY_WIDTH/8)*DISPLAY_HEIGHT) ; i++){
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	3301      	adds	r3, #1
    19c8:	60fb      	str	r3, [r7, #12]
    19ca:	68fb      	ldr	r3, [r7, #12]
    19cc:	4a04      	ldr	r2, [pc, #16]	; (19e0 <set_framebuffers+0x50>)
    19ce:	4293      	cmp	r3, r2
    19d0:	ddec      	ble.n	19ac <set_framebuffers+0x1c>
		current_framebuffer[i] = 0xFF;
		previous_framebuffer[i] = 0xFF;
	}
}
    19d2:	46bd      	mov	sp, r7
    19d4:	b004      	add	sp, #16
    19d6:	bd80      	pop	{r7, pc}
    19d8:	200001cc 	.word	0x200001cc
    19dc:	200001c8 	.word	0x200001c8
    19e0:	000016af 	.word	0x000016af

000019e4 <framebuffer_x_y_mirror>:
		current_framebuffer[i] = 0xFF;
	}
}

void framebuffer_x_y_mirror(void)
{
    19e4:	b590      	push	{r4, r7, lr}
    19e6:	b083      	sub	sp, #12
    19e8:	af00      	add	r7, sp, #0
	uint16_t max = BYTES_PER_ROW*DISPLAY_HEIGHT;
    19ea:	1d3b      	adds	r3, r7, #4
    19ec:	4a20      	ldr	r2, [pc, #128]	; (1a70 <framebuffer_x_y_mirror+0x8c>)
    19ee:	801a      	strh	r2, [r3, #0]
	
	char temp;
	for(uint16_t i = 0 ; i < (max/2) ; i++){
    19f0:	1dbb      	adds	r3, r7, #6
    19f2:	2200      	movs	r2, #0
    19f4:	801a      	strh	r2, [r3, #0]
    19f6:	e030      	b.n	1a5a <framebuffer_x_y_mirror+0x76>
		temp = current_framebuffer[i];
    19f8:	4b1e      	ldr	r3, [pc, #120]	; (1a74 <framebuffer_x_y_mirror+0x90>)
    19fa:	681a      	ldr	r2, [r3, #0]
    19fc:	1dbb      	adds	r3, r7, #6
    19fe:	881b      	ldrh	r3, [r3, #0]
    1a00:	18d2      	adds	r2, r2, r3
    1a02:	1cfb      	adds	r3, r7, #3
    1a04:	7812      	ldrb	r2, [r2, #0]
    1a06:	701a      	strb	r2, [r3, #0]
		current_framebuffer[i] = reverse_byte(current_framebuffer[max-1-i]);
    1a08:	4b1a      	ldr	r3, [pc, #104]	; (1a74 <framebuffer_x_y_mirror+0x90>)
    1a0a:	681a      	ldr	r2, [r3, #0]
    1a0c:	1dbb      	adds	r3, r7, #6
    1a0e:	881b      	ldrh	r3, [r3, #0]
    1a10:	18d4      	adds	r4, r2, r3
    1a12:	4b18      	ldr	r3, [pc, #96]	; (1a74 <framebuffer_x_y_mirror+0x90>)
    1a14:	681b      	ldr	r3, [r3, #0]
    1a16:	1d3a      	adds	r2, r7, #4
    1a18:	8812      	ldrh	r2, [r2, #0]
    1a1a:	1e51      	subs	r1, r2, #1
    1a1c:	1dba      	adds	r2, r7, #6
    1a1e:	8812      	ldrh	r2, [r2, #0]
    1a20:	1a8a      	subs	r2, r1, r2
    1a22:	189b      	adds	r3, r3, r2
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	1c18      	adds	r0, r3, #0
    1a28:	4b13      	ldr	r3, [pc, #76]	; (1a78 <framebuffer_x_y_mirror+0x94>)
    1a2a:	4798      	blx	r3
    1a2c:	1c03      	adds	r3, r0, #0
    1a2e:	7023      	strb	r3, [r4, #0]
		current_framebuffer[max-1-i] = reverse_byte(temp);
    1a30:	4b10      	ldr	r3, [pc, #64]	; (1a74 <framebuffer_x_y_mirror+0x90>)
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	1d3a      	adds	r2, r7, #4
    1a36:	8812      	ldrh	r2, [r2, #0]
    1a38:	1e51      	subs	r1, r2, #1
    1a3a:	1dba      	adds	r2, r7, #6
    1a3c:	8812      	ldrh	r2, [r2, #0]
    1a3e:	1a8a      	subs	r2, r1, r2
    1a40:	189c      	adds	r4, r3, r2
    1a42:	1cfb      	adds	r3, r7, #3
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	1c18      	adds	r0, r3, #0
    1a48:	4b0b      	ldr	r3, [pc, #44]	; (1a78 <framebuffer_x_y_mirror+0x94>)
    1a4a:	4798      	blx	r3
    1a4c:	1c03      	adds	r3, r0, #0
    1a4e:	7023      	strb	r3, [r4, #0]
void framebuffer_x_y_mirror(void)
{
	uint16_t max = BYTES_PER_ROW*DISPLAY_HEIGHT;
	
	char temp;
	for(uint16_t i = 0 ; i < (max/2) ; i++){
    1a50:	1dbb      	adds	r3, r7, #6
    1a52:	881a      	ldrh	r2, [r3, #0]
    1a54:	1dbb      	adds	r3, r7, #6
    1a56:	3201      	adds	r2, #1
    1a58:	801a      	strh	r2, [r3, #0]
    1a5a:	1d3b      	adds	r3, r7, #4
    1a5c:	881b      	ldrh	r3, [r3, #0]
    1a5e:	085b      	lsrs	r3, r3, #1
    1a60:	b29b      	uxth	r3, r3
    1a62:	1dba      	adds	r2, r7, #6
    1a64:	8812      	ldrh	r2, [r2, #0]
    1a66:	429a      	cmp	r2, r3
    1a68:	d3c6      	bcc.n	19f8 <framebuffer_x_y_mirror+0x14>
		temp = current_framebuffer[i];
		current_framebuffer[i] = reverse_byte(current_framebuffer[max-1-i]);
		current_framebuffer[max-1-i] = reverse_byte(temp);
	}
	
}
    1a6a:	46bd      	mov	sp, r7
    1a6c:	b003      	add	sp, #12
    1a6e:	bd90      	pop	{r4, r7, pc}
    1a70:	000016b0 	.word	0x000016b0
    1a74:	200001cc 	.word	0x200001cc
    1a78:	00002429 	.word	0x00002429

00001a7c <framebuffer_draw_pixel>:


void framebuffer_draw_pixel(uint16_t x, uint16_t y, uint8_t color){
    1a7c:	b590      	push	{r4, r7, lr}
    1a7e:	b085      	sub	sp, #20
    1a80:	af00      	add	r7, sp, #0
    1a82:	1c04      	adds	r4, r0, #0
    1a84:	1c08      	adds	r0, r1, #0
    1a86:	1c11      	adds	r1, r2, #0
    1a88:	1dbb      	adds	r3, r7, #6
    1a8a:	1c22      	adds	r2, r4, #0
    1a8c:	801a      	strh	r2, [r3, #0]
    1a8e:	1d3b      	adds	r3, r7, #4
    1a90:	1c02      	adds	r2, r0, #0
    1a92:	801a      	strh	r2, [r3, #0]
    1a94:	1cfb      	adds	r3, r7, #3
    1a96:	1c0a      	adds	r2, r1, #0
    1a98:	701a      	strb	r2, [r3, #0]
	
	if ((x > DISPLAY_WIDTH) || (y > DISPLAY_HEIGHT ) || (x < 1) || (y < 1)) {
    1a9a:	1dbb      	adds	r3, r7, #6
    1a9c:	881a      	ldrh	r2, [r3, #0]
    1a9e:	2384      	movs	r3, #132	; 0x84
    1aa0:	005b      	lsls	r3, r3, #1
    1aa2:	429a      	cmp	r2, r3
    1aa4:	d80b      	bhi.n	1abe <framebuffer_draw_pixel+0x42>
    1aa6:	1d3b      	adds	r3, r7, #4
    1aa8:	881b      	ldrh	r3, [r3, #0]
    1aaa:	2bb0      	cmp	r3, #176	; 0xb0
    1aac:	d807      	bhi.n	1abe <framebuffer_draw_pixel+0x42>
    1aae:	1dbb      	adds	r3, r7, #6
    1ab0:	881b      	ldrh	r3, [r3, #0]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d003      	beq.n	1abe <framebuffer_draw_pixel+0x42>
    1ab6:	1d3b      	adds	r3, r7, #4
    1ab8:	881b      	ldrh	r3, [r3, #0]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d100      	bne.n	1ac0 <framebuffer_draw_pixel+0x44>
		return;
    1abe:	e065      	b.n	1b8c <framebuffer_draw_pixel+0x110>
	}
	
 	x--;
    1ac0:	1dbb      	adds	r3, r7, #6
    1ac2:	881a      	ldrh	r2, [r3, #0]
    1ac4:	1dbb      	adds	r3, r7, #6
    1ac6:	3a01      	subs	r2, #1
    1ac8:	801a      	strh	r2, [r3, #0]
 	y--;
    1aca:	1d3b      	adds	r3, r7, #4
    1acc:	881a      	ldrh	r2, [r3, #0]
    1ace:	1d3b      	adds	r3, r7, #4
    1ad0:	3a01      	subs	r2, #1
    1ad2:	801a      	strh	r2, [r3, #0]
	
	uint8_t page = x/PIXELS_PER_BYTE;
    1ad4:	1dbb      	adds	r3, r7, #6
    1ad6:	881b      	ldrh	r3, [r3, #0]
    1ad8:	08db      	lsrs	r3, r3, #3
    1ada:	b29a      	uxth	r2, r3
    1adc:	230e      	movs	r3, #14
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	701a      	strb	r2, [r3, #0]
	uint8_t pixel_mask = (1 << (7-(x-(page*PIXELS_PER_BYTE))));
    1ae2:	230e      	movs	r3, #14
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	00da      	lsls	r2, r3, #3
    1aea:	1dbb      	adds	r3, r7, #6
    1aec:	881b      	ldrh	r3, [r3, #0]
    1aee:	1ad3      	subs	r3, r2, r3
    1af0:	3307      	adds	r3, #7
    1af2:	2201      	movs	r2, #1
    1af4:	409a      	lsls	r2, r3
    1af6:	230d      	movs	r3, #13
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	701a      	strb	r2, [r3, #0]
	
	uint32_t byte_offset = page + (y*BYTES_PER_ROW);
    1afc:	230e      	movs	r3, #14
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	7819      	ldrb	r1, [r3, #0]
    1b02:	1d3b      	adds	r3, r7, #4
    1b04:	881a      	ldrh	r2, [r3, #0]
    1b06:	1c13      	adds	r3, r2, #0
    1b08:	015b      	lsls	r3, r3, #5
    1b0a:	189b      	adds	r3, r3, r2
    1b0c:	18cb      	adds	r3, r1, r3
    1b0e:	60bb      	str	r3, [r7, #8]
	uint8_t current_pixel_byte = current_framebuffer[byte_offset];
    1b10:	4b20      	ldr	r3, [pc, #128]	; (1b94 <framebuffer_draw_pixel+0x118>)
    1b12:	681a      	ldr	r2, [r3, #0]
    1b14:	68bb      	ldr	r3, [r7, #8]
    1b16:	18d2      	adds	r2, r2, r3
    1b18:	230f      	movs	r3, #15
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	7812      	ldrb	r2, [r2, #0]
    1b1e:	701a      	strb	r2, [r3, #0]
	
	switch(color){
    1b20:	1cfb      	adds	r3, r7, #3
    1b22:	781b      	ldrb	r3, [r3, #0]
    1b24:	2b01      	cmp	r3, #1
    1b26:	d013      	beq.n	1b50 <framebuffer_draw_pixel+0xd4>
    1b28:	2b02      	cmp	r3, #2
    1b2a:	d01c      	beq.n	1b66 <framebuffer_draw_pixel+0xea>
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d000      	beq.n	1b32 <framebuffer_draw_pixel+0xb6>
		case PIXEL_XOR:
			current_pixel_byte ^= pixel_mask;
			break;
			
		default:
			break;	
    1b30:	e024      	b.n	1b7c <framebuffer_draw_pixel+0x100>
	uint32_t byte_offset = page + (y*BYTES_PER_ROW);
	uint8_t current_pixel_byte = current_framebuffer[byte_offset];
	
	switch(color){
		case PIXEL_SET:
			current_pixel_byte &= ~pixel_mask;
    1b32:	230d      	movs	r3, #13
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	43db      	mvns	r3, r3
    1b3a:	b2d9      	uxtb	r1, r3
    1b3c:	230f      	movs	r3, #15
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	781a      	ldrb	r2, [r3, #0]
    1b42:	1c0b      	adds	r3, r1, #0
    1b44:	4013      	ands	r3, r2
    1b46:	b2da      	uxtb	r2, r3
    1b48:	230f      	movs	r3, #15
    1b4a:	18fb      	adds	r3, r7, r3
    1b4c:	701a      	strb	r2, [r3, #0]
			break;
    1b4e:	e015      	b.n	1b7c <framebuffer_draw_pixel+0x100>
			
		case PIXEL_CLR:
			current_pixel_byte |= pixel_mask;
    1b50:	230f      	movs	r3, #15
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	220f      	movs	r2, #15
    1b56:	18b9      	adds	r1, r7, r2
    1b58:	220d      	movs	r2, #13
    1b5a:	18ba      	adds	r2, r7, r2
    1b5c:	7809      	ldrb	r1, [r1, #0]
    1b5e:	7812      	ldrb	r2, [r2, #0]
    1b60:	430a      	orrs	r2, r1
    1b62:	701a      	strb	r2, [r3, #0]
			break;
    1b64:	e00a      	b.n	1b7c <framebuffer_draw_pixel+0x100>
			
		case PIXEL_XOR:
			current_pixel_byte ^= pixel_mask;
    1b66:	230f      	movs	r3, #15
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	220f      	movs	r2, #15
    1b6c:	18b9      	adds	r1, r7, r2
    1b6e:	220d      	movs	r2, #13
    1b70:	18ba      	adds	r2, r7, r2
    1b72:	7809      	ldrb	r1, [r1, #0]
    1b74:	7812      	ldrb	r2, [r2, #0]
    1b76:	404a      	eors	r2, r1
    1b78:	701a      	strb	r2, [r3, #0]
			break;
    1b7a:	46c0      	nop			; (mov r8, r8)
			
		default:
			break;	
	}
	
	current_framebuffer[byte_offset] = current_pixel_byte;
    1b7c:	4b05      	ldr	r3, [pc, #20]	; (1b94 <framebuffer_draw_pixel+0x118>)
    1b7e:	681a      	ldr	r2, [r3, #0]
    1b80:	68bb      	ldr	r3, [r7, #8]
    1b82:	18d3      	adds	r3, r2, r3
    1b84:	220f      	movs	r2, #15
    1b86:	18ba      	adds	r2, r7, r2
    1b88:	7812      	ldrb	r2, [r2, #0]
    1b8a:	701a      	strb	r2, [r3, #0]
}
    1b8c:	46bd      	mov	sp, r7
    1b8e:	b005      	add	sp, #20
    1b90:	bd90      	pop	{r4, r7, pc}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	200001cc 	.word	0x200001cc

00001b98 <framebuffer_draw_line>:


//Draw line credit to Po-Han Lin at http://www.edepot.com
void framebuffer_draw_line(uint16_t x, uint16_t y, uint16_t x2, uint16_t y2, uint8_t color){
    1b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9a:	b08d      	sub	sp, #52	; 0x34
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	1c05      	adds	r5, r0, #0
    1ba0:	1c0c      	adds	r4, r1, #0
    1ba2:	1c10      	adds	r0, r2, #0
    1ba4:	1c19      	adds	r1, r3, #0
    1ba6:	1dbb      	adds	r3, r7, #6
    1ba8:	1c2a      	adds	r2, r5, #0
    1baa:	801a      	strh	r2, [r3, #0]
    1bac:	1d3b      	adds	r3, r7, #4
    1bae:	1c22      	adds	r2, r4, #0
    1bb0:	801a      	strh	r2, [r3, #0]
    1bb2:	1cbb      	adds	r3, r7, #2
    1bb4:	1c02      	adds	r2, r0, #0
    1bb6:	801a      	strh	r2, [r3, #0]
    1bb8:	1c3b      	adds	r3, r7, #0
    1bba:	1c0a      	adds	r2, r1, #0
    1bbc:	801a      	strh	r2, [r3, #0]

		bool yLonger=false;
    1bbe:	232f      	movs	r3, #47	; 0x2f
    1bc0:	18fb      	adds	r3, r7, r3
    1bc2:	2200      	movs	r2, #0
    1bc4:	701a      	strb	r2, [r3, #0]
		int incrementVal;
		int shortLen=y2-y;
    1bc6:	1c3b      	adds	r3, r7, #0
    1bc8:	881a      	ldrh	r2, [r3, #0]
    1bca:	1d3b      	adds	r3, r7, #4
    1bcc:	881b      	ldrh	r3, [r3, #0]
    1bce:	1ad3      	subs	r3, r2, r3
    1bd0:	627b      	str	r3, [r7, #36]	; 0x24
		int longLen=x2-x;
    1bd2:	1cbb      	adds	r3, r7, #2
    1bd4:	881a      	ldrh	r2, [r3, #0]
    1bd6:	1dbb      	adds	r3, r7, #6
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	1ad3      	subs	r3, r2, r3
    1bdc:	623b      	str	r3, [r7, #32]

		if (abs(shortLen)>abs(longLen)) {
    1bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1be0:	17d9      	asrs	r1, r3, #31
    1be2:	185a      	adds	r2, r3, r1
    1be4:	404a      	eors	r2, r1
    1be6:	6a3b      	ldr	r3, [r7, #32]
    1be8:	17d9      	asrs	r1, r3, #31
    1bea:	185b      	adds	r3, r3, r1
    1bec:	404b      	eors	r3, r1
    1bee:	429a      	cmp	r2, r3
    1bf0:	dd09      	ble.n	1c06 <framebuffer_draw_line+0x6e>
			int swap=shortLen;
    1bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bf4:	60fb      	str	r3, [r7, #12]
			shortLen=longLen;
    1bf6:	6a3b      	ldr	r3, [r7, #32]
    1bf8:	627b      	str	r3, [r7, #36]	; 0x24
			longLen=swap;
    1bfa:	68fb      	ldr	r3, [r7, #12]
    1bfc:	623b      	str	r3, [r7, #32]
			yLonger=true;
    1bfe:	232f      	movs	r3, #47	; 0x2f
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	2201      	movs	r2, #1
    1c04:	701a      	strb	r2, [r3, #0]
		}

		if (longLen<0) incrementVal=-1;
    1c06:	6a3b      	ldr	r3, [r7, #32]
    1c08:	2b00      	cmp	r3, #0
    1c0a:	da03      	bge.n	1c14 <framebuffer_draw_line+0x7c>
    1c0c:	2301      	movs	r3, #1
    1c0e:	425b      	negs	r3, r3
    1c10:	62bb      	str	r3, [r7, #40]	; 0x28
    1c12:	e001      	b.n	1c18 <framebuffer_draw_line+0x80>
		else incrementVal=1;
    1c14:	2301      	movs	r3, #1
    1c16:	62bb      	str	r3, [r7, #40]	; 0x28

		double multDiff;
		if (longLen==0.0) multDiff=(double)shortLen;
    1c18:	4b49      	ldr	r3, [pc, #292]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1c1a:	6a38      	ldr	r0, [r7, #32]
    1c1c:	4798      	blx	r3
    1c1e:	1c02      	adds	r2, r0, #0
    1c20:	1c0b      	adds	r3, r1, #0
    1c22:	4c48      	ldr	r4, [pc, #288]	; (1d44 <framebuffer_draw_line+0x1ac>)
    1c24:	1c10      	adds	r0, r2, #0
    1c26:	1c19      	adds	r1, r3, #0
    1c28:	2200      	movs	r2, #0
    1c2a:	2300      	movs	r3, #0
    1c2c:	47a0      	blx	r4
    1c2e:	1e03      	subs	r3, r0, #0
    1c30:	d007      	beq.n	1c42 <framebuffer_draw_line+0xaa>
    1c32:	4b43      	ldr	r3, [pc, #268]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1c36:	4798      	blx	r3
    1c38:	1c03      	adds	r3, r0, #0
    1c3a:	1c0c      	adds	r4, r1, #0
    1c3c:	61bb      	str	r3, [r7, #24]
    1c3e:	61fc      	str	r4, [r7, #28]
    1c40:	e011      	b.n	1c66 <framebuffer_draw_line+0xce>
		else multDiff=(double)shortLen/(double)longLen;
    1c42:	4b3f      	ldr	r3, [pc, #252]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1c46:	4798      	blx	r3
    1c48:	1c05      	adds	r5, r0, #0
    1c4a:	1c0e      	adds	r6, r1, #0
    1c4c:	4b3c      	ldr	r3, [pc, #240]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1c4e:	6a38      	ldr	r0, [r7, #32]
    1c50:	4798      	blx	r3
    1c52:	1c02      	adds	r2, r0, #0
    1c54:	1c0b      	adds	r3, r1, #0
    1c56:	4c3c      	ldr	r4, [pc, #240]	; (1d48 <framebuffer_draw_line+0x1b0>)
    1c58:	1c28      	adds	r0, r5, #0
    1c5a:	1c31      	adds	r1, r6, #0
    1c5c:	47a0      	blx	r4
    1c5e:	1c03      	adds	r3, r0, #0
    1c60:	1c0c      	adds	r4, r1, #0
    1c62:	61bb      	str	r3, [r7, #24]
    1c64:	61fc      	str	r4, [r7, #28]
		if (yLonger) {
    1c66:	232f      	movs	r3, #47	; 0x2f
    1c68:	18fb      	adds	r3, r7, r3
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d032      	beq.n	1cd6 <framebuffer_draw_line+0x13e>
			for (int i=0;i!=longLen;i+=incrementVal) {
    1c70:	2300      	movs	r3, #0
    1c72:	617b      	str	r3, [r7, #20]
    1c74:	e02a      	b.n	1ccc <framebuffer_draw_line+0x134>
				framebuffer_draw_pixel(x+(int)((double)i*multDiff),y+i, color);
    1c76:	4b32      	ldr	r3, [pc, #200]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1c78:	6978      	ldr	r0, [r7, #20]
    1c7a:	4798      	blx	r3
    1c7c:	1c02      	adds	r2, r0, #0
    1c7e:	1c0b      	adds	r3, r1, #0
    1c80:	4c32      	ldr	r4, [pc, #200]	; (1d4c <framebuffer_draw_line+0x1b4>)
    1c82:	1c10      	adds	r0, r2, #0
    1c84:	1c19      	adds	r1, r3, #0
    1c86:	69ba      	ldr	r2, [r7, #24]
    1c88:	69fb      	ldr	r3, [r7, #28]
    1c8a:	47a0      	blx	r4
    1c8c:	1c03      	adds	r3, r0, #0
    1c8e:	1c0c      	adds	r4, r1, #0
    1c90:	1c19      	adds	r1, r3, #0
    1c92:	1c22      	adds	r2, r4, #0
    1c94:	4b2e      	ldr	r3, [pc, #184]	; (1d50 <framebuffer_draw_line+0x1b8>)
    1c96:	1c08      	adds	r0, r1, #0
    1c98:	1c11      	adds	r1, r2, #0
    1c9a:	4798      	blx	r3
    1c9c:	1c03      	adds	r3, r0, #0
    1c9e:	b29a      	uxth	r2, r3
    1ca0:	1dbb      	adds	r3, r7, #6
    1ca2:	881b      	ldrh	r3, [r3, #0]
    1ca4:	18d3      	adds	r3, r2, r3
    1ca6:	b299      	uxth	r1, r3
    1ca8:	697b      	ldr	r3, [r7, #20]
    1caa:	b29a      	uxth	r2, r3
    1cac:	1d3b      	adds	r3, r7, #4
    1cae:	881b      	ldrh	r3, [r3, #0]
    1cb0:	18d3      	adds	r3, r2, r3
    1cb2:	b29a      	uxth	r2, r3
    1cb4:	2348      	movs	r3, #72	; 0x48
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	781b      	ldrb	r3, [r3, #0]
    1cba:	1c08      	adds	r0, r1, #0
    1cbc:	1c11      	adds	r1, r2, #0
    1cbe:	1c1a      	adds	r2, r3, #0
    1cc0:	4b24      	ldr	r3, [pc, #144]	; (1d54 <framebuffer_draw_line+0x1bc>)
    1cc2:	4798      	blx	r3

		double multDiff;
		if (longLen==0.0) multDiff=(double)shortLen;
		else multDiff=(double)shortLen/(double)longLen;
		if (yLonger) {
			for (int i=0;i!=longLen;i+=incrementVal) {
    1cc4:	697a      	ldr	r2, [r7, #20]
    1cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1cc8:	18d3      	adds	r3, r2, r3
    1cca:	617b      	str	r3, [r7, #20]
    1ccc:	697a      	ldr	r2, [r7, #20]
    1cce:	6a3b      	ldr	r3, [r7, #32]
    1cd0:	429a      	cmp	r2, r3
    1cd2:	d1d0      	bne.n	1c76 <framebuffer_draw_line+0xde>
    1cd4:	e031      	b.n	1d3a <framebuffer_draw_line+0x1a2>
				framebuffer_draw_pixel(x+(int)((double)i*multDiff),y+i, color);
			}
			} else {
			for (int i=0;i!=longLen;i+=incrementVal) {
    1cd6:	2300      	movs	r3, #0
    1cd8:	613b      	str	r3, [r7, #16]
    1cda:	e02a      	b.n	1d32 <framebuffer_draw_line+0x19a>
				framebuffer_draw_pixel(x+i,y+(int)((double)i*multDiff), color);
    1cdc:	693b      	ldr	r3, [r7, #16]
    1cde:	b29a      	uxth	r2, r3
    1ce0:	1dbb      	adds	r3, r7, #6
    1ce2:	881b      	ldrh	r3, [r3, #0]
    1ce4:	18d3      	adds	r3, r2, r3
    1ce6:	b29d      	uxth	r5, r3
    1ce8:	4b15      	ldr	r3, [pc, #84]	; (1d40 <framebuffer_draw_line+0x1a8>)
    1cea:	6938      	ldr	r0, [r7, #16]
    1cec:	4798      	blx	r3
    1cee:	1c02      	adds	r2, r0, #0
    1cf0:	1c0b      	adds	r3, r1, #0
    1cf2:	4c16      	ldr	r4, [pc, #88]	; (1d4c <framebuffer_draw_line+0x1b4>)
    1cf4:	1c10      	adds	r0, r2, #0
    1cf6:	1c19      	adds	r1, r3, #0
    1cf8:	69ba      	ldr	r2, [r7, #24]
    1cfa:	69fb      	ldr	r3, [r7, #28]
    1cfc:	47a0      	blx	r4
    1cfe:	1c03      	adds	r3, r0, #0
    1d00:	1c0c      	adds	r4, r1, #0
    1d02:	1c19      	adds	r1, r3, #0
    1d04:	1c22      	adds	r2, r4, #0
    1d06:	4b12      	ldr	r3, [pc, #72]	; (1d50 <framebuffer_draw_line+0x1b8>)
    1d08:	1c08      	adds	r0, r1, #0
    1d0a:	1c11      	adds	r1, r2, #0
    1d0c:	4798      	blx	r3
    1d0e:	1c03      	adds	r3, r0, #0
    1d10:	b29a      	uxth	r2, r3
    1d12:	1d3b      	adds	r3, r7, #4
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	18d3      	adds	r3, r2, r3
    1d18:	b29a      	uxth	r2, r3
    1d1a:	2348      	movs	r3, #72	; 0x48
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	1c28      	adds	r0, r5, #0
    1d22:	1c11      	adds	r1, r2, #0
    1d24:	1c1a      	adds	r2, r3, #0
    1d26:	4b0b      	ldr	r3, [pc, #44]	; (1d54 <framebuffer_draw_line+0x1bc>)
    1d28:	4798      	blx	r3
		if (yLonger) {
			for (int i=0;i!=longLen;i+=incrementVal) {
				framebuffer_draw_pixel(x+(int)((double)i*multDiff),y+i, color);
			}
			} else {
			for (int i=0;i!=longLen;i+=incrementVal) {
    1d2a:	693a      	ldr	r2, [r7, #16]
    1d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d2e:	18d3      	adds	r3, r2, r3
    1d30:	613b      	str	r3, [r7, #16]
    1d32:	693a      	ldr	r2, [r7, #16]
    1d34:	6a3b      	ldr	r3, [r7, #32]
    1d36:	429a      	cmp	r2, r3
    1d38:	d1d0      	bne.n	1cdc <framebuffer_draw_line+0x144>
				framebuffer_draw_pixel(x+i,y+(int)((double)i*multDiff), color);
			}
		}
}
    1d3a:	46bd      	mov	sp, r7
    1d3c:	b00d      	add	sp, #52	; 0x34
    1d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d40:	00009d71 	.word	0x00009d71
    1d44:	00007899 	.word	0x00007899
    1d48:	00008861 	.word	0x00008861
    1d4c:	000090dd 	.word	0x000090dd
    1d50:	00009d05 	.word	0x00009d05
    1d54:	00001a7d 	.word	0x00001a7d

00001d58 <framebuffer_draw_rectangle>:

void framebuffer_draw_rectangle(uint16_t p1_x, uint16_t p1_y, uint16_t p2_x, uint16_t p2_y, uint8_t color)
{
    1d58:	b5b0      	push	{r4, r5, r7, lr}
    1d5a:	b084      	sub	sp, #16
    1d5c:	af02      	add	r7, sp, #8
    1d5e:	1c05      	adds	r5, r0, #0
    1d60:	1c0c      	adds	r4, r1, #0
    1d62:	1c10      	adds	r0, r2, #0
    1d64:	1c19      	adds	r1, r3, #0
    1d66:	1dbb      	adds	r3, r7, #6
    1d68:	1c2a      	adds	r2, r5, #0
    1d6a:	801a      	strh	r2, [r3, #0]
    1d6c:	1d3b      	adds	r3, r7, #4
    1d6e:	1c22      	adds	r2, r4, #0
    1d70:	801a      	strh	r2, [r3, #0]
    1d72:	1cbb      	adds	r3, r7, #2
    1d74:	1c02      	adds	r2, r0, #0
    1d76:	801a      	strh	r2, [r3, #0]
    1d78:	1c3b      	adds	r3, r7, #0
    1d7a:	1c0a      	adds	r2, r1, #0
    1d7c:	801a      	strh	r2, [r3, #0]
		framebuffer_draw_line(p1_x, p1_y, p2_x, p1_y, color);
    1d7e:	1dbb      	adds	r3, r7, #6
    1d80:	8818      	ldrh	r0, [r3, #0]
    1d82:	1d3b      	adds	r3, r7, #4
    1d84:	8819      	ldrh	r1, [r3, #0]
    1d86:	1cbb      	adds	r3, r7, #2
    1d88:	881a      	ldrh	r2, [r3, #0]
    1d8a:	1d3b      	adds	r3, r7, #4
    1d8c:	881c      	ldrh	r4, [r3, #0]
    1d8e:	2318      	movs	r3, #24
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	781b      	ldrb	r3, [r3, #0]
    1d94:	9300      	str	r3, [sp, #0]
    1d96:	1c23      	adds	r3, r4, #0
    1d98:	4c18      	ldr	r4, [pc, #96]	; (1dfc <framebuffer_draw_rectangle+0xa4>)
    1d9a:	47a0      	blx	r4
		framebuffer_draw_line(p2_x, p1_y, p2_x, p2_y, color);
    1d9c:	1cbb      	adds	r3, r7, #2
    1d9e:	8818      	ldrh	r0, [r3, #0]
    1da0:	1d3b      	adds	r3, r7, #4
    1da2:	8819      	ldrh	r1, [r3, #0]
    1da4:	1cbb      	adds	r3, r7, #2
    1da6:	881a      	ldrh	r2, [r3, #0]
    1da8:	1c3b      	adds	r3, r7, #0
    1daa:	881c      	ldrh	r4, [r3, #0]
    1dac:	2318      	movs	r3, #24
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	9300      	str	r3, [sp, #0]
    1db4:	1c23      	adds	r3, r4, #0
    1db6:	4c11      	ldr	r4, [pc, #68]	; (1dfc <framebuffer_draw_rectangle+0xa4>)
    1db8:	47a0      	blx	r4
		framebuffer_draw_line(p2_x, p2_y, p1_x, p2_y, color);
    1dba:	1cbb      	adds	r3, r7, #2
    1dbc:	8818      	ldrh	r0, [r3, #0]
    1dbe:	1c3b      	adds	r3, r7, #0
    1dc0:	8819      	ldrh	r1, [r3, #0]
    1dc2:	1dbb      	adds	r3, r7, #6
    1dc4:	881a      	ldrh	r2, [r3, #0]
    1dc6:	1c3b      	adds	r3, r7, #0
    1dc8:	881c      	ldrh	r4, [r3, #0]
    1dca:	2318      	movs	r3, #24
    1dcc:	18fb      	adds	r3, r7, r3
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	9300      	str	r3, [sp, #0]
    1dd2:	1c23      	adds	r3, r4, #0
    1dd4:	4c09      	ldr	r4, [pc, #36]	; (1dfc <framebuffer_draw_rectangle+0xa4>)
    1dd6:	47a0      	blx	r4
		framebuffer_draw_line(p1_x, p2_y, p1_x, p1_y, color);
    1dd8:	1dbb      	adds	r3, r7, #6
    1dda:	8818      	ldrh	r0, [r3, #0]
    1ddc:	1c3b      	adds	r3, r7, #0
    1dde:	8819      	ldrh	r1, [r3, #0]
    1de0:	1dbb      	adds	r3, r7, #6
    1de2:	881a      	ldrh	r2, [r3, #0]
    1de4:	1d3b      	adds	r3, r7, #4
    1de6:	881c      	ldrh	r4, [r3, #0]
    1de8:	2318      	movs	r3, #24
    1dea:	18fb      	adds	r3, r7, r3
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	9300      	str	r3, [sp, #0]
    1df0:	1c23      	adds	r3, r4, #0
    1df2:	4c02      	ldr	r4, [pc, #8]	; (1dfc <framebuffer_draw_rectangle+0xa4>)
    1df4:	47a0      	blx	r4
}
    1df6:	46bd      	mov	sp, r7
    1df8:	b002      	add	sp, #8
    1dfa:	bdb0      	pop	{r4, r5, r7, pc}
    1dfc:	00001b99 	.word	0x00001b99

00001e00 <framebuffer_draw_rectangle_filled>:


void framebuffer_draw_rectangle_filled(uint16_t p1_x, uint16_t p1_y, uint16_t p2_x, uint16_t p2_y, uint8_t color)
{
    1e00:	b5b0      	push	{r4, r5, r7, lr}
    1e02:	b088      	sub	sp, #32
    1e04:	af02      	add	r7, sp, #8
    1e06:	1c05      	adds	r5, r0, #0
    1e08:	1c0c      	adds	r4, r1, #0
    1e0a:	1c10      	adds	r0, r2, #0
    1e0c:	1c19      	adds	r1, r3, #0
    1e0e:	1dbb      	adds	r3, r7, #6
    1e10:	1c2a      	adds	r2, r5, #0
    1e12:	801a      	strh	r2, [r3, #0]
    1e14:	1d3b      	adds	r3, r7, #4
    1e16:	1c22      	adds	r2, r4, #0
    1e18:	801a      	strh	r2, [r3, #0]
    1e1a:	1cbb      	adds	r3, r7, #2
    1e1c:	1c02      	adds	r2, r0, #0
    1e1e:	801a      	strh	r2, [r3, #0]
    1e20:	1c3b      	adds	r3, r7, #0
    1e22:	1c0a      	adds	r2, r1, #0
    1e24:	801a      	strh	r2, [r3, #0]
	uint16_t x1, x2, y1, y2;
	
	if(p2_y < p1_y){
    1e26:	1c3a      	adds	r2, r7, #0
    1e28:	1d3b      	adds	r3, r7, #4
    1e2a:	8812      	ldrh	r2, [r2, #0]
    1e2c:	881b      	ldrh	r3, [r3, #0]
    1e2e:	429a      	cmp	r2, r3
    1e30:	d214      	bcs.n	1e5c <framebuffer_draw_rectangle_filled+0x5c>
		x1 = p2_x;
    1e32:	2316      	movs	r3, #22
    1e34:	18fb      	adds	r3, r7, r3
    1e36:	1cba      	adds	r2, r7, #2
    1e38:	8812      	ldrh	r2, [r2, #0]
    1e3a:	801a      	strh	r2, [r3, #0]
		x2 = p1_x;
    1e3c:	2314      	movs	r3, #20
    1e3e:	18fb      	adds	r3, r7, r3
    1e40:	1dba      	adds	r2, r7, #6
    1e42:	8812      	ldrh	r2, [r2, #0]
    1e44:	801a      	strh	r2, [r3, #0]
		y1 = p2_y;
    1e46:	2312      	movs	r3, #18
    1e48:	18fb      	adds	r3, r7, r3
    1e4a:	1c3a      	adds	r2, r7, #0
    1e4c:	8812      	ldrh	r2, [r2, #0]
    1e4e:	801a      	strh	r2, [r3, #0]
		y2 = p1_y;
    1e50:	2310      	movs	r3, #16
    1e52:	18fb      	adds	r3, r7, r3
    1e54:	1d3a      	adds	r2, r7, #4
    1e56:	8812      	ldrh	r2, [r2, #0]
    1e58:	801a      	strh	r2, [r3, #0]
    1e5a:	e013      	b.n	1e84 <framebuffer_draw_rectangle_filled+0x84>
	}else{
		x1 = p1_x;
    1e5c:	2316      	movs	r3, #22
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	1dba      	adds	r2, r7, #6
    1e62:	8812      	ldrh	r2, [r2, #0]
    1e64:	801a      	strh	r2, [r3, #0]
		x2 = p2_x;
    1e66:	2314      	movs	r3, #20
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	1cba      	adds	r2, r7, #2
    1e6c:	8812      	ldrh	r2, [r2, #0]
    1e6e:	801a      	strh	r2, [r3, #0]
		y1 = p1_y;
    1e70:	2312      	movs	r3, #18
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	1d3a      	adds	r2, r7, #4
    1e76:	8812      	ldrh	r2, [r2, #0]
    1e78:	801a      	strh	r2, [r3, #0]
		y2 = p2_y;
    1e7a:	2310      	movs	r3, #16
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	1c3a      	adds	r2, r7, #0
    1e80:	8812      	ldrh	r2, [r2, #0]
    1e82:	801a      	strh	r2, [r3, #0]
	}
	
	for(uint16_t i = y1 ; i < y2 ; i++){
    1e84:	230e      	movs	r3, #14
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	2212      	movs	r2, #18
    1e8a:	18ba      	adds	r2, r7, r2
    1e8c:	8812      	ldrh	r2, [r2, #0]
    1e8e:	801a      	strh	r2, [r3, #0]
    1e90:	e019      	b.n	1ec6 <framebuffer_draw_rectangle_filled+0xc6>
		framebuffer_draw_line(x1, i, x2, i, color);
    1e92:	2316      	movs	r3, #22
    1e94:	18fb      	adds	r3, r7, r3
    1e96:	8818      	ldrh	r0, [r3, #0]
    1e98:	230e      	movs	r3, #14
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	8819      	ldrh	r1, [r3, #0]
    1e9e:	2314      	movs	r3, #20
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	881a      	ldrh	r2, [r3, #0]
    1ea4:	230e      	movs	r3, #14
    1ea6:	18fb      	adds	r3, r7, r3
    1ea8:	881c      	ldrh	r4, [r3, #0]
    1eaa:	2328      	movs	r3, #40	; 0x28
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	9300      	str	r3, [sp, #0]
    1eb2:	1c23      	adds	r3, r4, #0
    1eb4:	4c09      	ldr	r4, [pc, #36]	; (1edc <framebuffer_draw_rectangle_filled+0xdc>)
    1eb6:	47a0      	blx	r4
		x2 = p2_x;
		y1 = p1_y;
		y2 = p2_y;
	}
	
	for(uint16_t i = y1 ; i < y2 ; i++){
    1eb8:	230e      	movs	r3, #14
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	881a      	ldrh	r2, [r3, #0]
    1ebe:	230e      	movs	r3, #14
    1ec0:	18fb      	adds	r3, r7, r3
    1ec2:	3201      	adds	r2, #1
    1ec4:	801a      	strh	r2, [r3, #0]
    1ec6:	230e      	movs	r3, #14
    1ec8:	18fa      	adds	r2, r7, r3
    1eca:	2310      	movs	r3, #16
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	8812      	ldrh	r2, [r2, #0]
    1ed0:	881b      	ldrh	r3, [r3, #0]
    1ed2:	429a      	cmp	r2, r3
    1ed4:	d3dd      	bcc.n	1e92 <framebuffer_draw_rectangle_filled+0x92>
		framebuffer_draw_line(x1, i, x2, i, color);
	}
	
}
    1ed6:	46bd      	mov	sp, r7
    1ed8:	b006      	add	sp, #24
    1eda:	bdb0      	pop	{r4, r5, r7, pc}
    1edc:	00001b99 	.word	0x00001b99

00001ee0 <framebuffer_draw_circle>:


void framebuffer_draw_circle(uint16_t x, uint16_t y, uint16_t r, uint8_t color)
{
    1ee0:	b5b0      	push	{r4, r5, r7, lr}
    1ee2:	b08a      	sub	sp, #40	; 0x28
    1ee4:	af00      	add	r7, sp, #0
    1ee6:	1c05      	adds	r5, r0, #0
    1ee8:	1c0c      	adds	r4, r1, #0
    1eea:	1c10      	adds	r0, r2, #0
    1eec:	1c19      	adds	r1, r3, #0
    1eee:	1dbb      	adds	r3, r7, #6
    1ef0:	1c2a      	adds	r2, r5, #0
    1ef2:	801a      	strh	r2, [r3, #0]
    1ef4:	1d3b      	adds	r3, r7, #4
    1ef6:	1c22      	adds	r2, r4, #0
    1ef8:	801a      	strh	r2, [r3, #0]
    1efa:	1cbb      	adds	r3, r7, #2
    1efc:	1c02      	adds	r2, r0, #0
    1efe:	801a      	strh	r2, [r3, #0]
    1f00:	1c7b      	adds	r3, r7, #1
    1f02:	1c0a      	adds	r2, r1, #0
    1f04:	701a      	strb	r2, [r3, #0]

	
	int pos_x,
	pos_y = -r,
    1f06:	1cbb      	adds	r3, r7, #2
    1f08:	881b      	ldrh	r3, [r3, #0]
    1f0a:	425b      	negs	r3, r3
    1f0c:	623b      	str	r3, [r7, #32]
	tx = 0,
    1f0e:	2300      	movs	r3, #0
    1f10:	61fb      	str	r3, [r7, #28]
	ty = 4*r,
    1f12:	1cbb      	adds	r3, r7, #2
    1f14:	881b      	ldrh	r3, [r3, #0]
    1f16:	009b      	lsls	r3, r3, #2
    1f18:	61bb      	str	r3, [r7, #24]
	a = 0,
    1f1a:	2300      	movs	r3, #0
    1f1c:	617b      	str	r3, [r7, #20]
	b = 2*ty+9,
    1f1e:	69bb      	ldr	r3, [r7, #24]
    1f20:	005b      	lsls	r3, r3, #1
    1f22:	3309      	adds	r3, #9
    1f24:	613b      	str	r3, [r7, #16]
	x1 = (int)r*0.707010678 + 0.5;
    1f26:	1cbb      	adds	r3, r7, #2
    1f28:	881a      	ldrh	r2, [r3, #0]
    1f2a:	4bb1      	ldr	r3, [pc, #708]	; (21f0 <STACK_SIZE+0x1f0>)
    1f2c:	1c10      	adds	r0, r2, #0
    1f2e:	4798      	blx	r3
    1f30:	1c02      	adds	r2, r0, #0
    1f32:	1c0b      	adds	r3, r1, #0
    1f34:	4caf      	ldr	r4, [pc, #700]	; (21f4 <STACK_SIZE+0x1f4>)
    1f36:	1c10      	adds	r0, r2, #0
    1f38:	1c19      	adds	r1, r3, #0
    1f3a:	4aaf      	ldr	r2, [pc, #700]	; (21f8 <STACK_SIZE+0x1f8>)
    1f3c:	4baf      	ldr	r3, [pc, #700]	; (21fc <STACK_SIZE+0x1fc>)
    1f3e:	47a0      	blx	r4
    1f40:	1c03      	adds	r3, r0, #0
    1f42:	1c0c      	adds	r4, r1, #0
    1f44:	1c1a      	adds	r2, r3, #0
    1f46:	1c23      	adds	r3, r4, #0
    1f48:	4cad      	ldr	r4, [pc, #692]	; (2200 <STACK_SIZE+0x200>)
    1f4a:	1c10      	adds	r0, r2, #0
    1f4c:	1c19      	adds	r1, r3, #0
    1f4e:	2200      	movs	r2, #0
    1f50:	4bac      	ldr	r3, [pc, #688]	; (2204 <STACK_SIZE+0x204>)
    1f52:	47a0      	blx	r4
    1f54:	1c03      	adds	r3, r0, #0
    1f56:	1c0c      	adds	r4, r1, #0
    1f58:	1c19      	adds	r1, r3, #0
    1f5a:	1c22      	adds	r2, r4, #0
    1f5c:	4baa      	ldr	r3, [pc, #680]	; (2208 <STACK_SIZE+0x208>)
    1f5e:	1c08      	adds	r0, r1, #0
    1f60:	1c11      	adds	r1, r2, #0
    1f62:	4798      	blx	r3
    1f64:	1c03      	adds	r3, r0, #0
    1f66:	60fb      	str	r3, [r7, #12]
	
	framebuffer_draw_pixel(x+r,y,color);
    1f68:	1dba      	adds	r2, r7, #6
    1f6a:	1cbb      	adds	r3, r7, #2
    1f6c:	8812      	ldrh	r2, [r2, #0]
    1f6e:	881b      	ldrh	r3, [r3, #0]
    1f70:	18d3      	adds	r3, r2, r3
    1f72:	b299      	uxth	r1, r3
    1f74:	1d3b      	adds	r3, r7, #4
    1f76:	881a      	ldrh	r2, [r3, #0]
    1f78:	1c7b      	adds	r3, r7, #1
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	1c08      	adds	r0, r1, #0
    1f7e:	1c11      	adds	r1, r2, #0
    1f80:	1c1a      	adds	r2, r3, #0
    1f82:	4ba2      	ldr	r3, [pc, #648]	; (220c <STACK_SIZE+0x20c>)
    1f84:	4798      	blx	r3
	framebuffer_draw_pixel(x-r,y,color);
    1f86:	1dba      	adds	r2, r7, #6
    1f88:	1cbb      	adds	r3, r7, #2
    1f8a:	8812      	ldrh	r2, [r2, #0]
    1f8c:	881b      	ldrh	r3, [r3, #0]
    1f8e:	1ad3      	subs	r3, r2, r3
    1f90:	b299      	uxth	r1, r3
    1f92:	1d3b      	adds	r3, r7, #4
    1f94:	881a      	ldrh	r2, [r3, #0]
    1f96:	1c7b      	adds	r3, r7, #1
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	1c08      	adds	r0, r1, #0
    1f9c:	1c11      	adds	r1, r2, #0
    1f9e:	1c1a      	adds	r2, r3, #0
    1fa0:	4b9a      	ldr	r3, [pc, #616]	; (220c <STACK_SIZE+0x20c>)
    1fa2:	4798      	blx	r3
	framebuffer_draw_pixel(x,y+r,color);
    1fa4:	1d3a      	adds	r2, r7, #4
    1fa6:	1cbb      	adds	r3, r7, #2
    1fa8:	8812      	ldrh	r2, [r2, #0]
    1faa:	881b      	ldrh	r3, [r3, #0]
    1fac:	18d3      	adds	r3, r2, r3
    1fae:	b29a      	uxth	r2, r3
    1fb0:	1dbb      	adds	r3, r7, #6
    1fb2:	8819      	ldrh	r1, [r3, #0]
    1fb4:	1c7b      	adds	r3, r7, #1
    1fb6:	781b      	ldrb	r3, [r3, #0]
    1fb8:	1c08      	adds	r0, r1, #0
    1fba:	1c11      	adds	r1, r2, #0
    1fbc:	1c1a      	adds	r2, r3, #0
    1fbe:	4b93      	ldr	r3, [pc, #588]	; (220c <STACK_SIZE+0x20c>)
    1fc0:	4798      	blx	r3
	framebuffer_draw_pixel(x,y-r,color);
    1fc2:	1d3a      	adds	r2, r7, #4
    1fc4:	1cbb      	adds	r3, r7, #2
    1fc6:	8812      	ldrh	r2, [r2, #0]
    1fc8:	881b      	ldrh	r3, [r3, #0]
    1fca:	1ad3      	subs	r3, r2, r3
    1fcc:	b29a      	uxth	r2, r3
    1fce:	1dbb      	adds	r3, r7, #6
    1fd0:	8819      	ldrh	r1, [r3, #0]
    1fd2:	1c7b      	adds	r3, r7, #1
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	1c08      	adds	r0, r1, #0
    1fd8:	1c11      	adds	r1, r2, #0
    1fda:	1c1a      	adds	r2, r3, #0
    1fdc:	4b8b      	ldr	r3, [pc, #556]	; (220c <STACK_SIZE+0x20c>)
    1fde:	4798      	blx	r3
	framebuffer_draw_pixel(x+x1,y+x1,color);
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	b29a      	uxth	r2, r3
    1fe4:	1dbb      	adds	r3, r7, #6
    1fe6:	881b      	ldrh	r3, [r3, #0]
    1fe8:	18d3      	adds	r3, r2, r3
    1fea:	b299      	uxth	r1, r3
    1fec:	68fb      	ldr	r3, [r7, #12]
    1fee:	b29a      	uxth	r2, r3
    1ff0:	1d3b      	adds	r3, r7, #4
    1ff2:	881b      	ldrh	r3, [r3, #0]
    1ff4:	18d3      	adds	r3, r2, r3
    1ff6:	b29a      	uxth	r2, r3
    1ff8:	1c7b      	adds	r3, r7, #1
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	1c08      	adds	r0, r1, #0
    1ffe:	1c11      	adds	r1, r2, #0
    2000:	1c1a      	adds	r2, r3, #0
    2002:	4b82      	ldr	r3, [pc, #520]	; (220c <STACK_SIZE+0x20c>)
    2004:	4798      	blx	r3
	framebuffer_draw_pixel(x+x1,y-x1,color);
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	b29a      	uxth	r2, r3
    200a:	1dbb      	adds	r3, r7, #6
    200c:	881b      	ldrh	r3, [r3, #0]
    200e:	18d3      	adds	r3, r2, r3
    2010:	b299      	uxth	r1, r3
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	b29b      	uxth	r3, r3
    2016:	1d3a      	adds	r2, r7, #4
    2018:	8812      	ldrh	r2, [r2, #0]
    201a:	1ad3      	subs	r3, r2, r3
    201c:	b29a      	uxth	r2, r3
    201e:	1c7b      	adds	r3, r7, #1
    2020:	781b      	ldrb	r3, [r3, #0]
    2022:	1c08      	adds	r0, r1, #0
    2024:	1c11      	adds	r1, r2, #0
    2026:	1c1a      	adds	r2, r3, #0
    2028:	4b78      	ldr	r3, [pc, #480]	; (220c <STACK_SIZE+0x20c>)
    202a:	4798      	blx	r3
	framebuffer_draw_pixel(x-x1,y+x1,color);
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	b29b      	uxth	r3, r3
    2030:	1dba      	adds	r2, r7, #6
    2032:	8812      	ldrh	r2, [r2, #0]
    2034:	1ad3      	subs	r3, r2, r3
    2036:	b299      	uxth	r1, r3
    2038:	68fb      	ldr	r3, [r7, #12]
    203a:	b29a      	uxth	r2, r3
    203c:	1d3b      	adds	r3, r7, #4
    203e:	881b      	ldrh	r3, [r3, #0]
    2040:	18d3      	adds	r3, r2, r3
    2042:	b29a      	uxth	r2, r3
    2044:	1c7b      	adds	r3, r7, #1
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	1c08      	adds	r0, r1, #0
    204a:	1c11      	adds	r1, r2, #0
    204c:	1c1a      	adds	r2, r3, #0
    204e:	4b6f      	ldr	r3, [pc, #444]	; (220c <STACK_SIZE+0x20c>)
    2050:	4798      	blx	r3
	framebuffer_draw_pixel(x-x1,y-x1,color);
    2052:	68fb      	ldr	r3, [r7, #12]
    2054:	b29b      	uxth	r3, r3
    2056:	1dba      	adds	r2, r7, #6
    2058:	8812      	ldrh	r2, [r2, #0]
    205a:	1ad3      	subs	r3, r2, r3
    205c:	b299      	uxth	r1, r3
    205e:	68fb      	ldr	r3, [r7, #12]
    2060:	b29b      	uxth	r3, r3
    2062:	1d3a      	adds	r2, r7, #4
    2064:	8812      	ldrh	r2, [r2, #0]
    2066:	1ad3      	subs	r3, r2, r3
    2068:	b29a      	uxth	r2, r3
    206a:	1c7b      	adds	r3, r7, #1
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	1c08      	adds	r0, r1, #0
    2070:	1c11      	adds	r1, r2, #0
    2072:	1c1a      	adds	r2, r3, #0
    2074:	4b65      	ldr	r3, [pc, #404]	; (220c <STACK_SIZE+0x20c>)
    2076:	4798      	blx	r3
	
	for(pos_x = 1;pos_x < x1;pos_x++){
    2078:	2301      	movs	r3, #1
    207a:	627b      	str	r3, [r7, #36]	; 0x24
    207c:	e0af      	b.n	21de <STACK_SIZE+0x1de>
	a += 8;
    207e:	697b      	ldr	r3, [r7, #20]
    2080:	3308      	adds	r3, #8
    2082:	617b      	str	r3, [r7, #20]
	tx += a;
    2084:	69fa      	ldr	r2, [r7, #28]
    2086:	697b      	ldr	r3, [r7, #20]
    2088:	18d3      	adds	r3, r2, r3
    208a:	61fb      	str	r3, [r7, #28]
	if(tx > ty){
    208c:	69fa      	ldr	r2, [r7, #28]
    208e:	69bb      	ldr	r3, [r7, #24]
    2090:	429a      	cmp	r2, r3
    2092:	dd09      	ble.n	20a8 <STACK_SIZE+0xa8>
	pos_y++;
    2094:	6a3b      	ldr	r3, [r7, #32]
    2096:	3301      	adds	r3, #1
    2098:	623b      	str	r3, [r7, #32]
	b -= 8;
    209a:	693b      	ldr	r3, [r7, #16]
    209c:	3b08      	subs	r3, #8
    209e:	613b      	str	r3, [r7, #16]
	ty += b;
    20a0:	69ba      	ldr	r2, [r7, #24]
    20a2:	693b      	ldr	r3, [r7, #16]
    20a4:	18d3      	adds	r3, r2, r3
    20a6:	61bb      	str	r3, [r7, #24]
	}
	
	framebuffer_draw_pixel(x+pos_x,y+pos_y,color);
    20a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20aa:	b29a      	uxth	r2, r3
    20ac:	1dbb      	adds	r3, r7, #6
    20ae:	881b      	ldrh	r3, [r3, #0]
    20b0:	18d3      	adds	r3, r2, r3
    20b2:	b299      	uxth	r1, r3
    20b4:	6a3b      	ldr	r3, [r7, #32]
    20b6:	b29a      	uxth	r2, r3
    20b8:	1d3b      	adds	r3, r7, #4
    20ba:	881b      	ldrh	r3, [r3, #0]
    20bc:	18d3      	adds	r3, r2, r3
    20be:	b29a      	uxth	r2, r3
    20c0:	1c7b      	adds	r3, r7, #1
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	1c08      	adds	r0, r1, #0
    20c6:	1c11      	adds	r1, r2, #0
    20c8:	1c1a      	adds	r2, r3, #0
    20ca:	4b50      	ldr	r3, [pc, #320]	; (220c <STACK_SIZE+0x20c>)
    20cc:	4798      	blx	r3
	framebuffer_draw_pixel(x-pos_x,y+pos_y,color);
    20ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20d0:	b29b      	uxth	r3, r3
    20d2:	1dba      	adds	r2, r7, #6
    20d4:	8812      	ldrh	r2, [r2, #0]
    20d6:	1ad3      	subs	r3, r2, r3
    20d8:	b299      	uxth	r1, r3
    20da:	6a3b      	ldr	r3, [r7, #32]
    20dc:	b29a      	uxth	r2, r3
    20de:	1d3b      	adds	r3, r7, #4
    20e0:	881b      	ldrh	r3, [r3, #0]
    20e2:	18d3      	adds	r3, r2, r3
    20e4:	b29a      	uxth	r2, r3
    20e6:	1c7b      	adds	r3, r7, #1
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	1c08      	adds	r0, r1, #0
    20ec:	1c11      	adds	r1, r2, #0
    20ee:	1c1a      	adds	r2, r3, #0
    20f0:	4b46      	ldr	r3, [pc, #280]	; (220c <STACK_SIZE+0x20c>)
    20f2:	4798      	blx	r3
	
	framebuffer_draw_pixel(x+pos_x,y-pos_y,color);
    20f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20f6:	b29a      	uxth	r2, r3
    20f8:	1dbb      	adds	r3, r7, #6
    20fa:	881b      	ldrh	r3, [r3, #0]
    20fc:	18d3      	adds	r3, r2, r3
    20fe:	b299      	uxth	r1, r3
    2100:	6a3b      	ldr	r3, [r7, #32]
    2102:	b29b      	uxth	r3, r3
    2104:	1d3a      	adds	r2, r7, #4
    2106:	8812      	ldrh	r2, [r2, #0]
    2108:	1ad3      	subs	r3, r2, r3
    210a:	b29a      	uxth	r2, r3
    210c:	1c7b      	adds	r3, r7, #1
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	1c08      	adds	r0, r1, #0
    2112:	1c11      	adds	r1, r2, #0
    2114:	1c1a      	adds	r2, r3, #0
    2116:	4b3d      	ldr	r3, [pc, #244]	; (220c <STACK_SIZE+0x20c>)
    2118:	4798      	blx	r3
	framebuffer_draw_pixel(x-pos_x,y-pos_y,color);
    211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    211c:	b29b      	uxth	r3, r3
    211e:	1dba      	adds	r2, r7, #6
    2120:	8812      	ldrh	r2, [r2, #0]
    2122:	1ad3      	subs	r3, r2, r3
    2124:	b299      	uxth	r1, r3
    2126:	6a3b      	ldr	r3, [r7, #32]
    2128:	b29b      	uxth	r3, r3
    212a:	1d3a      	adds	r2, r7, #4
    212c:	8812      	ldrh	r2, [r2, #0]
    212e:	1ad3      	subs	r3, r2, r3
    2130:	b29a      	uxth	r2, r3
    2132:	1c7b      	adds	r3, r7, #1
    2134:	781b      	ldrb	r3, [r3, #0]
    2136:	1c08      	adds	r0, r1, #0
    2138:	1c11      	adds	r1, r2, #0
    213a:	1c1a      	adds	r2, r3, #0
    213c:	4b33      	ldr	r3, [pc, #204]	; (220c <STACK_SIZE+0x20c>)
    213e:	4798      	blx	r3
	
	framebuffer_draw_pixel(x+pos_y,y+pos_x,color);
    2140:	6a3b      	ldr	r3, [r7, #32]
    2142:	b29a      	uxth	r2, r3
    2144:	1dbb      	adds	r3, r7, #6
    2146:	881b      	ldrh	r3, [r3, #0]
    2148:	18d3      	adds	r3, r2, r3
    214a:	b299      	uxth	r1, r3
    214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    214e:	b29a      	uxth	r2, r3
    2150:	1d3b      	adds	r3, r7, #4
    2152:	881b      	ldrh	r3, [r3, #0]
    2154:	18d3      	adds	r3, r2, r3
    2156:	b29a      	uxth	r2, r3
    2158:	1c7b      	adds	r3, r7, #1
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	1c08      	adds	r0, r1, #0
    215e:	1c11      	adds	r1, r2, #0
    2160:	1c1a      	adds	r2, r3, #0
    2162:	4b2a      	ldr	r3, [pc, #168]	; (220c <STACK_SIZE+0x20c>)
    2164:	4798      	blx	r3
	framebuffer_draw_pixel(x-pos_y,y+pos_x,color);
    2166:	6a3b      	ldr	r3, [r7, #32]
    2168:	b29b      	uxth	r3, r3
    216a:	1dba      	adds	r2, r7, #6
    216c:	8812      	ldrh	r2, [r2, #0]
    216e:	1ad3      	subs	r3, r2, r3
    2170:	b299      	uxth	r1, r3
    2172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2174:	b29a      	uxth	r2, r3
    2176:	1d3b      	adds	r3, r7, #4
    2178:	881b      	ldrh	r3, [r3, #0]
    217a:	18d3      	adds	r3, r2, r3
    217c:	b29a      	uxth	r2, r3
    217e:	1c7b      	adds	r3, r7, #1
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	1c08      	adds	r0, r1, #0
    2184:	1c11      	adds	r1, r2, #0
    2186:	1c1a      	adds	r2, r3, #0
    2188:	4b20      	ldr	r3, [pc, #128]	; (220c <STACK_SIZE+0x20c>)
    218a:	4798      	blx	r3
	
	framebuffer_draw_pixel(x+pos_y,y-pos_x,color);
    218c:	6a3b      	ldr	r3, [r7, #32]
    218e:	b29a      	uxth	r2, r3
    2190:	1dbb      	adds	r3, r7, #6
    2192:	881b      	ldrh	r3, [r3, #0]
    2194:	18d3      	adds	r3, r2, r3
    2196:	b299      	uxth	r1, r3
    2198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    219a:	b29b      	uxth	r3, r3
    219c:	1d3a      	adds	r2, r7, #4
    219e:	8812      	ldrh	r2, [r2, #0]
    21a0:	1ad3      	subs	r3, r2, r3
    21a2:	b29a      	uxth	r2, r3
    21a4:	1c7b      	adds	r3, r7, #1
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	1c08      	adds	r0, r1, #0
    21aa:	1c11      	adds	r1, r2, #0
    21ac:	1c1a      	adds	r2, r3, #0
    21ae:	4b17      	ldr	r3, [pc, #92]	; (220c <STACK_SIZE+0x20c>)
    21b0:	4798      	blx	r3
	framebuffer_draw_pixel(x-pos_y,y-pos_x,color);
    21b2:	6a3b      	ldr	r3, [r7, #32]
    21b4:	b29b      	uxth	r3, r3
    21b6:	1dba      	adds	r2, r7, #6
    21b8:	8812      	ldrh	r2, [r2, #0]
    21ba:	1ad3      	subs	r3, r2, r3
    21bc:	b299      	uxth	r1, r3
    21be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21c0:	b29b      	uxth	r3, r3
    21c2:	1d3a      	adds	r2, r7, #4
    21c4:	8812      	ldrh	r2, [r2, #0]
    21c6:	1ad3      	subs	r3, r2, r3
    21c8:	b29a      	uxth	r2, r3
    21ca:	1c7b      	adds	r3, r7, #1
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	1c08      	adds	r0, r1, #0
    21d0:	1c11      	adds	r1, r2, #0
    21d2:	1c1a      	adds	r2, r3, #0
    21d4:	4b0d      	ldr	r3, [pc, #52]	; (220c <STACK_SIZE+0x20c>)
    21d6:	4798      	blx	r3
	framebuffer_draw_pixel(x+x1,y+x1,color);
	framebuffer_draw_pixel(x+x1,y-x1,color);
	framebuffer_draw_pixel(x-x1,y+x1,color);
	framebuffer_draw_pixel(x-x1,y-x1,color);
	
	for(pos_x = 1;pos_x < x1;pos_x++){
    21d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21da:	3301      	adds	r3, #1
    21dc:	627b      	str	r3, [r7, #36]	; 0x24
    21de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    21e0:	68fb      	ldr	r3, [r7, #12]
    21e2:	429a      	cmp	r2, r3
    21e4:	da00      	bge.n	21e8 <STACK_SIZE+0x1e8>
    21e6:	e74a      	b.n	207e <STACK_SIZE+0x7e>
	
	framebuffer_draw_pixel(x+pos_y,y-pos_x,color);
	framebuffer_draw_pixel(x-pos_y,y-pos_x,color);
	}
	
}
    21e8:	46bd      	mov	sp, r7
    21ea:	b00a      	add	sp, #40	; 0x28
    21ec:	bdb0      	pop	{r4, r5, r7, pc}
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	00009d71 	.word	0x00009d71
    21f4:	000090dd 	.word	0x000090dd
    21f8:	db7dd963 	.word	0xdb7dd963
    21fc:	3fe69fd4 	.word	0x3fe69fd4
    2200:	00008211 	.word	0x00008211
    2204:	3fe00000 	.word	0x3fe00000
    2208:	00009d05 	.word	0x00009d05
    220c:	00001a7d 	.word	0x00001a7d

00002210 <framebuffer_draw_circle_filled>:

void framebuffer_draw_circle_filled(uint16_t x, uint16_t y, uint16_t r, uint8_t color)
{
    2210:	b5b0      	push	{r4, r5, r7, lr}
    2212:	b086      	sub	sp, #24
    2214:	af00      	add	r7, sp, #0
    2216:	1c05      	adds	r5, r0, #0
    2218:	1c0c      	adds	r4, r1, #0
    221a:	1c10      	adds	r0, r2, #0
    221c:	1c19      	adds	r1, r3, #0
    221e:	1dbb      	adds	r3, r7, #6
    2220:	1c2a      	adds	r2, r5, #0
    2222:	801a      	strh	r2, [r3, #0]
    2224:	1d3b      	adds	r3, r7, #4
    2226:	1c22      	adds	r2, r4, #0
    2228:	801a      	strh	r2, [r3, #0]
    222a:	1cbb      	adds	r3, r7, #2
    222c:	1c02      	adds	r2, r0, #0
    222e:	801a      	strh	r2, [r3, #0]
    2230:	1c7b      	adds	r3, r7, #1
    2232:	1c0a      	adds	r2, r1, #0
    2234:	701a      	strb	r2, [r3, #0]
	for (int i = -r; i < r ; i++)
    2236:	1cbb      	adds	r3, r7, #2
    2238:	881b      	ldrh	r3, [r3, #0]
    223a:	425b      	negs	r3, r3
    223c:	617b      	str	r3, [r7, #20]
    223e:	e03a      	b.n	22b6 <framebuffer_draw_circle_filled+0xa6>
	{
		int height = (int)sqrt(r * r - i * i);
    2240:	1cbb      	adds	r3, r7, #2
    2242:	881b      	ldrh	r3, [r3, #0]
    2244:	1cba      	adds	r2, r7, #2
    2246:	8812      	ldrh	r2, [r2, #0]
    2248:	435a      	muls	r2, r3
    224a:	697b      	ldr	r3, [r7, #20]
    224c:	6979      	ldr	r1, [r7, #20]
    224e:	434b      	muls	r3, r1
    2250:	1ad2      	subs	r2, r2, r3
    2252:	4b1d      	ldr	r3, [pc, #116]	; (22c8 <framebuffer_draw_circle_filled+0xb8>)
    2254:	1c10      	adds	r0, r2, #0
    2256:	4798      	blx	r3
    2258:	1c03      	adds	r3, r0, #0
    225a:	1c0c      	adds	r4, r1, #0
    225c:	1c18      	adds	r0, r3, #0
    225e:	1c21      	adds	r1, r4, #0
    2260:	4b1a      	ldr	r3, [pc, #104]	; (22cc <framebuffer_draw_circle_filled+0xbc>)
    2262:	4798      	blx	r3
    2264:	1c0a      	adds	r2, r1, #0
    2266:	1c01      	adds	r1, r0, #0
    2268:	4b19      	ldr	r3, [pc, #100]	; (22d0 <framebuffer_draw_circle_filled+0xc0>)
    226a:	1c08      	adds	r0, r1, #0
    226c:	1c11      	adds	r1, r2, #0
    226e:	4798      	blx	r3
    2270:	1c03      	adds	r3, r0, #0
    2272:	60fb      	str	r3, [r7, #12]

		for (int j = -height; j < height; j++){
    2274:	68fb      	ldr	r3, [r7, #12]
    2276:	425b      	negs	r3, r3
    2278:	613b      	str	r3, [r7, #16]
    227a:	e015      	b.n	22a8 <framebuffer_draw_circle_filled+0x98>
			framebuffer_draw_pixel(i + x, j + y, color);
    227c:	697b      	ldr	r3, [r7, #20]
    227e:	b29a      	uxth	r2, r3
    2280:	1dbb      	adds	r3, r7, #6
    2282:	881b      	ldrh	r3, [r3, #0]
    2284:	18d3      	adds	r3, r2, r3
    2286:	b299      	uxth	r1, r3
    2288:	693b      	ldr	r3, [r7, #16]
    228a:	b29a      	uxth	r2, r3
    228c:	1d3b      	adds	r3, r7, #4
    228e:	881b      	ldrh	r3, [r3, #0]
    2290:	18d3      	adds	r3, r2, r3
    2292:	b29a      	uxth	r2, r3
    2294:	1c7b      	adds	r3, r7, #1
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	1c08      	adds	r0, r1, #0
    229a:	1c11      	adds	r1, r2, #0
    229c:	1c1a      	adds	r2, r3, #0
    229e:	4b0d      	ldr	r3, [pc, #52]	; (22d4 <framebuffer_draw_circle_filled+0xc4>)
    22a0:	4798      	blx	r3
{
	for (int i = -r; i < r ; i++)
	{
		int height = (int)sqrt(r * r - i * i);

		for (int j = -height; j < height; j++){
    22a2:	693b      	ldr	r3, [r7, #16]
    22a4:	3301      	adds	r3, #1
    22a6:	613b      	str	r3, [r7, #16]
    22a8:	693a      	ldr	r2, [r7, #16]
    22aa:	68fb      	ldr	r3, [r7, #12]
    22ac:	429a      	cmp	r2, r3
    22ae:	dbe5      	blt.n	227c <framebuffer_draw_circle_filled+0x6c>
	
}

void framebuffer_draw_circle_filled(uint16_t x, uint16_t y, uint16_t r, uint8_t color)
{
	for (int i = -r; i < r ; i++)
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	3301      	adds	r3, #1
    22b4:	617b      	str	r3, [r7, #20]
    22b6:	1cbb      	adds	r3, r7, #2
    22b8:	881a      	ldrh	r2, [r3, #0]
    22ba:	697b      	ldr	r3, [r7, #20]
    22bc:	429a      	cmp	r2, r3
    22be:	dcbf      	bgt.n	2240 <framebuffer_draw_circle_filled+0x30>

		for (int j = -height; j < height; j++){
			framebuffer_draw_pixel(i + x, j + y, color);
		}
	}
}
    22c0:	46bd      	mov	sp, r7
    22c2:	b006      	add	sp, #24
    22c4:	bdb0      	pop	{r4, r5, r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	00009d71 	.word	0x00009d71
    22cc:	00007451 	.word	0x00007451
    22d0:	00009d05 	.word	0x00009d05
    22d4:	00001a7d 	.word	0x00001a7d

000022d8 <framebuffer_draw_text_8pt>:

void framebuffer_draw_text_8pt(uint16_t x, uint16_t y, uint8_t *text, uint8_t color)
{
    22d8:	b590      	push	{r4, r7, lr}
    22da:	b089      	sub	sp, #36	; 0x24
    22dc:	af00      	add	r7, sp, #0
    22de:	1c04      	adds	r4, r0, #0
    22e0:	1c08      	adds	r0, r1, #0
    22e2:	60ba      	str	r2, [r7, #8]
    22e4:	1c19      	adds	r1, r3, #0
    22e6:	230e      	movs	r3, #14
    22e8:	18fb      	adds	r3, r7, r3
    22ea:	1c22      	adds	r2, r4, #0
    22ec:	801a      	strh	r2, [r3, #0]
    22ee:	230c      	movs	r3, #12
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	1c02      	adds	r2, r0, #0
    22f4:	801a      	strh	r2, [r3, #0]
    22f6:	1dfb      	adds	r3, r7, #7
    22f8:	1c0a      	adds	r2, r1, #0
    22fa:	701a      	strb	r2, [r3, #0]
	uint8_t height = 12;
    22fc:	2317      	movs	r3, #23
    22fe:	18fb      	adds	r3, r7, r3
    2300:	220c      	movs	r2, #12
    2302:	701a      	strb	r2, [r3, #0]
	uint8_t offset = 87-32;
    2304:	2316      	movs	r3, #22
    2306:	18fb      	adds	r3, r7, r3
    2308:	2237      	movs	r2, #55	; 0x37
    230a:	701a      	strb	r2, [r3, #0]
	uint8_t width = Roboto_Thin10x12[offset];
    230c:	2316      	movs	r3, #22
    230e:	18fb      	adds	r3, r7, r3
    2310:	781a      	ldrb	r2, [r3, #0]
    2312:	2315      	movs	r3, #21
    2314:	18fb      	adds	r3, r7, r3
    2316:	4942      	ldr	r1, [pc, #264]	; (2420 <framebuffer_draw_text_8pt+0x148>)
    2318:	5c8a      	ldrb	r2, [r1, r2]
    231a:	701a      	strb	r2, [r3, #0]
	
	for(uint16_t i = 0; i < width ; i += 2){
    231c:	231e      	movs	r3, #30
    231e:	18fb      	adds	r3, r7, r3
    2320:	2200      	movs	r2, #0
    2322:	801a      	strh	r2, [r3, #0]
    2324:	e06e      	b.n	2404 <framebuffer_draw_text_8pt+0x12c>
		uint8_t col_top = Roboto_Thin10x12[offset + 1 + i];
    2326:	2316      	movs	r3, #22
    2328:	18fb      	adds	r3, r7, r3
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	1c5a      	adds	r2, r3, #1
    232e:	231e      	movs	r3, #30
    2330:	18fb      	adds	r3, r7, r3
    2332:	881b      	ldrh	r3, [r3, #0]
    2334:	18d2      	adds	r2, r2, r3
    2336:	2314      	movs	r3, #20
    2338:	18fb      	adds	r3, r7, r3
    233a:	4939      	ldr	r1, [pc, #228]	; (2420 <framebuffer_draw_text_8pt+0x148>)
    233c:	5c8a      	ldrb	r2, [r1, r2]
    233e:	701a      	strb	r2, [r3, #0]
		uint8_t col_bottom = Roboto_Thin10x12[offset + 2 + i];
    2340:	2316      	movs	r3, #22
    2342:	18fb      	adds	r3, r7, r3
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	1c9a      	adds	r2, r3, #2
    2348:	231e      	movs	r3, #30
    234a:	18fb      	adds	r3, r7, r3
    234c:	881b      	ldrh	r3, [r3, #0]
    234e:	18d2      	adds	r2, r2, r3
    2350:	2313      	movs	r3, #19
    2352:	18fb      	adds	r3, r7, r3
    2354:	4932      	ldr	r1, [pc, #200]	; (2420 <framebuffer_draw_text_8pt+0x148>)
    2356:	5c8a      	ldrb	r2, [r1, r2]
    2358:	701a      	strb	r2, [r3, #0]
		uint8_t mask = 0b00000001;
    235a:	231d      	movs	r3, #29
    235c:	18fb      	adds	r3, r7, r3
    235e:	2201      	movs	r2, #1
    2360:	701a      	strb	r2, [r3, #0]
		
		for(uint16_t j = 0 ; j < 8 ; j++){
    2362:	231a      	movs	r3, #26
    2364:	18fb      	adds	r3, r7, r3
    2366:	2200      	movs	r2, #0
    2368:	801a      	strh	r2, [r3, #0]
    236a:	e02e      	b.n	23ca <framebuffer_draw_text_8pt+0xf2>
			
			if (col_top & mask){
    236c:	2314      	movs	r3, #20
    236e:	18fb      	adds	r3, r7, r3
    2370:	221d      	movs	r2, #29
    2372:	18ba      	adds	r2, r7, r2
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	7812      	ldrb	r2, [r2, #0]
    2378:	4013      	ands	r3, r2
    237a:	b2db      	uxtb	r3, r3
    237c:	2b00      	cmp	r3, #0
    237e:	d016      	beq.n	23ae <framebuffer_draw_text_8pt+0xd6>
				framebuffer_draw_pixel(x+i, y+j, color);
    2380:	230e      	movs	r3, #14
    2382:	18fa      	adds	r2, r7, r3
    2384:	231e      	movs	r3, #30
    2386:	18fb      	adds	r3, r7, r3
    2388:	8812      	ldrh	r2, [r2, #0]
    238a:	881b      	ldrh	r3, [r3, #0]
    238c:	18d3      	adds	r3, r2, r3
    238e:	b299      	uxth	r1, r3
    2390:	230c      	movs	r3, #12
    2392:	18fa      	adds	r2, r7, r3
    2394:	231a      	movs	r3, #26
    2396:	18fb      	adds	r3, r7, r3
    2398:	8812      	ldrh	r2, [r2, #0]
    239a:	881b      	ldrh	r3, [r3, #0]
    239c:	18d3      	adds	r3, r2, r3
    239e:	b29a      	uxth	r2, r3
    23a0:	1dfb      	adds	r3, r7, #7
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	1c08      	adds	r0, r1, #0
    23a6:	1c11      	adds	r1, r2, #0
    23a8:	1c1a      	adds	r2, r3, #0
    23aa:	4b1e      	ldr	r3, [pc, #120]	; (2424 <framebuffer_draw_text_8pt+0x14c>)
    23ac:	4798      	blx	r3
			}
			
			mask <<= 1;//(mask << 1);
    23ae:	231d      	movs	r3, #29
    23b0:	18fa      	adds	r2, r7, r3
    23b2:	231d      	movs	r3, #29
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	18db      	adds	r3, r3, r3
    23ba:	7013      	strb	r3, [r2, #0]
	for(uint16_t i = 0; i < width ; i += 2){
		uint8_t col_top = Roboto_Thin10x12[offset + 1 + i];
		uint8_t col_bottom = Roboto_Thin10x12[offset + 2 + i];
		uint8_t mask = 0b00000001;
		
		for(uint16_t j = 0 ; j < 8 ; j++){
    23bc:	231a      	movs	r3, #26
    23be:	18fb      	adds	r3, r7, r3
    23c0:	881a      	ldrh	r2, [r3, #0]
    23c2:	231a      	movs	r3, #26
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	3201      	adds	r2, #1
    23c8:	801a      	strh	r2, [r3, #0]
    23ca:	231a      	movs	r3, #26
    23cc:	18fb      	adds	r3, r7, r3
    23ce:	881b      	ldrh	r3, [r3, #0]
    23d0:	2b07      	cmp	r3, #7
    23d2:	d9cb      	bls.n	236c <framebuffer_draw_text_8pt+0x94>
			}
			
			mask <<= 1;//(mask << 1);
		}
		
		for(uint16_t j = 0 ; j < 4 ; j++){
    23d4:	2318      	movs	r3, #24
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	2200      	movs	r2, #0
    23da:	801a      	strh	r2, [r3, #0]
    23dc:	e006      	b.n	23ec <framebuffer_draw_text_8pt+0x114>
    23de:	2318      	movs	r3, #24
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	881a      	ldrh	r2, [r3, #0]
    23e4:	2318      	movs	r3, #24
    23e6:	18fb      	adds	r3, r7, r3
    23e8:	3201      	adds	r2, #1
    23ea:	801a      	strh	r2, [r3, #0]
    23ec:	2318      	movs	r3, #24
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	881b      	ldrh	r3, [r3, #0]
    23f2:	2b03      	cmp	r3, #3
    23f4:	d9f3      	bls.n	23de <framebuffer_draw_text_8pt+0x106>
{
	uint8_t height = 12;
	uint8_t offset = 87-32;
	uint8_t width = Roboto_Thin10x12[offset];
	
	for(uint16_t i = 0; i < width ; i += 2){
    23f6:	231e      	movs	r3, #30
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	221e      	movs	r2, #30
    23fc:	18ba      	adds	r2, r7, r2
    23fe:	8812      	ldrh	r2, [r2, #0]
    2400:	3202      	adds	r2, #2
    2402:	801a      	strh	r2, [r3, #0]
    2404:	2315      	movs	r3, #21
    2406:	18fb      	adds	r3, r7, r3
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	b29b      	uxth	r3, r3
    240c:	221e      	movs	r2, #30
    240e:	18ba      	adds	r2, r7, r2
    2410:	8812      	ldrh	r2, [r2, #0]
    2412:	429a      	cmp	r2, r3
    2414:	d200      	bcs.n	2418 <framebuffer_draw_text_8pt+0x140>
    2416:	e786      	b.n	2326 <framebuffer_draw_text_8pt+0x4e>
		
		for(uint16_t j = 0 ; j < 4 ; j++){

		}
	}	
}
    2418:	46bd      	mov	sp, r7
    241a:	b009      	add	sp, #36	; 0x24
    241c:	bd90      	pop	{r4, r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	0000a0c8 	.word	0x0000a0c8
    2424:	00001a7d 	.word	0x00001a7d

00002428 <reverse_byte>:

unsigned char reverse_byte(unsigned char input)
{
    2428:	b580      	push	{r7, lr}
    242a:	b082      	sub	sp, #8
    242c:	af00      	add	r7, sp, #0
    242e:	1c02      	adds	r2, r0, #0
    2430:	1dfb      	adds	r3, r7, #7
    2432:	701a      	strb	r2, [r3, #0]
		0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
		0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
		0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
		0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
	};
	return table[input];
    2434:	1dfb      	adds	r3, r7, #7
    2436:	781b      	ldrb	r3, [r3, #0]
    2438:	4a02      	ldr	r2, [pc, #8]	; (2444 <reverse_byte+0x1c>)
    243a:	5cd3      	ldrb	r3, [r2, r3]
    243c:	1c18      	adds	r0, r3, #0
    243e:	46bd      	mov	sp, r7
    2440:	b002      	add	sp, #8
    2442:	bd80      	pop	{r7, pc}
    2444:	00009fc8 	.word	0x00009fc8

00002448 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    2448:	b580      	push	{r7, lr}
    244a:	b082      	sub	sp, #8
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	095b      	lsrs	r3, r3, #5
}
    2454:	1c18      	adds	r0, r3, #0
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}

0000245c <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    245c:	b580      	push	{r7, lr}
    245e:	b082      	sub	sp, #8
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	01db      	lsls	r3, r3, #7
    2468:	4a03      	ldr	r2, [pc, #12]	; (2478 <arch_ioport_port_to_base+0x1c>)
    246a:	4694      	mov	ip, r2
    246c:	4463      	add	r3, ip
}
    246e:	1c18      	adds	r0, r3, #0
    2470:	46bd      	mov	sp, r7
    2472:	b002      	add	sp, #8
    2474:	bd80      	pop	{r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	41004400 	.word	0x41004400

0000247c <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    247c:	b580      	push	{r7, lr}
    247e:	b082      	sub	sp, #8
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	1c18      	adds	r0, r3, #0
    2488:	4b05      	ldr	r3, [pc, #20]	; (24a0 <arch_ioport_pin_to_base+0x24>)
    248a:	4798      	blx	r3
    248c:	1c03      	adds	r3, r0, #0
    248e:	1c18      	adds	r0, r3, #0
    2490:	4b04      	ldr	r3, [pc, #16]	; (24a4 <arch_ioport_pin_to_base+0x28>)
    2492:	4798      	blx	r3
    2494:	1c03      	adds	r3, r0, #0
}
    2496:	1c18      	adds	r0, r3, #0
    2498:	46bd      	mov	sp, r7
    249a:	b002      	add	sp, #8
    249c:	bd80      	pop	{r7, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	00002449 	.word	0x00002449
    24a4:	0000245d 	.word	0x0000245d

000024a8 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b082      	sub	sp, #8
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	221f      	movs	r2, #31
    24b4:	4013      	ands	r3, r2
    24b6:	2201      	movs	r2, #1
    24b8:	409a      	lsls	r2, r3
    24ba:	1c13      	adds	r3, r2, #0
}
    24bc:	1c18      	adds	r0, r3, #0
    24be:	46bd      	mov	sp, r7
    24c0:	b002      	add	sp, #8
    24c2:	bd80      	pop	{r7, pc}

000024c4 <arch_ioport_set_pin_level>:
	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    24c4:	b590      	push	{r4, r7, lr}
    24c6:	b083      	sub	sp, #12
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
    24cc:	1c0a      	adds	r2, r1, #0
    24ce:	1cfb      	adds	r3, r7, #3
    24d0:	701a      	strb	r2, [r3, #0]
	if (level) {
    24d2:	1cfb      	adds	r3, r7, #3
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d00b      	beq.n	24f2 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	1c18      	adds	r0, r3, #0
    24de:	4b0c      	ldr	r3, [pc, #48]	; (2510 <arch_ioport_set_pin_level+0x4c>)
    24e0:	4798      	blx	r3
    24e2:	1c04      	adds	r4, r0, #0
    24e4:	687b      	ldr	r3, [r7, #4]
    24e6:	1c18      	adds	r0, r3, #0
    24e8:	4b0a      	ldr	r3, [pc, #40]	; (2514 <arch_ioport_set_pin_level+0x50>)
    24ea:	4798      	blx	r3
    24ec:	1c03      	adds	r3, r0, #0
    24ee:	61a3      	str	r3, [r4, #24]
    24f0:	e00a      	b.n	2508 <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    24f2:	687b      	ldr	r3, [r7, #4]
    24f4:	1c18      	adds	r0, r3, #0
    24f6:	4b06      	ldr	r3, [pc, #24]	; (2510 <arch_ioport_set_pin_level+0x4c>)
    24f8:	4798      	blx	r3
    24fa:	1c04      	adds	r4, r0, #0
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	1c18      	adds	r0, r3, #0
    2500:	4b04      	ldr	r3, [pc, #16]	; (2514 <arch_ioport_set_pin_level+0x50>)
    2502:	4798      	blx	r3
    2504:	1c03      	adds	r3, r0, #0
    2506:	6163      	str	r3, [r4, #20]
	}
}
    2508:	46bd      	mov	sp, r7
    250a:	b003      	add	sp, #12
    250c:	bd90      	pop	{r4, r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	0000247d 	.word	0x0000247d
    2514:	000024a9 	.word	0x000024a9

00002518 <arch_ioport_get_pin_level>:
	base->OUTSET.reg = mask & level;
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
    2518:	b590      	push	{r4, r7, lr}
    251a:	b083      	sub	sp, #12
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	1c18      	adds	r0, r3, #0
    2524:	4b08      	ldr	r3, [pc, #32]	; (2548 <arch_ioport_get_pin_level+0x30>)
    2526:	4798      	blx	r3
    2528:	1c03      	adds	r3, r0, #0
    252a:	6a1c      	ldr	r4, [r3, #32]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	1c18      	adds	r0, r3, #0
    2530:	4b06      	ldr	r3, [pc, #24]	; (254c <arch_ioport_get_pin_level+0x34>)
    2532:	4798      	blx	r3
    2534:	1c03      	adds	r3, r0, #0
    2536:	4023      	ands	r3, r4
    2538:	1e5a      	subs	r2, r3, #1
    253a:	4193      	sbcs	r3, r2
    253c:	b2db      	uxtb	r3, r3
}
    253e:	1c18      	adds	r0, r3, #0
    2540:	46bd      	mov	sp, r7
    2542:	b003      	add	sp, #12
    2544:	bd90      	pop	{r4, r7, pc}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	0000247d 	.word	0x0000247d
    254c:	000024a9 	.word	0x000024a9

00002550 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    2550:	b580      	push	{r7, lr}
    2552:	b082      	sub	sp, #8
    2554:	af00      	add	r7, sp, #0
    2556:	6078      	str	r0, [r7, #4]
    2558:	1c0a      	adds	r2, r1, #0
    255a:	1cfb      	adds	r3, r7, #3
    255c:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    255e:	687a      	ldr	r2, [r7, #4]
    2560:	1cfb      	adds	r3, r7, #3
    2562:	781b      	ldrb	r3, [r3, #0]
    2564:	1c10      	adds	r0, r2, #0
    2566:	1c19      	adds	r1, r3, #0
    2568:	4b02      	ldr	r3, [pc, #8]	; (2574 <ioport_set_pin_level+0x24>)
    256a:	4798      	blx	r3
}
    256c:	46bd      	mov	sp, r7
    256e:	b002      	add	sp, #8
    2570:	bd80      	pop	{r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	000024c5 	.word	0x000024c5

00002578 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
    2578:	b580      	push	{r7, lr}
    257a:	b082      	sub	sp, #8
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	1c18      	adds	r0, r3, #0
    2584:	4b03      	ldr	r3, [pc, #12]	; (2594 <ioport_get_pin_level+0x1c>)
    2586:	4798      	blx	r3
    2588:	1c03      	adds	r3, r0, #0
}
    258a:	1c18      	adds	r0, r3, #0
    258c:	46bd      	mov	sp, r7
    258e:	b002      	add	sp, #8
    2590:	bd80      	pop	{r7, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	00002519 	.word	0x00002519

00002598 <set_temperature_factor>:

/**
 * \brief According to EPD size and temperature to get stage_time
 * \note Refer to COG G2 document Section 5.3 for more details
 */
static void set_temperature_factor(int8_t temperature) {
    2598:	b580      	push	{r7, lr}
    259a:	b082      	sub	sp, #8
    259c:	af00      	add	r7, sp, #0
    259e:	1c02      	adds	r2, r0, #0
    25a0:	1dfb      	adds	r3, r7, #7
    25a2:	701a      	strb	r2, [r3, #0]
	if (temperature <= -10) {
    25a4:	1dfb      	adds	r3, r7, #7
    25a6:	781b      	ldrb	r3, [r3, #0]
    25a8:	b25b      	sxtb	r3, r3
    25aa:	3309      	adds	r3, #9
    25ac:	da08      	bge.n	25c0 <set_temperature_factor+0x28>
		stage_time = temperature_table[cur_EPD_type_index][0];
    25ae:	4b46      	ldr	r3, [pc, #280]	; (26c8 <set_temperature_factor+0x130>)
    25b0:	781b      	ldrb	r3, [r3, #0]
    25b2:	1c1a      	adds	r2, r3, #0
    25b4:	4b45      	ldr	r3, [pc, #276]	; (26cc <set_temperature_factor+0x134>)
    25b6:	0112      	lsls	r2, r2, #4
    25b8:	5ad2      	ldrh	r2, [r2, r3]
    25ba:	4b45      	ldr	r3, [pc, #276]	; (26d0 <set_temperature_factor+0x138>)
    25bc:	801a      	strh	r2, [r3, #0]
    25be:	e080      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (-5 >= temperature && temperature > -10) {
    25c0:	1dfb      	adds	r3, r7, #7
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	b25b      	sxtb	r3, r3
    25c6:	3304      	adds	r3, #4
    25c8:	da0e      	bge.n	25e8 <set_temperature_factor+0x50>
    25ca:	1dfb      	adds	r3, r7, #7
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	b25b      	sxtb	r3, r3
    25d0:	3309      	adds	r3, #9
    25d2:	db09      	blt.n	25e8 <set_temperature_factor+0x50>
		stage_time = temperature_table[cur_EPD_type_index][1];
    25d4:	4b3c      	ldr	r3, [pc, #240]	; (26c8 <set_temperature_factor+0x130>)
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	4a3c      	ldr	r2, [pc, #240]	; (26cc <set_temperature_factor+0x134>)
    25da:	011b      	lsls	r3, r3, #4
    25dc:	18d3      	adds	r3, r2, r3
    25de:	3302      	adds	r3, #2
    25e0:	881a      	ldrh	r2, [r3, #0]
    25e2:	4b3b      	ldr	r3, [pc, #236]	; (26d0 <set_temperature_factor+0x138>)
    25e4:	801a      	strh	r2, [r3, #0]
    25e6:	e06c      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (5 >= temperature && temperature > -5) {
    25e8:	1dfb      	adds	r3, r7, #7
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	b25b      	sxtb	r3, r3
    25ee:	2b05      	cmp	r3, #5
    25f0:	dc0e      	bgt.n	2610 <set_temperature_factor+0x78>
    25f2:	1dfb      	adds	r3, r7, #7
    25f4:	781b      	ldrb	r3, [r3, #0]
    25f6:	b25b      	sxtb	r3, r3
    25f8:	3304      	adds	r3, #4
    25fa:	db09      	blt.n	2610 <set_temperature_factor+0x78>
		stage_time = temperature_table[cur_EPD_type_index][2];
    25fc:	4b32      	ldr	r3, [pc, #200]	; (26c8 <set_temperature_factor+0x130>)
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	4a32      	ldr	r2, [pc, #200]	; (26cc <set_temperature_factor+0x134>)
    2602:	011b      	lsls	r3, r3, #4
    2604:	18d3      	adds	r3, r2, r3
    2606:	3304      	adds	r3, #4
    2608:	881a      	ldrh	r2, [r3, #0]
    260a:	4b31      	ldr	r3, [pc, #196]	; (26d0 <set_temperature_factor+0x138>)
    260c:	801a      	strh	r2, [r3, #0]
    260e:	e058      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (10 >= temperature && temperature > 5) {
    2610:	1dfb      	adds	r3, r7, #7
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	b25b      	sxtb	r3, r3
    2616:	2b0a      	cmp	r3, #10
    2618:	dc0e      	bgt.n	2638 <set_temperature_factor+0xa0>
    261a:	1dfb      	adds	r3, r7, #7
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	b25b      	sxtb	r3, r3
    2620:	2b05      	cmp	r3, #5
    2622:	dd09      	ble.n	2638 <set_temperature_factor+0xa0>
		stage_time = temperature_table[cur_EPD_type_index][3];
    2624:	4b28      	ldr	r3, [pc, #160]	; (26c8 <set_temperature_factor+0x130>)
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	4a28      	ldr	r2, [pc, #160]	; (26cc <set_temperature_factor+0x134>)
    262a:	011b      	lsls	r3, r3, #4
    262c:	18d3      	adds	r3, r2, r3
    262e:	3306      	adds	r3, #6
    2630:	881a      	ldrh	r2, [r3, #0]
    2632:	4b27      	ldr	r3, [pc, #156]	; (26d0 <set_temperature_factor+0x138>)
    2634:	801a      	strh	r2, [r3, #0]
    2636:	e044      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (15 >= temperature && temperature > 10) {
    2638:	1dfb      	adds	r3, r7, #7
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	b25b      	sxtb	r3, r3
    263e:	2b0f      	cmp	r3, #15
    2640:	dc0e      	bgt.n	2660 <set_temperature_factor+0xc8>
    2642:	1dfb      	adds	r3, r7, #7
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	b25b      	sxtb	r3, r3
    2648:	2b0a      	cmp	r3, #10
    264a:	dd09      	ble.n	2660 <set_temperature_factor+0xc8>
		stage_time = temperature_table[cur_EPD_type_index][4];
    264c:	4b1e      	ldr	r3, [pc, #120]	; (26c8 <set_temperature_factor+0x130>)
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	4a1e      	ldr	r2, [pc, #120]	; (26cc <set_temperature_factor+0x134>)
    2652:	011b      	lsls	r3, r3, #4
    2654:	18d3      	adds	r3, r2, r3
    2656:	3308      	adds	r3, #8
    2658:	881a      	ldrh	r2, [r3, #0]
    265a:	4b1d      	ldr	r3, [pc, #116]	; (26d0 <set_temperature_factor+0x138>)
    265c:	801a      	strh	r2, [r3, #0]
    265e:	e030      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (20 >= temperature && temperature > 15) {
    2660:	1dfb      	adds	r3, r7, #7
    2662:	781b      	ldrb	r3, [r3, #0]
    2664:	b25b      	sxtb	r3, r3
    2666:	2b14      	cmp	r3, #20
    2668:	dc0e      	bgt.n	2688 <set_temperature_factor+0xf0>
    266a:	1dfb      	adds	r3, r7, #7
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	b25b      	sxtb	r3, r3
    2670:	2b0f      	cmp	r3, #15
    2672:	dd09      	ble.n	2688 <set_temperature_factor+0xf0>
		stage_time = temperature_table[cur_EPD_type_index][5];
    2674:	4b14      	ldr	r3, [pc, #80]	; (26c8 <set_temperature_factor+0x130>)
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	4a14      	ldr	r2, [pc, #80]	; (26cc <set_temperature_factor+0x134>)
    267a:	011b      	lsls	r3, r3, #4
    267c:	18d3      	adds	r3, r2, r3
    267e:	330a      	adds	r3, #10
    2680:	881a      	ldrh	r2, [r3, #0]
    2682:	4b13      	ldr	r3, [pc, #76]	; (26d0 <set_temperature_factor+0x138>)
    2684:	801a      	strh	r2, [r3, #0]
    2686:	e01c      	b.n	26c2 <set_temperature_factor+0x12a>
		} else if (40 >= temperature && temperature > 20) {
    2688:	1dfb      	adds	r3, r7, #7
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	b25b      	sxtb	r3, r3
    268e:	2b28      	cmp	r3, #40	; 0x28
    2690:	dc0e      	bgt.n	26b0 <set_temperature_factor+0x118>
    2692:	1dfb      	adds	r3, r7, #7
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	b25b      	sxtb	r3, r3
    2698:	2b14      	cmp	r3, #20
    269a:	dd09      	ble.n	26b0 <set_temperature_factor+0x118>
		stage_time = temperature_table[cur_EPD_type_index][6];
    269c:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <set_temperature_factor+0x130>)
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	4a0a      	ldr	r2, [pc, #40]	; (26cc <set_temperature_factor+0x134>)
    26a2:	011b      	lsls	r3, r3, #4
    26a4:	18d3      	adds	r3, r2, r3
    26a6:	330c      	adds	r3, #12
    26a8:	881a      	ldrh	r2, [r3, #0]
    26aa:	4b09      	ldr	r3, [pc, #36]	; (26d0 <set_temperature_factor+0x138>)
    26ac:	801a      	strh	r2, [r3, #0]
    26ae:	e008      	b.n	26c2 <set_temperature_factor+0x12a>
	} else stage_time = temperature_table[cur_EPD_type_index][7];
    26b0:	4b05      	ldr	r3, [pc, #20]	; (26c8 <set_temperature_factor+0x130>)
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	4a05      	ldr	r2, [pc, #20]	; (26cc <set_temperature_factor+0x134>)
    26b6:	011b      	lsls	r3, r3, #4
    26b8:	18d3      	adds	r3, r2, r3
    26ba:	330e      	adds	r3, #14
    26bc:	881a      	ldrh	r2, [r3, #0]
    26be:	4b04      	ldr	r3, [pc, #16]	; (26d0 <set_temperature_factor+0x138>)
    26c0:	801a      	strh	r2, [r3, #0]
}
    26c2:	46bd      	mov	sp, r7
    26c4:	b002      	add	sp, #8
    26c6:	bd80      	pop	{r7, pc}
    26c8:	20000118 	.word	0x20000118
    26cc:	0000a90c 	.word	0x0000a90c
    26d0:	2000008e 	.word	0x2000008e

000026d4 <COG_driver_EPDtype_select>:

/**
 * \brief Select the EPD size to get line data array for driving COG
 *
 */
void COG_driver_EPDtype_select(void) {
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
	switch(cur_EPD_type_index) {
    26d8:	4b27      	ldr	r3, [pc, #156]	; (2778 <COG_driver_EPDtype_select+0xa4>)
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	2b04      	cmp	r3, #4
    26de:	d845      	bhi.n	276c <COG_driver_EPDtype_select+0x98>
    26e0:	009a      	lsls	r2, r3, #2
    26e2:	4b26      	ldr	r3, [pc, #152]	; (277c <COG_driver_EPDtype_select+0xa8>)
    26e4:	18d3      	adds	r3, r2, r3
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	469f      	mov	pc, r3
		case EPD_144:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_144.even[0];
    26ea:	4b25      	ldr	r3, [pc, #148]	; (2780 <COG_driver_EPDtype_select+0xac>)
    26ec:	4a25      	ldr	r2, [pc, #148]	; (2784 <COG_driver_EPDtype_select+0xb0>)
    26ee:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_144.odd[0];
    26f0:	4b25      	ldr	r3, [pc, #148]	; (2788 <COG_driver_EPDtype_select+0xb4>)
    26f2:	4a26      	ldr	r2, [pc, #152]	; (278c <COG_driver_EPDtype_select+0xb8>)
    26f4:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_144.scan[0];
    26f6:	4b26      	ldr	r3, [pc, #152]	; (2790 <COG_driver_EPDtype_select+0xbc>)
    26f8:	4a26      	ldr	r2, [pc, #152]	; (2794 <COG_driver_EPDtype_select+0xc0>)
    26fa:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_144.border_byte;
    26fc:	4b26      	ldr	r3, [pc, #152]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    26fe:	4a27      	ldr	r2, [pc, #156]	; (279c <COG_driver_EPDtype_select+0xc8>)
    2700:	601a      	str	r2, [r3, #0]
		break;
    2702:	e033      	b.n	276c <COG_driver_EPDtype_select+0x98>
		case EPD_200:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_200.even[0];
    2704:	4b1e      	ldr	r3, [pc, #120]	; (2780 <COG_driver_EPDtype_select+0xac>)
    2706:	4a26      	ldr	r2, [pc, #152]	; (27a0 <COG_driver_EPDtype_select+0xcc>)
    2708:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_200.odd[0];
    270a:	4b1f      	ldr	r3, [pc, #124]	; (2788 <COG_driver_EPDtype_select+0xb4>)
    270c:	4a25      	ldr	r2, [pc, #148]	; (27a4 <COG_driver_EPDtype_select+0xd0>)
    270e:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_200.scan[0];
    2710:	4b1f      	ldr	r3, [pc, #124]	; (2790 <COG_driver_EPDtype_select+0xbc>)
    2712:	4a25      	ldr	r2, [pc, #148]	; (27a8 <COG_driver_EPDtype_select+0xd4>)
    2714:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_200.dummy_data;
    2716:	4b20      	ldr	r3, [pc, #128]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    2718:	4a1a      	ldr	r2, [pc, #104]	; (2784 <COG_driver_EPDtype_select+0xb0>)
    271a:	601a      	str	r2, [r3, #0]
		break;
    271c:	e026      	b.n	276c <COG_driver_EPDtype_select+0x98>
		case EPD_270:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_270.even[0];
    271e:	4b18      	ldr	r3, [pc, #96]	; (2780 <COG_driver_EPDtype_select+0xac>)
    2720:	4a1f      	ldr	r2, [pc, #124]	; (27a0 <COG_driver_EPDtype_select+0xcc>)
    2722:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_270.odd[0];
    2724:	4b18      	ldr	r3, [pc, #96]	; (2788 <COG_driver_EPDtype_select+0xb4>)
    2726:	4a21      	ldr	r2, [pc, #132]	; (27ac <COG_driver_EPDtype_select+0xd8>)
    2728:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_270.scan[0];
    272a:	4b19      	ldr	r3, [pc, #100]	; (2790 <COG_driver_EPDtype_select+0xbc>)
    272c:	4a20      	ldr	r2, [pc, #128]	; (27b0 <COG_driver_EPDtype_select+0xdc>)
    272e:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_270.dummy_data;
    2730:	4b19      	ldr	r3, [pc, #100]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    2732:	4a14      	ldr	r2, [pc, #80]	; (2784 <COG_driver_EPDtype_select+0xb0>)
    2734:	601a      	str	r2, [r3, #0]
		break;
    2736:	e019      	b.n	276c <COG_driver_EPDtype_select+0x98>
        case EPD_190:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_190.scan_even[0];
    2738:	4b11      	ldr	r3, [pc, #68]	; (2780 <COG_driver_EPDtype_select+0xac>)
    273a:	4a1e      	ldr	r2, [pc, #120]	; (27b4 <COG_driver_EPDtype_select+0xe0>)
    273c:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_190.scan_odd[0];
    273e:	4b12      	ldr	r3, [pc, #72]	; (2788 <COG_driver_EPDtype_select+0xb4>)
    2740:	4a10      	ldr	r2, [pc, #64]	; (2784 <COG_driver_EPDtype_select+0xb0>)
    2742:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_190.data[0];
    2744:	4b12      	ldr	r3, [pc, #72]	; (2790 <COG_driver_EPDtype_select+0xbc>)
    2746:	4a13      	ldr	r2, [pc, #76]	; (2794 <COG_driver_EPDtype_select+0xc0>)
    2748:	601a      	str	r2, [r3, #0]
        data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_190.border_byte;
    274a:	4b13      	ldr	r3, [pc, #76]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    274c:	4a1a      	ldr	r2, [pc, #104]	; (27b8 <COG_driver_EPDtype_select+0xe4>)
    274e:	601a      	str	r2, [r3, #0]
		break;
    2750:	e00c      	b.n	276c <COG_driver_EPDtype_select+0x98>
        case EPD_260:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_260.scan_even[0];
    2752:	4b0b      	ldr	r3, [pc, #44]	; (2780 <COG_driver_EPDtype_select+0xac>)
    2754:	4a19      	ldr	r2, [pc, #100]	; (27bc <COG_driver_EPDtype_select+0xe8>)
    2756:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_260.scan_odd[0];
    2758:	4b0b      	ldr	r3, [pc, #44]	; (2788 <COG_driver_EPDtype_select+0xb4>)
    275a:	4a0a      	ldr	r2, [pc, #40]	; (2784 <COG_driver_EPDtype_select+0xb0>)
    275c:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_260.data[0];
    275e:	4b0c      	ldr	r3, [pc, #48]	; (2790 <COG_driver_EPDtype_select+0xbc>)
    2760:	4a0c      	ldr	r2, [pc, #48]	; (2794 <COG_driver_EPDtype_select+0xc0>)
    2762:	601a      	str	r2, [r3, #0]
        data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_260.border_byte;
    2764:	4b0c      	ldr	r3, [pc, #48]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    2766:	4a16      	ldr	r2, [pc, #88]	; (27c0 <COG_driver_EPDtype_select+0xec>)
    2768:	601a      	str	r2, [r3, #0]
		break;
    276a:	46c0      	nop			; (mov r8, r8)
	}
    *data_line_border_byte=0x00;
    276c:	4b0a      	ldr	r3, [pc, #40]	; (2798 <COG_driver_EPDtype_select+0xc4>)
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	2200      	movs	r2, #0
    2772:	701a      	strb	r2, [r3, #0]
}
    2774:	46bd      	mov	sp, r7
    2776:	bd80      	pop	{r7, pc}
    2778:	20000118 	.word	0x20000118
    277c:	0000a9ac 	.word	0x0000a9ac
    2780:	20000108 	.word	0x20000108
    2784:	20000090 	.word	0x20000090
    2788:	2000010c 	.word	0x2000010c
    278c:	200000b8 	.word	0x200000b8
    2790:	20000110 	.word	0x20000110
    2794:	200000a0 	.word	0x200000a0
    2798:	20000114 	.word	0x20000114
    279c:	200000c8 	.word	0x200000c8
    27a0:	20000091 	.word	0x20000091
    27a4:	200000c2 	.word	0x200000c2
    27a8:	200000aa 	.word	0x200000aa
    27ac:	200000de 	.word	0x200000de
    27b0:	200000b2 	.word	0x200000b2
    27b4:	200000c4 	.word	0x200000c4
    27b8:	200000d4 	.word	0x200000d4
    27bc:	200000da 	.word	0x200000da
    27c0:	200000ea 	.word	0x200000ea

000027c4 <EPD_power_on>:

/**
* \brief Power on COG Driver
* \note For detailed flow and description, please refer to the COG G2 document Section 3.
*/
void EPD_power_on (uint8_t EPD_type_index,int8_t temperature) {
    27c4:	b580      	push	{r7, lr}
    27c6:	b082      	sub	sp, #8
    27c8:	af00      	add	r7, sp, #0
    27ca:	1c02      	adds	r2, r0, #0
    27cc:	1dfb      	adds	r3, r7, #7
    27ce:	701a      	strb	r2, [r3, #0]
    27d0:	1dbb      	adds	r3, r7, #6
    27d2:	1c0a      	adds	r2, r1, #0
    27d4:	701a      	strb	r2, [r3, #0]

    cur_EPD_type_index=EPD_type_index;
    27d6:	4b18      	ldr	r3, [pc, #96]	; (2838 <EPD_power_on+0x74>)
    27d8:	1dfa      	adds	r2, r7, #7
    27da:	7812      	ldrb	r2, [r2, #0]
    27dc:	701a      	strb	r2, [r3, #0]
    /* Initial state */
	EPD_Vcc_turn_on();
    27de:	202d      	movs	r0, #45	; 0x2d
    27e0:	2101      	movs	r1, #1
    27e2:	4b16      	ldr	r3, [pc, #88]	; (283c <EPD_power_on+0x78>)
    27e4:	4798      	blx	r3
	epd_spi_attach();
    27e6:	4b16      	ldr	r3, [pc, #88]	; (2840 <EPD_power_on+0x7c>)
    27e8:	4798      	blx	r3
	EPD_cs_high();
    27ea:	2011      	movs	r0, #17
    27ec:	2101      	movs	r1, #1
    27ee:	4b13      	ldr	r3, [pc, #76]	; (283c <EPD_power_on+0x78>)
    27f0:	4798      	blx	r3
	EPD_border_high();
    27f2:	200b      	movs	r0, #11
    27f4:	2101      	movs	r1, #1
    27f6:	4b11      	ldr	r3, [pc, #68]	; (283c <EPD_power_on+0x78>)
    27f8:	4798      	blx	r3
	EPD_rst_high();
    27fa:	2015      	movs	r0, #21
    27fc:	2101      	movs	r1, #1
    27fe:	4b0f      	ldr	r3, [pc, #60]	; (283c <EPD_power_on+0x78>)
    2800:	4798      	blx	r3
	delay_ms(5);
    2802:	2005      	movs	r0, #5
    2804:	4b0f      	ldr	r3, [pc, #60]	; (2844 <EPD_power_on+0x80>)
    2806:	4798      	blx	r3
	EPD_rst_low();
    2808:	2015      	movs	r0, #21
    280a:	2100      	movs	r1, #0
    280c:	4b0b      	ldr	r3, [pc, #44]	; (283c <EPD_power_on+0x78>)
    280e:	4798      	blx	r3
	delay_ms(5);
    2810:	2005      	movs	r0, #5
    2812:	4b0c      	ldr	r3, [pc, #48]	; (2844 <EPD_power_on+0x80>)
    2814:	4798      	blx	r3
	EPD_rst_high();
    2816:	2015      	movs	r0, #21
    2818:	2101      	movs	r1, #1
    281a:	4b08      	ldr	r3, [pc, #32]	; (283c <EPD_power_on+0x78>)
    281c:	4798      	blx	r3
	delay_ms(5);
    281e:	2005      	movs	r0, #5
    2820:	4b08      	ldr	r3, [pc, #32]	; (2844 <EPD_power_on+0x80>)
    2822:	4798      	blx	r3
	// Sense temperature to determine Temperature Factor
	set_temperature_factor(temperature);
    2824:	1dbb      	adds	r3, r7, #6
    2826:	781b      	ldrb	r3, [r3, #0]
    2828:	b25b      	sxtb	r3, r3
    282a:	1c18      	adds	r0, r3, #0
    282c:	4b06      	ldr	r3, [pc, #24]	; (2848 <EPD_power_on+0x84>)
    282e:	4798      	blx	r3
}
    2830:	46bd      	mov	sp, r7
    2832:	b002      	add	sp, #8
    2834:	bd80      	pop	{r7, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	20000118 	.word	0x20000118
    283c:	00002551 	.word	0x00002551
    2840:	00004555 	.word	0x00004555
    2844:	0000619d 	.word	0x0000619d
    2848:	00002599 	.word	0x00002599

0000284c <EPD_initialize_driver>:

/**
 * \brief Initialize COG Driver
 * \note For detailed flow and description, please refer to the COG G2 document Section 4.
 */
uint8_t EPD_initialize_driver (void) {
    284c:	b580      	push	{r7, lr}
    284e:	b082      	sub	sp, #8
    2850:	af00      	add	r7, sp, #0
		uint16_t i;
	// Empty the Line buffer
	for (i = 0; i <= LINE_BUFFER_DATA_SIZE; i ++) {
    2852:	1dbb      	adds	r3, r7, #6
    2854:	2200      	movs	r2, #0
    2856:	801a      	strh	r2, [r3, #0]
    2858:	e009      	b.n	286e <EPD_initialize_driver+0x22>
		COG_Line.uint8[i] = 0x00;
    285a:	1dbb      	adds	r3, r7, #6
    285c:	881b      	ldrh	r3, [r3, #0]
    285e:	4a50      	ldr	r2, [pc, #320]	; (29a0 <EPD_initialize_driver+0x154>)
    2860:	2100      	movs	r1, #0
    2862:	54d1      	strb	r1, [r2, r3]
 * \note For detailed flow and description, please refer to the COG G2 document Section 4.
 */
uint8_t EPD_initialize_driver (void) {
		uint16_t i;
	// Empty the Line buffer
	for (i = 0; i <= LINE_BUFFER_DATA_SIZE; i ++) {
    2864:	1dbb      	adds	r3, r7, #6
    2866:	881a      	ldrh	r2, [r3, #0]
    2868:	1dbb      	adds	r3, r7, #6
    286a:	3201      	adds	r2, #1
    286c:	801a      	strh	r2, [r3, #0]
    286e:	1dbb      	adds	r3, r7, #6
    2870:	881b      	ldrh	r3, [r3, #0]
    2872:	2b6f      	cmp	r3, #111	; 0x6f
    2874:	d9f1      	bls.n	285a <EPD_initialize_driver+0xe>
		COG_Line.uint8[i] = 0x00;
	}
	// Determine the EPD size for driving COG
	COG_driver_EPDtype_select();
    2876:	4b4b      	ldr	r3, [pc, #300]	; (29a4 <EPD_initialize_driver+0x158>)
    2878:	4798      	blx	r3
	
	i = 0;
    287a:	1dbb      	adds	r3, r7, #6
    287c:	2200      	movs	r2, #0
    287e:	801a      	strh	r2, [r3, #0]

	while (EPD_IsBusy()) {
    2880:	e009      	b.n	2896 <EPD_initialize_driver+0x4a>
		if((i++) >= 0x0FFF) return ERROR_BUSY;
    2882:	1dbb      	adds	r3, r7, #6
    2884:	881b      	ldrh	r3, [r3, #0]
    2886:	1dba      	adds	r2, r7, #6
    2888:	1c59      	adds	r1, r3, #1
    288a:	8011      	strh	r1, [r2, #0]
    288c:	4a46      	ldr	r2, [pc, #280]	; (29a8 <EPD_initialize_driver+0x15c>)
    288e:	4293      	cmp	r3, r2
    2890:	d901      	bls.n	2896 <EPD_initialize_driver+0x4a>
    2892:	23f0      	movs	r3, #240	; 0xf0
    2894:	e080      	b.n	2998 <EPD_initialize_driver+0x14c>
	// Determine the EPD size for driving COG
	COG_driver_EPDtype_select();
	
	i = 0;

	while (EPD_IsBusy()) {
    2896:	202e      	movs	r0, #46	; 0x2e
    2898:	4b44      	ldr	r3, [pc, #272]	; (29ac <EPD_initialize_driver+0x160>)
    289a:	4798      	blx	r3
    289c:	1e03      	subs	r3, r0, #0
    289e:	d1f0      	bne.n	2882 <EPD_initialize_driver+0x36>
		if((i++) >= 0x0FFF) return ERROR_BUSY;
	}

	//Check COG ID
	if((SPI_R(0x72,0x00) & 0x0f) !=0x02) return ERROR_COG_ID;
    28a0:	2072      	movs	r0, #114	; 0x72
    28a2:	2100      	movs	r1, #0
    28a4:	4b42      	ldr	r3, [pc, #264]	; (29b0 <EPD_initialize_driver+0x164>)
    28a6:	4798      	blx	r3
    28a8:	1c03      	adds	r3, r0, #0
    28aa:	1c1a      	adds	r2, r3, #0
    28ac:	230f      	movs	r3, #15
    28ae:	4013      	ands	r3, r2
    28b0:	2b02      	cmp	r3, #2
    28b2:	d001      	beq.n	28b8 <EPD_initialize_driver+0x6c>
    28b4:	23f1      	movs	r3, #241	; 0xf1
    28b6:	e06f      	b.n	2998 <EPD_initialize_driver+0x14c>

	//Disable OE
	epd_spi_send_byte(0x02,0x40);
    28b8:	2002      	movs	r0, #2
    28ba:	2140      	movs	r1, #64	; 0x40
    28bc:	4b3d      	ldr	r3, [pc, #244]	; (29b4 <EPD_initialize_driver+0x168>)
    28be:	4798      	blx	r3

	//Check Breakage
	if((SPI_R(0x0F,0x00) & 0x80) != 0x80) return ERROR_BREAKAGE;
    28c0:	200f      	movs	r0, #15
    28c2:	2100      	movs	r1, #0
    28c4:	4b3a      	ldr	r3, [pc, #232]	; (29b0 <EPD_initialize_driver+0x164>)
    28c6:	4798      	blx	r3
    28c8:	1c03      	adds	r3, r0, #0
    28ca:	b2db      	uxtb	r3, r3
    28cc:	b25b      	sxtb	r3, r3
    28ce:	2b00      	cmp	r3, #0
    28d0:	db01      	blt.n	28d6 <EPD_initialize_driver+0x8a>
    28d2:	23f2      	movs	r3, #242	; 0xf2
    28d4:	e060      	b.n	2998 <EPD_initialize_driver+0x14c>

	//Power Saving Mode
 	epd_spi_send_byte(0x0B, 0x02);
    28d6:	200b      	movs	r0, #11
    28d8:	2102      	movs	r1, #2
    28da:	4b36      	ldr	r3, [pc, #216]	; (29b4 <EPD_initialize_driver+0x168>)
    28dc:	4798      	blx	r3

	//Channel Select
	epd_spi_send (0x01, (uint8_t *)&COG_parameters[cur_EPD_type_index].channel_select, 8);
    28de:	4b36      	ldr	r3, [pc, #216]	; (29b8 <EPD_initialize_driver+0x16c>)
    28e0:	781b      	ldrb	r3, [r3, #0]
    28e2:	1c1a      	adds	r2, r3, #0
    28e4:	1c13      	adds	r3, r2, #0
    28e6:	009b      	lsls	r3, r3, #2
    28e8:	189b      	adds	r3, r3, r2
    28ea:	009b      	lsls	r3, r3, #2
    28ec:	4a33      	ldr	r2, [pc, #204]	; (29bc <EPD_initialize_driver+0x170>)
    28ee:	189b      	adds	r3, r3, r2
    28f0:	2001      	movs	r0, #1
    28f2:	1c19      	adds	r1, r3, #0
    28f4:	2208      	movs	r2, #8
    28f6:	4b32      	ldr	r3, [pc, #200]	; (29c0 <EPD_initialize_driver+0x174>)
    28f8:	4798      	blx	r3

	//High Power Mode Osc Setting
	epd_spi_send_byte(0x07,0xD1);
    28fa:	2007      	movs	r0, #7
    28fc:	21d1      	movs	r1, #209	; 0xd1
    28fe:	4b2d      	ldr	r3, [pc, #180]	; (29b4 <EPD_initialize_driver+0x168>)
    2900:	4798      	blx	r3

	//Power Setting
	epd_spi_send_byte(0x08,0x02);
    2902:	2008      	movs	r0, #8
    2904:	2102      	movs	r1, #2
    2906:	4b2b      	ldr	r3, [pc, #172]	; (29b4 <EPD_initialize_driver+0x168>)
    2908:	4798      	blx	r3

	//Set Vcom level
	epd_spi_send_byte(0x09,0xC2);
    290a:	2009      	movs	r0, #9
    290c:	21c2      	movs	r1, #194	; 0xc2
    290e:	4b29      	ldr	r3, [pc, #164]	; (29b4 <EPD_initialize_driver+0x168>)
    2910:	4798      	blx	r3

	//Power Setting
	epd_spi_send_byte(0x04,0x03);
    2912:	2004      	movs	r0, #4
    2914:	2103      	movs	r1, #3
    2916:	4b27      	ldr	r3, [pc, #156]	; (29b4 <EPD_initialize_driver+0x168>)
    2918:	4798      	blx	r3

	//Driver latch on
	epd_spi_send_byte(0x03,0x01);
    291a:	2003      	movs	r0, #3
    291c:	2101      	movs	r1, #1
    291e:	4b25      	ldr	r3, [pc, #148]	; (29b4 <EPD_initialize_driver+0x168>)
    2920:	4798      	blx	r3

	//Driver latch off
	epd_spi_send_byte(0x03,0x00);
    2922:	2003      	movs	r0, #3
    2924:	2100      	movs	r1, #0
    2926:	4b23      	ldr	r3, [pc, #140]	; (29b4 <EPD_initialize_driver+0x168>)
    2928:	4798      	blx	r3

	delay_ms(5);
    292a:	2005      	movs	r0, #5
    292c:	4b25      	ldr	r3, [pc, #148]	; (29c4 <EPD_initialize_driver+0x178>)
    292e:	4798      	blx	r3

	//Chargepump Start
	i=0;
    2930:	1dbb      	adds	r3, r7, #6
    2932:	2200      	movs	r2, #0
    2934:	801a      	strh	r2, [r3, #0]
	do {
		//Start chargepump positive V
		//VGH & VDH on
		epd_spi_send_byte(0x05,0x01);
    2936:	2005      	movs	r0, #5
    2938:	2101      	movs	r1, #1
    293a:	4b1e      	ldr	r3, [pc, #120]	; (29b4 <EPD_initialize_driver+0x168>)
    293c:	4798      	blx	r3

		delay_ms(240);
    293e:	20f0      	movs	r0, #240	; 0xf0
    2940:	4b20      	ldr	r3, [pc, #128]	; (29c4 <EPD_initialize_driver+0x178>)
    2942:	4798      	blx	r3

		//Start chargepump neg voltage
		//VGL & VDL on
		epd_spi_send_byte(0x05,0x03);
    2944:	2005      	movs	r0, #5
    2946:	2103      	movs	r1, #3
    2948:	4b1a      	ldr	r3, [pc, #104]	; (29b4 <EPD_initialize_driver+0x168>)
    294a:	4798      	blx	r3

		delay_ms(40);
    294c:	2028      	movs	r0, #40	; 0x28
    294e:	4b1d      	ldr	r3, [pc, #116]	; (29c4 <EPD_initialize_driver+0x178>)
    2950:	4798      	blx	r3

		//Set chargepump
		//Vcom_Driver to ON
		//Vcom_Driver on
		epd_spi_send_byte(0x05,0x0F);
    2952:	2005      	movs	r0, #5
    2954:	210f      	movs	r1, #15
    2956:	4b17      	ldr	r3, [pc, #92]	; (29b4 <EPD_initialize_driver+0x168>)
    2958:	4798      	blx	r3

		delay_ms(40);
    295a:	2028      	movs	r0, #40	; 0x28
    295c:	4b19      	ldr	r3, [pc, #100]	; (29c4 <EPD_initialize_driver+0x178>)
    295e:	4798      	blx	r3

		//Check DC/DC
		if((SPI_R(0x0F,0x00) & 0x40) == 0x40)
    2960:	200f      	movs	r0, #15
    2962:	2100      	movs	r1, #0
    2964:	4b12      	ldr	r3, [pc, #72]	; (29b0 <EPD_initialize_driver+0x164>)
    2966:	4798      	blx	r3
    2968:	1c03      	adds	r3, r0, #0
    296a:	1c1a      	adds	r2, r3, #0
    296c:	2340      	movs	r3, #64	; 0x40
    296e:	4013      	ands	r3, r2
    2970:	d004      	beq.n	297c <EPD_initialize_driver+0x130>
		{
			//Output enable to disable
			epd_spi_send_byte(0x02,0x04);
    2972:	2002      	movs	r0, #2
    2974:	2104      	movs	r1, #4
    2976:	4b0f      	ldr	r3, [pc, #60]	; (29b4 <EPD_initialize_driver+0x168>)
    2978:	4798      	blx	r3
			break;
    297a:	e006      	b.n	298a <EPD_initialize_driver+0x13e>
		}

	}while((i++) != 4);
    297c:	1dbb      	adds	r3, r7, #6
    297e:	881b      	ldrh	r3, [r3, #0]
    2980:	1dba      	adds	r2, r7, #6
    2982:	1c59      	adds	r1, r3, #1
    2984:	8011      	strh	r1, [r2, #0]
    2986:	2b04      	cmp	r3, #4
    2988:	d1d5      	bne.n	2936 <EPD_initialize_driver+0xea>

	if(i>=4) return ERROR_CHARGEPUMP;
    298a:	1dbb      	adds	r3, r7, #6
    298c:	881b      	ldrh	r3, [r3, #0]
    298e:	2b03      	cmp	r3, #3
    2990:	d901      	bls.n	2996 <EPD_initialize_driver+0x14a>
    2992:	23f4      	movs	r3, #244	; 0xf4
    2994:	e000      	b.n	2998 <EPD_initialize_driver+0x14c>
	else return RES_OK;
    2996:	2300      	movs	r3, #0
}
    2998:	1c18      	adds	r0, r3, #0
    299a:	46bd      	mov	sp, r7
    299c:	b002      	add	sp, #8
    299e:	bd80      	pop	{r7, pc}
    29a0:	20000090 	.word	0x20000090
    29a4:	000026d5 	.word	0x000026d5
    29a8:	00000ffe 	.word	0x00000ffe
    29ac:	00002579 	.word	0x00002579
    29b0:	00004651 	.word	0x00004651
    29b4:	00004781 	.word	0x00004781
    29b8:	20000118 	.word	0x20000118
    29bc:	0000a8a8 	.word	0x0000a8a8
    29c0:	000046f1 	.word	0x000046f1
    29c4:	0000619d 	.word	0x0000619d

000029c8 <stage_handle_array>:
 * - For more details on the driving stages, please refer to the COG G2 document Section 5.
 *
 * \param image_ptr The pointer of memory that stores image that will send to COG
 * \param stage_no The assigned stage number that will proceed
 */
static void stage_handle_array(uint8_t *image_prt,long image_data_address,uint8_t stage_no) {
    29c8:	b590      	push	{r4, r7, lr}
    29ca:	b093      	sub	sp, #76	; 0x4c
    29cc:	af00      	add	r7, sp, #0
    29ce:	60f8      	str	r0, [r7, #12]
    29d0:	60b9      	str	r1, [r7, #8]
    29d2:	1dfb      	adds	r3, r7, #7
    29d4:	701a      	strb	r2, [r3, #0]
	/* x for horizontal_size loop, y for vertical_size loop, which are EPD pixel size */
	uint16_t x,y,k;
	int16_t scanline_no=0;
    29d6:	2340      	movs	r3, #64	; 0x40
    29d8:	18fb      	adds	r3, r7, r3
    29da:	2200      	movs	r2, #0
    29dc:	801a      	strh	r2, [r3, #0]
	uint8_t	temp_byte; // Temporary storage for image data check
	uint8_t *backup_image_prt; // Backup image address pointer
	long original_image_address;
    uint8_t byte_array[COG_line_Max_Size];
	original_image_address=image_data_address;
    29de:	68bb      	ldr	r3, [r7, #8]
    29e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	backup_image_prt = image_prt;
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	63bb      	str	r3, [r7, #56]	; 0x38
	current_frame_time =0;
    29e6:	4bca      	ldr	r3, [pc, #808]	; (2d10 <stage_handle_array+0x348>)
    29e8:	2200      	movs	r2, #0
    29ea:	801a      	strh	r2, [r3, #0]
	/* Start a system SysTick timer to ensure the same duration of each stage  */
	start_EPD_timer();
    29ec:	4bc9      	ldr	r3, [pc, #804]	; (2d14 <stage_handle_array+0x34c>)
    29ee:	4798      	blx	r3

	/* Do while total time of frames exceed stage time
	* Per frame */
	do {
		image_prt=backup_image_prt;
    29f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    29f2:	60fb      	str	r3, [r7, #12]
        image_data_address=original_image_address;
    29f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    29f6:	60bb      	str	r3, [r7, #8]
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
    29f8:	2344      	movs	r3, #68	; 0x44
    29fa:	18fb      	adds	r3, r7, r3
    29fc:	2200      	movs	r2, #0
    29fe:	801a      	strh	r2, [r3, #0]
    2a00:	f000 fc06 	bl	3210 <stage_handle_array+0x848>
			k = COG_parameters[cur_EPD_type_index].horizontal_size-1;
    2a04:	4bc4      	ldr	r3, [pc, #784]	; (2d18 <stage_handle_array+0x350>)
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	1c19      	adds	r1, r3, #0
    2a0a:	4ac4      	ldr	r2, [pc, #784]	; (2d1c <stage_handle_array+0x354>)
    2a0c:	1c0b      	adds	r3, r1, #0
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	185b      	adds	r3, r3, r1
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	18d3      	adds	r3, r2, r3
    2a16:	3308      	adds	r3, #8
    2a18:	885a      	ldrh	r2, [r3, #2]
    2a1a:	2342      	movs	r3, #66	; 0x42
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	3a01      	subs	r2, #1
    2a20:	801a      	strh	r2, [r3, #0]
            if(_On_EPD_read_flash!=NULL) {
    2a22:	4bbf      	ldr	r3, [pc, #764]	; (2d20 <stage_handle_array+0x358>)
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	2b00      	cmp	r3, #0
    2a28:	d017      	beq.n	2a5a <stage_handle_array+0x92>
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
    2a2a:	4bbd      	ldr	r3, [pc, #756]	; (2d20 <stage_handle_array+0x358>)
    2a2c:	681c      	ldr	r4, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
    2a2e:	4bba      	ldr	r3, [pc, #744]	; (2d18 <stage_handle_array+0x350>)
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	1c19      	adds	r1, r3, #0
    2a34:	4ab9      	ldr	r2, [pc, #740]	; (2d1c <stage_handle_array+0x354>)
    2a36:	1c0b      	adds	r3, r1, #0
    2a38:	009b      	lsls	r3, r3, #2
    2a3a:	185b      	adds	r3, r3, r1
    2a3c:	009b      	lsls	r3, r3, #2
    2a3e:	18d3      	adds	r3, r2, r3
    2a40:	3308      	adds	r3, #8
    2a42:	885b      	ldrh	r3, [r3, #2]
        image_data_address=original_image_address;
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
			k = COG_parameters[cur_EPD_type_index].horizontal_size-1;
            if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
    2a44:	b2db      	uxtb	r3, r3
    2a46:	68b9      	ldr	r1, [r7, #8]
    2a48:	2214      	movs	r2, #20
    2a4a:	18ba      	adds	r2, r7, r2
    2a4c:	1c08      	adds	r0, r1, #0
    2a4e:	1c11      	adds	r1, r2, #0
    2a50:	1c1a      	adds	r2, r3, #0
    2a52:	47a0      	blx	r4
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
    2a54:	2314      	movs	r3, #20
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	60fb      	str	r3, [r7, #12]
			}
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    2a5a:	2346      	movs	r3, #70	; 0x46
    2a5c:	18fb      	adds	r3, r7, r3
    2a5e:	2200      	movs	r2, #0
    2a60:	801a      	strh	r2, [r3, #0]
    2a62:	f000 fb5d 	bl	3120 <stage_handle_array+0x758>
				temp_byte =*image_prt++;
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	1c5a      	adds	r2, r3, #1
    2a6a:	60fa      	str	r2, [r7, #12]
    2a6c:	2237      	movs	r2, #55	; 0x37
    2a6e:	18ba      	adds	r2, r7, r2
    2a70:	781b      	ldrb	r3, [r3, #0]
    2a72:	7013      	strb	r3, [r2, #0]
				switch(stage_no) {
    2a74:	1dfb      	adds	r3, r7, #7
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	2b01      	cmp	r3, #1
    2a7a:	d100      	bne.n	2a7e <stage_handle_array+0xb6>
    2a7c:	e0d6      	b.n	2c2c <stage_handle_array+0x264>
    2a7e:	dc03      	bgt.n	2a88 <stage_handle_array+0xc0>
    2a80:	2b00      	cmp	r3, #0
    2a82:	d008      	beq.n	2a96 <stage_handle_array+0xce>
    2a84:	f000 fb45 	bl	3112 <stage_handle_array+0x74a>
    2a88:	2b02      	cmp	r3, #2
    2a8a:	d100      	bne.n	2a8e <stage_handle_array+0xc6>
    2a8c:	e1a7      	b.n	2dde <stage_handle_array+0x416>
    2a8e:	2b03      	cmp	r3, #3
    2a90:	d100      	bne.n	2a94 <stage_handle_array+0xcc>
    2a92:	e26f      	b.n	2f74 <stage_handle_array+0x5ac>
    2a94:	e33d      	b.n	3112 <stage_handle_array+0x74a>
					case Stage1: // Compensate, Inverse previous image
					data_line_odd[x]     = ((temp_byte & 0x40) ? BLACK3  : WHITE3);
    2a96:	4ba3      	ldr	r3, [pc, #652]	; (2d24 <stage_handle_array+0x35c>)
    2a98:	681a      	ldr	r2, [r3, #0]
    2a9a:	2346      	movs	r3, #70	; 0x46
    2a9c:	18fb      	adds	r3, r7, r3
    2a9e:	881b      	ldrh	r3, [r3, #0]
    2aa0:	18d3      	adds	r3, r2, r3
    2aa2:	2237      	movs	r2, #55	; 0x37
    2aa4:	18ba      	adds	r2, r7, r2
    2aa6:	7812      	ldrb	r2, [r2, #0]
    2aa8:	2140      	movs	r1, #64	; 0x40
    2aaa:	400a      	ands	r2, r1
    2aac:	d001      	beq.n	2ab2 <stage_handle_array+0xea>
    2aae:	22c0      	movs	r2, #192	; 0xc0
    2ab0:	e000      	b.n	2ab4 <stage_handle_array+0xec>
    2ab2:	2280      	movs	r2, #128	; 0x80
    2ab4:	701a      	strb	r2, [r3, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? BLACK2  : WHITE2);
    2ab6:	4b9b      	ldr	r3, [pc, #620]	; (2d24 <stage_handle_array+0x35c>)
    2ab8:	681a      	ldr	r2, [r3, #0]
    2aba:	2346      	movs	r3, #70	; 0x46
    2abc:	18fb      	adds	r3, r7, r3
    2abe:	881b      	ldrh	r3, [r3, #0]
    2ac0:	18d2      	adds	r2, r2, r3
    2ac2:	4b98      	ldr	r3, [pc, #608]	; (2d24 <stage_handle_array+0x35c>)
    2ac4:	6819      	ldr	r1, [r3, #0]
    2ac6:	2346      	movs	r3, #70	; 0x46
    2ac8:	18fb      	adds	r3, r7, r3
    2aca:	881b      	ldrh	r3, [r3, #0]
    2acc:	18cb      	adds	r3, r1, r3
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	b2d8      	uxtb	r0, r3
    2ad2:	2337      	movs	r3, #55	; 0x37
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	2110      	movs	r1, #16
    2ada:	400b      	ands	r3, r1
    2adc:	d001      	beq.n	2ae2 <stage_handle_array+0x11a>
    2ade:	2330      	movs	r3, #48	; 0x30
    2ae0:	e000      	b.n	2ae4 <stage_handle_array+0x11c>
    2ae2:	2320      	movs	r3, #32
    2ae4:	1c01      	adds	r1, r0, #0
    2ae6:	430b      	orrs	r3, r1
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	b2db      	uxtb	r3, r3
    2aec:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? BLACK1  : WHITE1);
    2aee:	4b8d      	ldr	r3, [pc, #564]	; (2d24 <stage_handle_array+0x35c>)
    2af0:	681a      	ldr	r2, [r3, #0]
    2af2:	2346      	movs	r3, #70	; 0x46
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	881b      	ldrh	r3, [r3, #0]
    2af8:	18d2      	adds	r2, r2, r3
    2afa:	4b8a      	ldr	r3, [pc, #552]	; (2d24 <stage_handle_array+0x35c>)
    2afc:	6819      	ldr	r1, [r3, #0]
    2afe:	2346      	movs	r3, #70	; 0x46
    2b00:	18fb      	adds	r3, r7, r3
    2b02:	881b      	ldrh	r3, [r3, #0]
    2b04:	18cb      	adds	r3, r1, r3
    2b06:	781b      	ldrb	r3, [r3, #0]
    2b08:	b2d8      	uxtb	r0, r3
    2b0a:	2337      	movs	r3, #55	; 0x37
    2b0c:	18fb      	adds	r3, r7, r3
    2b0e:	781b      	ldrb	r3, [r3, #0]
    2b10:	2104      	movs	r1, #4
    2b12:	400b      	ands	r3, r1
    2b14:	d001      	beq.n	2b1a <stage_handle_array+0x152>
    2b16:	230c      	movs	r3, #12
    2b18:	e000      	b.n	2b1c <stage_handle_array+0x154>
    2b1a:	2308      	movs	r3, #8
    2b1c:	1c01      	adds	r1, r0, #0
    2b1e:	430b      	orrs	r3, r1
    2b20:	b2db      	uxtb	r3, r3
    2b22:	b2db      	uxtb	r3, r3
    2b24:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? BLACK0  : WHITE0);
    2b26:	4b7f      	ldr	r3, [pc, #508]	; (2d24 <stage_handle_array+0x35c>)
    2b28:	681a      	ldr	r2, [r3, #0]
    2b2a:	2346      	movs	r3, #70	; 0x46
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	881b      	ldrh	r3, [r3, #0]
    2b30:	18d2      	adds	r2, r2, r3
    2b32:	4b7c      	ldr	r3, [pc, #496]	; (2d24 <stage_handle_array+0x35c>)
    2b34:	6819      	ldr	r1, [r3, #0]
    2b36:	2346      	movs	r3, #70	; 0x46
    2b38:	18fb      	adds	r3, r7, r3
    2b3a:	881b      	ldrh	r3, [r3, #0]
    2b3c:	18cb      	adds	r3, r1, r3
    2b3e:	781b      	ldrb	r3, [r3, #0]
    2b40:	b2d8      	uxtb	r0, r3
    2b42:	2337      	movs	r3, #55	; 0x37
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	2101      	movs	r1, #1
    2b4a:	400b      	ands	r3, r1
    2b4c:	d001      	beq.n	2b52 <stage_handle_array+0x18a>
    2b4e:	2303      	movs	r3, #3
    2b50:	e000      	b.n	2b54 <stage_handle_array+0x18c>
    2b52:	2302      	movs	r3, #2
    2b54:	1c01      	adds	r1, r0, #0
    2b56:	430b      	orrs	r3, r1
    2b58:	b2db      	uxtb	r3, r3
    2b5a:	b2db      	uxtb	r3, r3
    2b5c:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? BLACK0  : WHITE0);
    2b5e:	4b72      	ldr	r3, [pc, #456]	; (2d28 <stage_handle_array+0x360>)
    2b60:	681a      	ldr	r2, [r3, #0]
    2b62:	2342      	movs	r3, #66	; 0x42
    2b64:	18fb      	adds	r3, r7, r3
    2b66:	881b      	ldrh	r3, [r3, #0]
    2b68:	18d3      	adds	r3, r2, r3
    2b6a:	2237      	movs	r2, #55	; 0x37
    2b6c:	18ba      	adds	r2, r7, r2
    2b6e:	7812      	ldrb	r2, [r2, #0]
    2b70:	b252      	sxtb	r2, r2
    2b72:	2a00      	cmp	r2, #0
    2b74:	da01      	bge.n	2b7a <stage_handle_array+0x1b2>
    2b76:	2203      	movs	r2, #3
    2b78:	e000      	b.n	2b7c <stage_handle_array+0x1b4>
    2b7a:	2202      	movs	r2, #2
    2b7c:	701a      	strb	r2, [r3, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? BLACK1  : WHITE1);
    2b7e:	4b6a      	ldr	r3, [pc, #424]	; (2d28 <stage_handle_array+0x360>)
    2b80:	681a      	ldr	r2, [r3, #0]
    2b82:	2342      	movs	r3, #66	; 0x42
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	881b      	ldrh	r3, [r3, #0]
    2b88:	18d2      	adds	r2, r2, r3
    2b8a:	4b67      	ldr	r3, [pc, #412]	; (2d28 <stage_handle_array+0x360>)
    2b8c:	6819      	ldr	r1, [r3, #0]
    2b8e:	2342      	movs	r3, #66	; 0x42
    2b90:	18fb      	adds	r3, r7, r3
    2b92:	881b      	ldrh	r3, [r3, #0]
    2b94:	18cb      	adds	r3, r1, r3
    2b96:	781b      	ldrb	r3, [r3, #0]
    2b98:	b2d8      	uxtb	r0, r3
    2b9a:	2337      	movs	r3, #55	; 0x37
    2b9c:	18fb      	adds	r3, r7, r3
    2b9e:	781b      	ldrb	r3, [r3, #0]
    2ba0:	2120      	movs	r1, #32
    2ba2:	400b      	ands	r3, r1
    2ba4:	d001      	beq.n	2baa <stage_handle_array+0x1e2>
    2ba6:	230c      	movs	r3, #12
    2ba8:	e000      	b.n	2bac <stage_handle_array+0x1e4>
    2baa:	2308      	movs	r3, #8
    2bac:	1c01      	adds	r1, r0, #0
    2bae:	430b      	orrs	r3, r1
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	b2db      	uxtb	r3, r3
    2bb4:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? BLACK2  : WHITE2);
    2bb6:	4b5c      	ldr	r3, [pc, #368]	; (2d28 <stage_handle_array+0x360>)
    2bb8:	681a      	ldr	r2, [r3, #0]
    2bba:	2342      	movs	r3, #66	; 0x42
    2bbc:	18fb      	adds	r3, r7, r3
    2bbe:	881b      	ldrh	r3, [r3, #0]
    2bc0:	18d2      	adds	r2, r2, r3
    2bc2:	4b59      	ldr	r3, [pc, #356]	; (2d28 <stage_handle_array+0x360>)
    2bc4:	6819      	ldr	r1, [r3, #0]
    2bc6:	2342      	movs	r3, #66	; 0x42
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	881b      	ldrh	r3, [r3, #0]
    2bcc:	18cb      	adds	r3, r1, r3
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	b2d8      	uxtb	r0, r3
    2bd2:	2337      	movs	r3, #55	; 0x37
    2bd4:	18fb      	adds	r3, r7, r3
    2bd6:	781b      	ldrb	r3, [r3, #0]
    2bd8:	2108      	movs	r1, #8
    2bda:	400b      	ands	r3, r1
    2bdc:	d001      	beq.n	2be2 <stage_handle_array+0x21a>
    2bde:	2330      	movs	r3, #48	; 0x30
    2be0:	e000      	b.n	2be4 <stage_handle_array+0x21c>
    2be2:	2320      	movs	r3, #32
    2be4:	1c01      	adds	r1, r0, #0
    2be6:	430b      	orrs	r3, r1
    2be8:	b2db      	uxtb	r3, r3
    2bea:	b2db      	uxtb	r3, r3
    2bec:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? BLACK3  : WHITE3);
    2bee:	4b4e      	ldr	r3, [pc, #312]	; (2d28 <stage_handle_array+0x360>)
    2bf0:	681a      	ldr	r2, [r3, #0]
    2bf2:	2342      	movs	r3, #66	; 0x42
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	881b      	ldrh	r3, [r3, #0]
    2bf8:	2142      	movs	r1, #66	; 0x42
    2bfa:	1879      	adds	r1, r7, r1
    2bfc:	1e58      	subs	r0, r3, #1
    2bfe:	8008      	strh	r0, [r1, #0]
    2c00:	1c19      	adds	r1, r3, #0
    2c02:	1851      	adds	r1, r2, r1
    2c04:	4a48      	ldr	r2, [pc, #288]	; (2d28 <stage_handle_array+0x360>)
    2c06:	6812      	ldr	r2, [r2, #0]
    2c08:	18d3      	adds	r3, r2, r3
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	b2d8      	uxtb	r0, r3
    2c0e:	2337      	movs	r3, #55	; 0x37
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	2202      	movs	r2, #2
    2c16:	4013      	ands	r3, r2
    2c18:	d001      	beq.n	2c1e <stage_handle_array+0x256>
    2c1a:	23c0      	movs	r3, #192	; 0xc0
    2c1c:	e000      	b.n	2c20 <stage_handle_array+0x258>
    2c1e:	2380      	movs	r3, #128	; 0x80
    2c20:	1c02      	adds	r2, r0, #0
    2c22:	4313      	orrs	r3, r2
    2c24:	b2db      	uxtb	r3, r3
    2c26:	b2db      	uxtb	r3, r3
    2c28:	700b      	strb	r3, [r1, #0]
						break;
    2c2a:	e272      	b.n	3112 <stage_handle_array+0x74a>
					case Stage2: // White
					data_line_odd[x]     = ((temp_byte & 0x40) ?  WHITE3 : NOTHING3);
    2c2c:	4b3d      	ldr	r3, [pc, #244]	; (2d24 <stage_handle_array+0x35c>)
    2c2e:	681a      	ldr	r2, [r3, #0]
    2c30:	2346      	movs	r3, #70	; 0x46
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	881b      	ldrh	r3, [r3, #0]
    2c36:	18d3      	adds	r3, r2, r3
    2c38:	2237      	movs	r2, #55	; 0x37
    2c3a:	18ba      	adds	r2, r7, r2
    2c3c:	7812      	ldrb	r2, [r2, #0]
    2c3e:	2140      	movs	r1, #64	; 0x40
    2c40:	400a      	ands	r2, r1
    2c42:	d001      	beq.n	2c48 <stage_handle_array+0x280>
    2c44:	2280      	movs	r2, #128	; 0x80
    2c46:	e000      	b.n	2c4a <stage_handle_array+0x282>
    2c48:	2200      	movs	r2, #0
    2c4a:	701a      	strb	r2, [r3, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ?  WHITE2 : NOTHING2);
    2c4c:	4b35      	ldr	r3, [pc, #212]	; (2d24 <stage_handle_array+0x35c>)
    2c4e:	681a      	ldr	r2, [r3, #0]
    2c50:	2346      	movs	r3, #70	; 0x46
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	881b      	ldrh	r3, [r3, #0]
    2c56:	18d2      	adds	r2, r2, r3
    2c58:	4b32      	ldr	r3, [pc, #200]	; (2d24 <stage_handle_array+0x35c>)
    2c5a:	6819      	ldr	r1, [r3, #0]
    2c5c:	2346      	movs	r3, #70	; 0x46
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	881b      	ldrh	r3, [r3, #0]
    2c62:	18cb      	adds	r3, r1, r3
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	b2d8      	uxtb	r0, r3
    2c68:	2337      	movs	r3, #55	; 0x37
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	2110      	movs	r1, #16
    2c70:	400b      	ands	r3, r1
    2c72:	d001      	beq.n	2c78 <stage_handle_array+0x2b0>
    2c74:	2320      	movs	r3, #32
    2c76:	e000      	b.n	2c7a <stage_handle_array+0x2b2>
    2c78:	2300      	movs	r3, #0
    2c7a:	1c01      	adds	r1, r0, #0
    2c7c:	430b      	orrs	r3, r1
    2c7e:	b2db      	uxtb	r3, r3
    2c80:	b2db      	uxtb	r3, r3
    2c82:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ?  WHITE1 : NOTHING1);
    2c84:	4b27      	ldr	r3, [pc, #156]	; (2d24 <stage_handle_array+0x35c>)
    2c86:	681a      	ldr	r2, [r3, #0]
    2c88:	2346      	movs	r3, #70	; 0x46
    2c8a:	18fb      	adds	r3, r7, r3
    2c8c:	881b      	ldrh	r3, [r3, #0]
    2c8e:	18d2      	adds	r2, r2, r3
    2c90:	4b24      	ldr	r3, [pc, #144]	; (2d24 <stage_handle_array+0x35c>)
    2c92:	6819      	ldr	r1, [r3, #0]
    2c94:	2346      	movs	r3, #70	; 0x46
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	881b      	ldrh	r3, [r3, #0]
    2c9a:	18cb      	adds	r3, r1, r3
    2c9c:	781b      	ldrb	r3, [r3, #0]
    2c9e:	b2d8      	uxtb	r0, r3
    2ca0:	2337      	movs	r3, #55	; 0x37
    2ca2:	18fb      	adds	r3, r7, r3
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	2104      	movs	r1, #4
    2ca8:	400b      	ands	r3, r1
    2caa:	d001      	beq.n	2cb0 <stage_handle_array+0x2e8>
    2cac:	2308      	movs	r3, #8
    2cae:	e000      	b.n	2cb2 <stage_handle_array+0x2ea>
    2cb0:	2300      	movs	r3, #0
    2cb2:	1c01      	adds	r1, r0, #0
    2cb4:	430b      	orrs	r3, r1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ?  WHITE0 : NOTHING0);
    2cbc:	4b19      	ldr	r3, [pc, #100]	; (2d24 <stage_handle_array+0x35c>)
    2cbe:	681a      	ldr	r2, [r3, #0]
    2cc0:	2346      	movs	r3, #70	; 0x46
    2cc2:	18fb      	adds	r3, r7, r3
    2cc4:	881b      	ldrh	r3, [r3, #0]
    2cc6:	18d2      	adds	r2, r2, r3
    2cc8:	4b16      	ldr	r3, [pc, #88]	; (2d24 <stage_handle_array+0x35c>)
    2cca:	6819      	ldr	r1, [r3, #0]
    2ccc:	2346      	movs	r3, #70	; 0x46
    2cce:	18fb      	adds	r3, r7, r3
    2cd0:	881b      	ldrh	r3, [r3, #0]
    2cd2:	18cb      	adds	r3, r1, r3
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	b2d8      	uxtb	r0, r3
    2cd8:	2337      	movs	r3, #55	; 0x37
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	2101      	movs	r1, #1
    2ce0:	400b      	ands	r3, r1
    2ce2:	d001      	beq.n	2ce8 <stage_handle_array+0x320>
    2ce4:	2302      	movs	r3, #2
    2ce6:	e000      	b.n	2cea <stage_handle_array+0x322>
    2ce8:	2300      	movs	r3, #0
    2cea:	1c01      	adds	r1, r0, #0
    2cec:	430b      	orrs	r3, r1
    2cee:	b2db      	uxtb	r3, r3
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ?  WHITE0 : NOTHING0);
    2cf4:	4b0c      	ldr	r3, [pc, #48]	; (2d28 <stage_handle_array+0x360>)
    2cf6:	681a      	ldr	r2, [r3, #0]
    2cf8:	2342      	movs	r3, #66	; 0x42
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	18d3      	adds	r3, r2, r3
    2d00:	2237      	movs	r2, #55	; 0x37
    2d02:	18ba      	adds	r2, r7, r2
    2d04:	7812      	ldrb	r2, [r2, #0]
    2d06:	b252      	sxtb	r2, r2
    2d08:	2a00      	cmp	r2, #0
    2d0a:	da0f      	bge.n	2d2c <stage_handle_array+0x364>
    2d0c:	2202      	movs	r2, #2
    2d0e:	e00e      	b.n	2d2e <stage_handle_array+0x366>
    2d10:	20000104 	.word	0x20000104
    2d14:	0000444d 	.word	0x0000444d
    2d18:	20000118 	.word	0x20000118
    2d1c:	0000a8a8 	.word	0x0000a8a8
    2d20:	20000100 	.word	0x20000100
    2d24:	2000010c 	.word	0x2000010c
    2d28:	20000108 	.word	0x20000108
    2d2c:	2200      	movs	r2, #0
    2d2e:	701a      	strb	r2, [r3, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ?  WHITE1 : NOTHING1);
    2d30:	4bc9      	ldr	r3, [pc, #804]	; (3058 <stage_handle_array+0x690>)
    2d32:	681a      	ldr	r2, [r3, #0]
    2d34:	2342      	movs	r3, #66	; 0x42
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	881b      	ldrh	r3, [r3, #0]
    2d3a:	18d2      	adds	r2, r2, r3
    2d3c:	4bc6      	ldr	r3, [pc, #792]	; (3058 <stage_handle_array+0x690>)
    2d3e:	6819      	ldr	r1, [r3, #0]
    2d40:	2342      	movs	r3, #66	; 0x42
    2d42:	18fb      	adds	r3, r7, r3
    2d44:	881b      	ldrh	r3, [r3, #0]
    2d46:	18cb      	adds	r3, r1, r3
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	b2d8      	uxtb	r0, r3
    2d4c:	2337      	movs	r3, #55	; 0x37
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	781b      	ldrb	r3, [r3, #0]
    2d52:	2120      	movs	r1, #32
    2d54:	400b      	ands	r3, r1
    2d56:	d001      	beq.n	2d5c <stage_handle_array+0x394>
    2d58:	2308      	movs	r3, #8
    2d5a:	e000      	b.n	2d5e <stage_handle_array+0x396>
    2d5c:	2300      	movs	r3, #0
    2d5e:	1c01      	adds	r1, r0, #0
    2d60:	430b      	orrs	r3, r1
    2d62:	b2db      	uxtb	r3, r3
    2d64:	b2db      	uxtb	r3, r3
    2d66:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ?  WHITE2 : NOTHING2);
    2d68:	4bbb      	ldr	r3, [pc, #748]	; (3058 <stage_handle_array+0x690>)
    2d6a:	681a      	ldr	r2, [r3, #0]
    2d6c:	2342      	movs	r3, #66	; 0x42
    2d6e:	18fb      	adds	r3, r7, r3
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	18d2      	adds	r2, r2, r3
    2d74:	4bb8      	ldr	r3, [pc, #736]	; (3058 <stage_handle_array+0x690>)
    2d76:	6819      	ldr	r1, [r3, #0]
    2d78:	2342      	movs	r3, #66	; 0x42
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	18cb      	adds	r3, r1, r3
    2d80:	781b      	ldrb	r3, [r3, #0]
    2d82:	b2d8      	uxtb	r0, r3
    2d84:	2337      	movs	r3, #55	; 0x37
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	781b      	ldrb	r3, [r3, #0]
    2d8a:	2108      	movs	r1, #8
    2d8c:	400b      	ands	r3, r1
    2d8e:	d001      	beq.n	2d94 <stage_handle_array+0x3cc>
    2d90:	2320      	movs	r3, #32
    2d92:	e000      	b.n	2d96 <stage_handle_array+0x3ce>
    2d94:	2300      	movs	r3, #0
    2d96:	1c01      	adds	r1, r0, #0
    2d98:	430b      	orrs	r3, r1
    2d9a:	b2db      	uxtb	r3, r3
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ?  WHITE3 : NOTHING3);
    2da0:	4bad      	ldr	r3, [pc, #692]	; (3058 <stage_handle_array+0x690>)
    2da2:	681a      	ldr	r2, [r3, #0]
    2da4:	2342      	movs	r3, #66	; 0x42
    2da6:	18fb      	adds	r3, r7, r3
    2da8:	881b      	ldrh	r3, [r3, #0]
    2daa:	2142      	movs	r1, #66	; 0x42
    2dac:	1879      	adds	r1, r7, r1
    2dae:	1e58      	subs	r0, r3, #1
    2db0:	8008      	strh	r0, [r1, #0]
    2db2:	1c19      	adds	r1, r3, #0
    2db4:	1851      	adds	r1, r2, r1
    2db6:	4aa8      	ldr	r2, [pc, #672]	; (3058 <stage_handle_array+0x690>)
    2db8:	6812      	ldr	r2, [r2, #0]
    2dba:	18d3      	adds	r3, r2, r3
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	b2d8      	uxtb	r0, r3
    2dc0:	2337      	movs	r3, #55	; 0x37
    2dc2:	18fb      	adds	r3, r7, r3
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	2202      	movs	r2, #2
    2dc8:	4013      	ands	r3, r2
    2dca:	d001      	beq.n	2dd0 <stage_handle_array+0x408>
    2dcc:	2380      	movs	r3, #128	; 0x80
    2dce:	e000      	b.n	2dd2 <stage_handle_array+0x40a>
    2dd0:	2300      	movs	r3, #0
    2dd2:	1c02      	adds	r2, r0, #0
    2dd4:	4313      	orrs	r3, r2
    2dd6:	b2db      	uxtb	r3, r3
    2dd8:	b2db      	uxtb	r3, r3
    2dda:	700b      	strb	r3, [r1, #0]
						break;
    2ddc:	e199      	b.n	3112 <stage_handle_array+0x74a>
					case Stage3: // Inverse new image
					data_line_odd[x]     = ((temp_byte & 0x40) ? BLACK3  : NOTHING3);
    2dde:	4b9f      	ldr	r3, [pc, #636]	; (305c <stage_handle_array+0x694>)
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	2346      	movs	r3, #70	; 0x46
    2de4:	18fb      	adds	r3, r7, r3
    2de6:	881b      	ldrh	r3, [r3, #0]
    2de8:	18d3      	adds	r3, r2, r3
    2dea:	2237      	movs	r2, #55	; 0x37
    2dec:	18ba      	adds	r2, r7, r2
    2dee:	7812      	ldrb	r2, [r2, #0]
    2df0:	2140      	movs	r1, #64	; 0x40
    2df2:	400a      	ands	r2, r1
    2df4:	d001      	beq.n	2dfa <stage_handle_array+0x432>
    2df6:	22c0      	movs	r2, #192	; 0xc0
    2df8:	e000      	b.n	2dfc <stage_handle_array+0x434>
    2dfa:	2200      	movs	r2, #0
    2dfc:	701a      	strb	r2, [r3, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? BLACK2  : NOTHING2);
    2dfe:	4b97      	ldr	r3, [pc, #604]	; (305c <stage_handle_array+0x694>)
    2e00:	681a      	ldr	r2, [r3, #0]
    2e02:	2346      	movs	r3, #70	; 0x46
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	881b      	ldrh	r3, [r3, #0]
    2e08:	18d2      	adds	r2, r2, r3
    2e0a:	4b94      	ldr	r3, [pc, #592]	; (305c <stage_handle_array+0x694>)
    2e0c:	6819      	ldr	r1, [r3, #0]
    2e0e:	2346      	movs	r3, #70	; 0x46
    2e10:	18fb      	adds	r3, r7, r3
    2e12:	881b      	ldrh	r3, [r3, #0]
    2e14:	18cb      	adds	r3, r1, r3
    2e16:	781b      	ldrb	r3, [r3, #0]
    2e18:	b2d8      	uxtb	r0, r3
    2e1a:	2337      	movs	r3, #55	; 0x37
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	2110      	movs	r1, #16
    2e22:	400b      	ands	r3, r1
    2e24:	d001      	beq.n	2e2a <stage_handle_array+0x462>
    2e26:	2330      	movs	r3, #48	; 0x30
    2e28:	e000      	b.n	2e2c <stage_handle_array+0x464>
    2e2a:	2300      	movs	r3, #0
    2e2c:	1c01      	adds	r1, r0, #0
    2e2e:	430b      	orrs	r3, r1
    2e30:	b2db      	uxtb	r3, r3
    2e32:	b2db      	uxtb	r3, r3
    2e34:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? BLACK1  : NOTHING1);
    2e36:	4b89      	ldr	r3, [pc, #548]	; (305c <stage_handle_array+0x694>)
    2e38:	681a      	ldr	r2, [r3, #0]
    2e3a:	2346      	movs	r3, #70	; 0x46
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	881b      	ldrh	r3, [r3, #0]
    2e40:	18d2      	adds	r2, r2, r3
    2e42:	4b86      	ldr	r3, [pc, #536]	; (305c <stage_handle_array+0x694>)
    2e44:	6819      	ldr	r1, [r3, #0]
    2e46:	2346      	movs	r3, #70	; 0x46
    2e48:	18fb      	adds	r3, r7, r3
    2e4a:	881b      	ldrh	r3, [r3, #0]
    2e4c:	18cb      	adds	r3, r1, r3
    2e4e:	781b      	ldrb	r3, [r3, #0]
    2e50:	b2d8      	uxtb	r0, r3
    2e52:	2337      	movs	r3, #55	; 0x37
    2e54:	18fb      	adds	r3, r7, r3
    2e56:	781b      	ldrb	r3, [r3, #0]
    2e58:	2104      	movs	r1, #4
    2e5a:	400b      	ands	r3, r1
    2e5c:	d001      	beq.n	2e62 <stage_handle_array+0x49a>
    2e5e:	230c      	movs	r3, #12
    2e60:	e000      	b.n	2e64 <stage_handle_array+0x49c>
    2e62:	2300      	movs	r3, #0
    2e64:	1c01      	adds	r1, r0, #0
    2e66:	430b      	orrs	r3, r1
    2e68:	b2db      	uxtb	r3, r3
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? BLACK0  : NOTHING0);
    2e6e:	4b7b      	ldr	r3, [pc, #492]	; (305c <stage_handle_array+0x694>)
    2e70:	681a      	ldr	r2, [r3, #0]
    2e72:	2346      	movs	r3, #70	; 0x46
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	881b      	ldrh	r3, [r3, #0]
    2e78:	18d2      	adds	r2, r2, r3
    2e7a:	4b78      	ldr	r3, [pc, #480]	; (305c <stage_handle_array+0x694>)
    2e7c:	6819      	ldr	r1, [r3, #0]
    2e7e:	2346      	movs	r3, #70	; 0x46
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	881b      	ldrh	r3, [r3, #0]
    2e84:	18cb      	adds	r3, r1, r3
    2e86:	781b      	ldrb	r3, [r3, #0]
    2e88:	b2d8      	uxtb	r0, r3
    2e8a:	2337      	movs	r3, #55	; 0x37
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	2101      	movs	r1, #1
    2e92:	400b      	ands	r3, r1
    2e94:	d001      	beq.n	2e9a <stage_handle_array+0x4d2>
    2e96:	2303      	movs	r3, #3
    2e98:	e000      	b.n	2e9c <stage_handle_array+0x4d4>
    2e9a:	2300      	movs	r3, #0
    2e9c:	1c01      	adds	r1, r0, #0
    2e9e:	430b      	orrs	r3, r1
    2ea0:	b2db      	uxtb	r3, r3
    2ea2:	b2db      	uxtb	r3, r3
    2ea4:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? BLACK0  : NOTHING0);
    2ea6:	4b6c      	ldr	r3, [pc, #432]	; (3058 <stage_handle_array+0x690>)
    2ea8:	681a      	ldr	r2, [r3, #0]
    2eaa:	2342      	movs	r3, #66	; 0x42
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	881b      	ldrh	r3, [r3, #0]
    2eb0:	18d3      	adds	r3, r2, r3
    2eb2:	2237      	movs	r2, #55	; 0x37
    2eb4:	18ba      	adds	r2, r7, r2
    2eb6:	7812      	ldrb	r2, [r2, #0]
    2eb8:	b252      	sxtb	r2, r2
    2eba:	2a00      	cmp	r2, #0
    2ebc:	da01      	bge.n	2ec2 <stage_handle_array+0x4fa>
    2ebe:	2203      	movs	r2, #3
    2ec0:	e000      	b.n	2ec4 <stage_handle_array+0x4fc>
    2ec2:	2200      	movs	r2, #0
    2ec4:	701a      	strb	r2, [r3, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? BLACK1  : NOTHING1);
    2ec6:	4b64      	ldr	r3, [pc, #400]	; (3058 <stage_handle_array+0x690>)
    2ec8:	681a      	ldr	r2, [r3, #0]
    2eca:	2342      	movs	r3, #66	; 0x42
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	881b      	ldrh	r3, [r3, #0]
    2ed0:	18d2      	adds	r2, r2, r3
    2ed2:	4b61      	ldr	r3, [pc, #388]	; (3058 <stage_handle_array+0x690>)
    2ed4:	6819      	ldr	r1, [r3, #0]
    2ed6:	2342      	movs	r3, #66	; 0x42
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	881b      	ldrh	r3, [r3, #0]
    2edc:	18cb      	adds	r3, r1, r3
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	b2d8      	uxtb	r0, r3
    2ee2:	2337      	movs	r3, #55	; 0x37
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	2120      	movs	r1, #32
    2eea:	400b      	ands	r3, r1
    2eec:	d001      	beq.n	2ef2 <stage_handle_array+0x52a>
    2eee:	230c      	movs	r3, #12
    2ef0:	e000      	b.n	2ef4 <stage_handle_array+0x52c>
    2ef2:	2300      	movs	r3, #0
    2ef4:	1c01      	adds	r1, r0, #0
    2ef6:	430b      	orrs	r3, r1
    2ef8:	b2db      	uxtb	r3, r3
    2efa:	b2db      	uxtb	r3, r3
    2efc:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? BLACK2  : NOTHING2);
    2efe:	4b56      	ldr	r3, [pc, #344]	; (3058 <stage_handle_array+0x690>)
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	2342      	movs	r3, #66	; 0x42
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	881b      	ldrh	r3, [r3, #0]
    2f08:	18d2      	adds	r2, r2, r3
    2f0a:	4b53      	ldr	r3, [pc, #332]	; (3058 <stage_handle_array+0x690>)
    2f0c:	6819      	ldr	r1, [r3, #0]
    2f0e:	2342      	movs	r3, #66	; 0x42
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	881b      	ldrh	r3, [r3, #0]
    2f14:	18cb      	adds	r3, r1, r3
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	b2d8      	uxtb	r0, r3
    2f1a:	2337      	movs	r3, #55	; 0x37
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	781b      	ldrb	r3, [r3, #0]
    2f20:	2108      	movs	r1, #8
    2f22:	400b      	ands	r3, r1
    2f24:	d001      	beq.n	2f2a <stage_handle_array+0x562>
    2f26:	2330      	movs	r3, #48	; 0x30
    2f28:	e000      	b.n	2f2c <stage_handle_array+0x564>
    2f2a:	2300      	movs	r3, #0
    2f2c:	1c01      	adds	r1, r0, #0
    2f2e:	430b      	orrs	r3, r1
    2f30:	b2db      	uxtb	r3, r3
    2f32:	b2db      	uxtb	r3, r3
    2f34:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? BLACK3  : NOTHING3);
    2f36:	4b48      	ldr	r3, [pc, #288]	; (3058 <stage_handle_array+0x690>)
    2f38:	681a      	ldr	r2, [r3, #0]
    2f3a:	2342      	movs	r3, #66	; 0x42
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	881b      	ldrh	r3, [r3, #0]
    2f40:	2142      	movs	r1, #66	; 0x42
    2f42:	1879      	adds	r1, r7, r1
    2f44:	1e58      	subs	r0, r3, #1
    2f46:	8008      	strh	r0, [r1, #0]
    2f48:	1c19      	adds	r1, r3, #0
    2f4a:	1851      	adds	r1, r2, r1
    2f4c:	4a42      	ldr	r2, [pc, #264]	; (3058 <stage_handle_array+0x690>)
    2f4e:	6812      	ldr	r2, [r2, #0]
    2f50:	18d3      	adds	r3, r2, r3
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	b2d8      	uxtb	r0, r3
    2f56:	2337      	movs	r3, #55	; 0x37
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	2202      	movs	r2, #2
    2f5e:	4013      	ands	r3, r2
    2f60:	d001      	beq.n	2f66 <stage_handle_array+0x59e>
    2f62:	23c0      	movs	r3, #192	; 0xc0
    2f64:	e000      	b.n	2f68 <stage_handle_array+0x5a0>
    2f66:	2300      	movs	r3, #0
    2f68:	1c02      	adds	r2, r0, #0
    2f6a:	4313      	orrs	r3, r2
    2f6c:	b2db      	uxtb	r3, r3
    2f6e:	b2db      	uxtb	r3, r3
    2f70:	700b      	strb	r3, [r1, #0]
						break;
    2f72:	e0ce      	b.n	3112 <stage_handle_array+0x74a>
					case Stage4: // New image
					data_line_odd[x]     = ((temp_byte & 0x40) ? WHITE3  : BLACK3 );
    2f74:	4b39      	ldr	r3, [pc, #228]	; (305c <stage_handle_array+0x694>)
    2f76:	681a      	ldr	r2, [r3, #0]
    2f78:	2346      	movs	r3, #70	; 0x46
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	881b      	ldrh	r3, [r3, #0]
    2f7e:	18d3      	adds	r3, r2, r3
    2f80:	2237      	movs	r2, #55	; 0x37
    2f82:	18ba      	adds	r2, r7, r2
    2f84:	7812      	ldrb	r2, [r2, #0]
    2f86:	2140      	movs	r1, #64	; 0x40
    2f88:	400a      	ands	r2, r1
    2f8a:	d001      	beq.n	2f90 <stage_handle_array+0x5c8>
    2f8c:	2280      	movs	r2, #128	; 0x80
    2f8e:	e000      	b.n	2f92 <stage_handle_array+0x5ca>
    2f90:	22c0      	movs	r2, #192	; 0xc0
    2f92:	701a      	strb	r2, [r3, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? WHITE2  : BLACK2 );
    2f94:	4b31      	ldr	r3, [pc, #196]	; (305c <stage_handle_array+0x694>)
    2f96:	681a      	ldr	r2, [r3, #0]
    2f98:	2346      	movs	r3, #70	; 0x46
    2f9a:	18fb      	adds	r3, r7, r3
    2f9c:	881b      	ldrh	r3, [r3, #0]
    2f9e:	18d2      	adds	r2, r2, r3
    2fa0:	4b2e      	ldr	r3, [pc, #184]	; (305c <stage_handle_array+0x694>)
    2fa2:	6819      	ldr	r1, [r3, #0]
    2fa4:	2346      	movs	r3, #70	; 0x46
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	881b      	ldrh	r3, [r3, #0]
    2faa:	18cb      	adds	r3, r1, r3
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	b2d8      	uxtb	r0, r3
    2fb0:	2337      	movs	r3, #55	; 0x37
    2fb2:	18fb      	adds	r3, r7, r3
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	2110      	movs	r1, #16
    2fb8:	400b      	ands	r3, r1
    2fba:	d001      	beq.n	2fc0 <stage_handle_array+0x5f8>
    2fbc:	2320      	movs	r3, #32
    2fbe:	e000      	b.n	2fc2 <stage_handle_array+0x5fa>
    2fc0:	2330      	movs	r3, #48	; 0x30
    2fc2:	1c01      	adds	r1, r0, #0
    2fc4:	430b      	orrs	r3, r1
    2fc6:	b2db      	uxtb	r3, r3
    2fc8:	b2db      	uxtb	r3, r3
    2fca:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? WHITE1  : BLACK1 );
    2fcc:	4b23      	ldr	r3, [pc, #140]	; (305c <stage_handle_array+0x694>)
    2fce:	681a      	ldr	r2, [r3, #0]
    2fd0:	2346      	movs	r3, #70	; 0x46
    2fd2:	18fb      	adds	r3, r7, r3
    2fd4:	881b      	ldrh	r3, [r3, #0]
    2fd6:	18d2      	adds	r2, r2, r3
    2fd8:	4b20      	ldr	r3, [pc, #128]	; (305c <stage_handle_array+0x694>)
    2fda:	6819      	ldr	r1, [r3, #0]
    2fdc:	2346      	movs	r3, #70	; 0x46
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	881b      	ldrh	r3, [r3, #0]
    2fe2:	18cb      	adds	r3, r1, r3
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	b2d8      	uxtb	r0, r3
    2fe8:	2337      	movs	r3, #55	; 0x37
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	2104      	movs	r1, #4
    2ff0:	400b      	ands	r3, r1
    2ff2:	d001      	beq.n	2ff8 <stage_handle_array+0x630>
    2ff4:	2308      	movs	r3, #8
    2ff6:	e000      	b.n	2ffa <stage_handle_array+0x632>
    2ff8:	230c      	movs	r3, #12
    2ffa:	1c01      	adds	r1, r0, #0
    2ffc:	430b      	orrs	r3, r1
    2ffe:	b2db      	uxtb	r3, r3
    3000:	b2db      	uxtb	r3, r3
    3002:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? WHITE0  : BLACK0 );
    3004:	4b15      	ldr	r3, [pc, #84]	; (305c <stage_handle_array+0x694>)
    3006:	681a      	ldr	r2, [r3, #0]
    3008:	2346      	movs	r3, #70	; 0x46
    300a:	18fb      	adds	r3, r7, r3
    300c:	881b      	ldrh	r3, [r3, #0]
    300e:	18d2      	adds	r2, r2, r3
    3010:	4b12      	ldr	r3, [pc, #72]	; (305c <stage_handle_array+0x694>)
    3012:	6819      	ldr	r1, [r3, #0]
    3014:	2346      	movs	r3, #70	; 0x46
    3016:	18fb      	adds	r3, r7, r3
    3018:	881b      	ldrh	r3, [r3, #0]
    301a:	18cb      	adds	r3, r1, r3
    301c:	781b      	ldrb	r3, [r3, #0]
    301e:	b2d8      	uxtb	r0, r3
    3020:	2337      	movs	r3, #55	; 0x37
    3022:	18fb      	adds	r3, r7, r3
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	2101      	movs	r1, #1
    3028:	400b      	ands	r3, r1
    302a:	d001      	beq.n	3030 <stage_handle_array+0x668>
    302c:	2302      	movs	r3, #2
    302e:	e000      	b.n	3032 <stage_handle_array+0x66a>
    3030:	2303      	movs	r3, #3
    3032:	1c01      	adds	r1, r0, #0
    3034:	430b      	orrs	r3, r1
    3036:	b2db      	uxtb	r3, r3
    3038:	b2db      	uxtb	r3, r3
    303a:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? WHITE0  : BLACK0 );
    303c:	4b06      	ldr	r3, [pc, #24]	; (3058 <stage_handle_array+0x690>)
    303e:	681a      	ldr	r2, [r3, #0]
    3040:	2342      	movs	r3, #66	; 0x42
    3042:	18fb      	adds	r3, r7, r3
    3044:	881b      	ldrh	r3, [r3, #0]
    3046:	18d3      	adds	r3, r2, r3
    3048:	2237      	movs	r2, #55	; 0x37
    304a:	18ba      	adds	r2, r7, r2
    304c:	7812      	ldrb	r2, [r2, #0]
    304e:	b252      	sxtb	r2, r2
    3050:	2a00      	cmp	r2, #0
    3052:	da05      	bge.n	3060 <stage_handle_array+0x698>
    3054:	2202      	movs	r2, #2
    3056:	e004      	b.n	3062 <stage_handle_array+0x69a>
    3058:	20000108 	.word	0x20000108
    305c:	2000010c 	.word	0x2000010c
    3060:	2203      	movs	r2, #3
    3062:	701a      	strb	r2, [r3, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? WHITE1  : BLACK1 );
    3064:	4b81      	ldr	r3, [pc, #516]	; (326c <stage_handle_array+0x8a4>)
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	2342      	movs	r3, #66	; 0x42
    306a:	18fb      	adds	r3, r7, r3
    306c:	881b      	ldrh	r3, [r3, #0]
    306e:	18d2      	adds	r2, r2, r3
    3070:	4b7e      	ldr	r3, [pc, #504]	; (326c <stage_handle_array+0x8a4>)
    3072:	6819      	ldr	r1, [r3, #0]
    3074:	2342      	movs	r3, #66	; 0x42
    3076:	18fb      	adds	r3, r7, r3
    3078:	881b      	ldrh	r3, [r3, #0]
    307a:	18cb      	adds	r3, r1, r3
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	b2d8      	uxtb	r0, r3
    3080:	2337      	movs	r3, #55	; 0x37
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	2120      	movs	r1, #32
    3088:	400b      	ands	r3, r1
    308a:	d001      	beq.n	3090 <stage_handle_array+0x6c8>
    308c:	2308      	movs	r3, #8
    308e:	e000      	b.n	3092 <stage_handle_array+0x6ca>
    3090:	230c      	movs	r3, #12
    3092:	1c01      	adds	r1, r0, #0
    3094:	430b      	orrs	r3, r1
    3096:	b2db      	uxtb	r3, r3
    3098:	b2db      	uxtb	r3, r3
    309a:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? WHITE2  : BLACK2 );
    309c:	4b73      	ldr	r3, [pc, #460]	; (326c <stage_handle_array+0x8a4>)
    309e:	681a      	ldr	r2, [r3, #0]
    30a0:	2342      	movs	r3, #66	; 0x42
    30a2:	18fb      	adds	r3, r7, r3
    30a4:	881b      	ldrh	r3, [r3, #0]
    30a6:	18d2      	adds	r2, r2, r3
    30a8:	4b70      	ldr	r3, [pc, #448]	; (326c <stage_handle_array+0x8a4>)
    30aa:	6819      	ldr	r1, [r3, #0]
    30ac:	2342      	movs	r3, #66	; 0x42
    30ae:	18fb      	adds	r3, r7, r3
    30b0:	881b      	ldrh	r3, [r3, #0]
    30b2:	18cb      	adds	r3, r1, r3
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	b2d8      	uxtb	r0, r3
    30b8:	2337      	movs	r3, #55	; 0x37
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	781b      	ldrb	r3, [r3, #0]
    30be:	2108      	movs	r1, #8
    30c0:	400b      	ands	r3, r1
    30c2:	d001      	beq.n	30c8 <stage_handle_array+0x700>
    30c4:	2320      	movs	r3, #32
    30c6:	e000      	b.n	30ca <stage_handle_array+0x702>
    30c8:	2330      	movs	r3, #48	; 0x30
    30ca:	1c01      	adds	r1, r0, #0
    30cc:	430b      	orrs	r3, r1
    30ce:	b2db      	uxtb	r3, r3
    30d0:	b2db      	uxtb	r3, r3
    30d2:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? WHITE3  : BLACK3 );
    30d4:	4b65      	ldr	r3, [pc, #404]	; (326c <stage_handle_array+0x8a4>)
    30d6:	681a      	ldr	r2, [r3, #0]
    30d8:	2342      	movs	r3, #66	; 0x42
    30da:	18fb      	adds	r3, r7, r3
    30dc:	881b      	ldrh	r3, [r3, #0]
    30de:	2142      	movs	r1, #66	; 0x42
    30e0:	1879      	adds	r1, r7, r1
    30e2:	1e58      	subs	r0, r3, #1
    30e4:	8008      	strh	r0, [r1, #0]
    30e6:	1c19      	adds	r1, r3, #0
    30e8:	1851      	adds	r1, r2, r1
    30ea:	4a60      	ldr	r2, [pc, #384]	; (326c <stage_handle_array+0x8a4>)
    30ec:	6812      	ldr	r2, [r2, #0]
    30ee:	18d3      	adds	r3, r2, r3
    30f0:	781b      	ldrb	r3, [r3, #0]
    30f2:	b2d8      	uxtb	r0, r3
    30f4:	2337      	movs	r3, #55	; 0x37
    30f6:	18fb      	adds	r3, r7, r3
    30f8:	781b      	ldrb	r3, [r3, #0]
    30fa:	2202      	movs	r2, #2
    30fc:	4013      	ands	r3, r2
    30fe:	d001      	beq.n	3104 <stage_handle_array+0x73c>
    3100:	2380      	movs	r3, #128	; 0x80
    3102:	e000      	b.n	3106 <stage_handle_array+0x73e>
    3104:	23c0      	movs	r3, #192	; 0xc0
    3106:	1c02      	adds	r2, r0, #0
    3108:	4313      	orrs	r3, r2
    310a:	b2db      	uxtb	r3, r3
    310c:	b2db      	uxtb	r3, r3
    310e:	700b      	strb	r3, [r1, #0]
						break;
    3110:	46c0      	nop			; (mov r8, r8)
            if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
			}
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    3112:	2346      	movs	r3, #70	; 0x46
    3114:	18fb      	adds	r3, r7, r3
    3116:	881a      	ldrh	r2, [r3, #0]
    3118:	2346      	movs	r3, #70	; 0x46
    311a:	18fb      	adds	r3, r7, r3
    311c:	3201      	adds	r2, #1
    311e:	801a      	strh	r2, [r3, #0]
    3120:	4b53      	ldr	r3, [pc, #332]	; (3270 <stage_handle_array+0x8a8>)
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	1c19      	adds	r1, r3, #0
    3126:	4a53      	ldr	r2, [pc, #332]	; (3274 <stage_handle_array+0x8ac>)
    3128:	1c0b      	adds	r3, r1, #0
    312a:	009b      	lsls	r3, r3, #2
    312c:	185b      	adds	r3, r3, r1
    312e:	009b      	lsls	r3, r3, #2
    3130:	18d3      	adds	r3, r2, r3
    3132:	3308      	adds	r3, #8
    3134:	885b      	ldrh	r3, [r3, #2]
    3136:	2246      	movs	r2, #70	; 0x46
    3138:	18ba      	adds	r2, r7, r2
    313a:	8812      	ldrh	r2, [r2, #0]
    313c:	429a      	cmp	r2, r3
    313e:	d200      	bcs.n	3142 <stage_handle_array+0x77a>
    3140:	e491      	b.n	2a66 <stage_handle_array+0x9e>
						break;
				}

			}

            image_data_address+=Line_Offset(cur_EPD_type_index);
    3142:	4b4b      	ldr	r3, [pc, #300]	; (3270 <stage_handle_array+0x8a8>)
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	1c19      	adds	r1, r3, #0
    3148:	4a4a      	ldr	r2, [pc, #296]	; (3274 <stage_handle_array+0x8ac>)
    314a:	1c0b      	adds	r3, r1, #0
    314c:	009b      	lsls	r3, r3, #2
    314e:	185b      	adds	r3, r3, r1
    3150:	009b      	lsls	r3, r3, #2
    3152:	18d3      	adds	r3, r2, r3
    3154:	3308      	adds	r3, #8
    3156:	885b      	ldrh	r3, [r3, #2]
    3158:	1c1a      	adds	r2, r3, #0
    315a:	68bb      	ldr	r3, [r7, #8]
    315c:	189b      	adds	r3, r3, r2
    315e:	60bb      	str	r3, [r7, #8]

            scanline_no= (COG_parameters[cur_EPD_type_index].vertical_size-1)-y;
    3160:	4b43      	ldr	r3, [pc, #268]	; (3270 <stage_handle_array+0x8a8>)
    3162:	781b      	ldrb	r3, [r3, #0]
    3164:	1c19      	adds	r1, r3, #0
    3166:	4a43      	ldr	r2, [pc, #268]	; (3274 <stage_handle_array+0x8ac>)
    3168:	1c0b      	adds	r3, r1, #0
    316a:	009b      	lsls	r3, r3, #2
    316c:	185b      	adds	r3, r3, r1
    316e:	009b      	lsls	r3, r3, #2
    3170:	18d3      	adds	r3, r2, r3
    3172:	3308      	adds	r3, #8
    3174:	889a      	ldrh	r2, [r3, #4]
    3176:	2344      	movs	r3, #68	; 0x44
    3178:	18fb      	adds	r3, r7, r3
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	1ad3      	subs	r3, r2, r3
    317e:	b29b      	uxth	r3, r3
    3180:	3b01      	subs	r3, #1
    3182:	b29a      	uxth	r2, r3
    3184:	2340      	movs	r3, #64	; 0x40
    3186:	18fb      	adds	r3, r7, r3
    3188:	801a      	strh	r2, [r3, #0]

			/* Scan byte shift per data line */
			data_line_scan[(scanline_no>>2)] = SCAN_TABLE[(scanline_no%4)];
    318a:	4b3b      	ldr	r3, [pc, #236]	; (3278 <stage_handle_array+0x8b0>)
    318c:	681a      	ldr	r2, [r3, #0]
    318e:	2340      	movs	r3, #64	; 0x40
    3190:	18fb      	adds	r3, r7, r3
    3192:	2100      	movs	r1, #0
    3194:	5e5b      	ldrsh	r3, [r3, r1]
    3196:	109b      	asrs	r3, r3, #2
    3198:	b29b      	uxth	r3, r3
    319a:	b21b      	sxth	r3, r3
    319c:	18d2      	adds	r2, r2, r3
    319e:	2340      	movs	r3, #64	; 0x40
    31a0:	18fb      	adds	r3, r7, r3
    31a2:	2100      	movs	r1, #0
    31a4:	5e5b      	ldrsh	r3, [r3, r1]
    31a6:	4935      	ldr	r1, [pc, #212]	; (327c <stage_handle_array+0x8b4>)
    31a8:	400b      	ands	r3, r1
    31aa:	d504      	bpl.n	31b6 <stage_handle_array+0x7ee>
    31ac:	3b01      	subs	r3, #1
    31ae:	2104      	movs	r1, #4
    31b0:	4249      	negs	r1, r1
    31b2:	430b      	orrs	r3, r1
    31b4:	3301      	adds	r3, #1
    31b6:	b29b      	uxth	r3, r3
    31b8:	b21b      	sxth	r3, r3
    31ba:	4931      	ldr	r1, [pc, #196]	; (3280 <stage_handle_array+0x8b8>)
    31bc:	5ccb      	ldrb	r3, [r1, r3]
    31be:	7013      	strb	r3, [r2, #0]

			/* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
			COG_parameters[cur_EPD_type_index].data_line_size);
    31c0:	4b2b      	ldr	r3, [pc, #172]	; (3270 <stage_handle_array+0x8a8>)
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	1c19      	adds	r1, r3, #0
    31c6:	4a2b      	ldr	r2, [pc, #172]	; (3274 <stage_handle_array+0x8ac>)
    31c8:	1c0b      	adds	r3, r1, #0
    31ca:	009b      	lsls	r3, r3, #2
    31cc:	185b      	adds	r3, r3, r1
    31ce:	009b      	lsls	r3, r3, #2
    31d0:	18d3      	adds	r3, r2, r3
    31d2:	3308      	adds	r3, #8
    31d4:	799b      	ldrb	r3, [r3, #6]

			/* Scan byte shift per data line */
			data_line_scan[(scanline_no>>2)] = SCAN_TABLE[(scanline_no%4)];

			/* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
    31d6:	1c1a      	adds	r2, r3, #0
    31d8:	4b2a      	ldr	r3, [pc, #168]	; (3284 <stage_handle_array+0x8bc>)
    31da:	200a      	movs	r0, #10
    31dc:	1c19      	adds	r1, r3, #0
    31de:	4b2a      	ldr	r3, [pc, #168]	; (3288 <stage_handle_array+0x8c0>)
    31e0:	4798      	blx	r3
			COG_parameters[cur_EPD_type_index].data_line_size);

			/* Turn on Output Enable */
			epd_spi_send_byte (0x02, 0x07);
    31e2:	2002      	movs	r0, #2
    31e4:	2107      	movs	r1, #7
    31e6:	4b29      	ldr	r3, [pc, #164]	; (328c <stage_handle_array+0x8c4>)
    31e8:	4798      	blx	r3

			data_line_scan[(scanline_no>>2)]=0;
    31ea:	4b23      	ldr	r3, [pc, #140]	; (3278 <stage_handle_array+0x8b0>)
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	2340      	movs	r3, #64	; 0x40
    31f0:	18fb      	adds	r3, r7, r3
    31f2:	2100      	movs	r1, #0
    31f4:	5e5b      	ldrsh	r3, [r3, r1]
    31f6:	109b      	asrs	r3, r3, #2
    31f8:	b29b      	uxth	r3, r3
    31fa:	b21b      	sxth	r3, r3
    31fc:	18d3      	adds	r3, r2, r3
    31fe:	2200      	movs	r2, #0
    3200:	701a      	strb	r2, [r3, #0]
	* Per frame */
	do {
		image_prt=backup_image_prt;
        image_data_address=original_image_address;
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
    3202:	2344      	movs	r3, #68	; 0x44
    3204:	18fb      	adds	r3, r7, r3
    3206:	881a      	ldrh	r2, [r3, #0]
    3208:	2344      	movs	r3, #68	; 0x44
    320a:	18fb      	adds	r3, r7, r3
    320c:	3201      	adds	r2, #1
    320e:	801a      	strh	r2, [r3, #0]
    3210:	4b17      	ldr	r3, [pc, #92]	; (3270 <stage_handle_array+0x8a8>)
    3212:	781b      	ldrb	r3, [r3, #0]
    3214:	1c19      	adds	r1, r3, #0
    3216:	4a17      	ldr	r2, [pc, #92]	; (3274 <stage_handle_array+0x8ac>)
    3218:	1c0b      	adds	r3, r1, #0
    321a:	009b      	lsls	r3, r3, #2
    321c:	185b      	adds	r3, r3, r1
    321e:	009b      	lsls	r3, r3, #2
    3220:	18d3      	adds	r3, r2, r3
    3222:	3308      	adds	r3, #8
    3224:	889b      	ldrh	r3, [r3, #4]
    3226:	2244      	movs	r2, #68	; 0x44
    3228:	18ba      	adds	r2, r7, r2
    322a:	8812      	ldrh	r2, [r2, #0]
    322c:	429a      	cmp	r2, r3
    322e:	d201      	bcs.n	3234 <stage_handle_array+0x86c>
    3230:	f7ff fbe8 	bl	2a04 <stage_handle_array+0x3c>
			epd_spi_send_byte (0x02, 0x07);

			data_line_scan[(scanline_no>>2)]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick();
    3234:	4b16      	ldr	r3, [pc, #88]	; (3290 <stage_handle_array+0x8c8>)
    3236:	4798      	blx	r3
    3238:	1c03      	adds	r3, r0, #0
    323a:	b29a      	uxth	r2, r3
    323c:	4b15      	ldr	r3, [pc, #84]	; (3294 <stage_handle_array+0x8cc>)
    323e:	801a      	strh	r2, [r3, #0]
	} while (stage_time>current_frame_time);
    3240:	4b15      	ldr	r3, [pc, #84]	; (3298 <stage_handle_array+0x8d0>)
    3242:	881a      	ldrh	r2, [r3, #0]
    3244:	4b13      	ldr	r3, [pc, #76]	; (3294 <stage_handle_array+0x8cc>)
    3246:	881b      	ldrh	r3, [r3, #0]
    3248:	429a      	cmp	r2, r3
    324a:	d901      	bls.n	3250 <stage_handle_array+0x888>
    324c:	f7ff fbd0 	bl	29f0 <stage_handle_array+0x28>

	/* Do while the SysTick timer fulfills the stage time */
	while(stage_time>get_current_time_tick());
    3250:	46c0      	nop			; (mov r8, r8)
    3252:	4b11      	ldr	r3, [pc, #68]	; (3298 <stage_handle_array+0x8d0>)
    3254:	881b      	ldrh	r3, [r3, #0]
    3256:	1c1c      	adds	r4, r3, #0
    3258:	4b0d      	ldr	r3, [pc, #52]	; (3290 <stage_handle_array+0x8c8>)
    325a:	4798      	blx	r3
    325c:	1c03      	adds	r3, r0, #0
    325e:	429c      	cmp	r4, r3
    3260:	d8f7      	bhi.n	3252 <stage_handle_array+0x88a>

	/* Stop system timer */
	stop_EPD_timer();
    3262:	4b0e      	ldr	r3, [pc, #56]	; (329c <stage_handle_array+0x8d4>)
    3264:	4798      	blx	r3
}
    3266:	46bd      	mov	sp, r7
    3268:	b013      	add	sp, #76	; 0x4c
    326a:	bd90      	pop	{r4, r7, pc}
    326c:	20000108 	.word	0x20000108
    3270:	20000118 	.word	0x20000118
    3274:	0000a8a8 	.word	0x0000a8a8
    3278:	20000110 	.word	0x20000110
    327c:	80000003 	.word	0x80000003
    3280:	0000a9a8 	.word	0x0000a9a8
    3284:	20000090 	.word	0x20000090
    3288:	000046f1 	.word	0x000046f1
    328c:	00004781 	.word	0x00004781
    3290:	00004481 	.word	0x00004481
    3294:	20000104 	.word	0x20000104
    3298:	2000008e 	.word	0x2000008e
    329c:	0000445d 	.word	0x0000445d

000032a0 <stage_handle_array_for_19_26>:
 * \note For 1.9" and 2.6", the line data flow is half_Scan-Data-half_Scan
 *
 * \param image_ptr The pointer of memory that stores image that will send to COG
 * \param stage_no The assigned stage number that will proceed
 */
static void stage_handle_array_for_19_26(uint8_t *image_prt,long image_data_address,uint8_t stage_no) {
    32a0:	b590      	push	{r4, r7, lr}
    32a2:	b093      	sub	sp, #76	; 0x4c
    32a4:	af00      	add	r7, sp, #0
    32a6:	60f8      	str	r0, [r7, #12]
    32a8:	60b9      	str	r1, [r7, #8]
    32aa:	1dfb      	adds	r3, r7, #7
    32ac:	701a      	strb	r2, [r3, #0]
    uint8_t s_index,b_index,line_len;
    long original_image_address; // Backup original image address
    uint8_t	temp_byte; // Temporary storage for image data check
	uint8_t *backup_image_prt; // Backup image address pointer
	uint8_t byte_array[COG_line_Max_Size];
	backup_image_prt = image_prt;
    32ae:	68fb      	ldr	r3, [r7, #12]
    32b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    original_image_address=image_data_address;
    32b2:	68bb      	ldr	r3, [r7, #8]
    32b4:	63bb      	str	r3, [r7, #56]	; 0x38
	current_frame_time = COG_parameters[cur_EPD_type_index].frame_time_offset;
    32b6:	4baf      	ldr	r3, [pc, #700]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    32b8:	781b      	ldrb	r3, [r3, #0]
    32ba:	1c19      	adds	r1, r3, #0
    32bc:	4aae      	ldr	r2, [pc, #696]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    32be:	1c0b      	adds	r3, r1, #0
    32c0:	009b      	lsls	r3, r3, #2
    32c2:	185b      	adds	r3, r3, r1
    32c4:	009b      	lsls	r3, r3, #2
    32c6:	18d3      	adds	r3, r2, r3
    32c8:	3310      	adds	r3, #16
    32ca:	881a      	ldrh	r2, [r3, #0]
    32cc:	4bab      	ldr	r3, [pc, #684]	; (357c <stage_handle_array_for_19_26+0x2dc>)
    32ce:	801a      	strh	r2, [r3, #0]
	/* Start a system SysTick timer to ensure the same duration of each stage  */
	start_EPD_timer();
    32d0:	4bab      	ldr	r3, [pc, #684]	; (3580 <stage_handle_array_for_19_26+0x2e0>)
    32d2:	4798      	blx	r3
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
    32d4:	4ba7      	ldr	r3, [pc, #668]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    32d6:	781b      	ldrb	r3, [r3, #0]
    32d8:	1c19      	adds	r1, r3, #0
    32da:	4aa7      	ldr	r2, [pc, #668]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    32dc:	1c0b      	adds	r3, r1, #0
    32de:	009b      	lsls	r3, r3, #2
    32e0:	185b      	adds	r3, r3, r1
    32e2:	009b      	lsls	r3, r3, #2
    32e4:	18d3      	adds	r3, r2, r3
    32e6:	3308      	adds	r3, #8
    32e8:	889b      	ldrh	r3, [r3, #4]
    32ea:	08db      	lsrs	r3, r3, #3
    32ec:	b29b      	uxth	r3, r3
    32ee:	b2da      	uxtb	r2, r3
    32f0:	2337      	movs	r3, #55	; 0x37
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	3a01      	subs	r2, #1
    32f6:	701a      	strb	r2, [r3, #0]
	/* Do while total time of frames exceed stage time
	* Per frame */
	do {
		image_prt=backup_image_prt;
    32f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    32fa:	60fb      	str	r3, [r7, #12]
        image_data_address=original_image_address;
    32fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32fe:	60bb      	str	r3, [r7, #8]
        *data_line_border_byte=BORDER_TABLE[stage_no];
    3300:	4ba0      	ldr	r3, [pc, #640]	; (3584 <stage_handle_array_for_19_26+0x2e4>)
    3302:	681b      	ldr	r3, [r3, #0]
    3304:	1dfa      	adds	r2, r7, #7
    3306:	7812      	ldrb	r2, [r2, #0]
    3308:	499f      	ldr	r1, [pc, #636]	; (3588 <stage_handle_array_for_19_26+0x2e8>)
    330a:	5c8a      	ldrb	r2, [r1, r2]
    330c:	701a      	strb	r2, [r3, #0]
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
    330e:	2344      	movs	r3, #68	; 0x44
    3310:	18fb      	adds	r3, r7, r3
    3312:	2200      	movs	r2, #0
    3314:	801a      	strh	r2, [r3, #0]
    3316:	e0f4      	b.n	3502 <stage_handle_array_for_19_26+0x262>
          if(_On_EPD_read_flash!=NULL) {
    3318:	4b9c      	ldr	r3, [pc, #624]	; (358c <stage_handle_array_for_19_26+0x2ec>)
    331a:	681b      	ldr	r3, [r3, #0]
    331c:	2b00      	cmp	r3, #0
    331e:	d017      	beq.n	3350 <stage_handle_array_for_19_26+0xb0>
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
    3320:	4b9a      	ldr	r3, [pc, #616]	; (358c <stage_handle_array_for_19_26+0x2ec>)
    3322:	681c      	ldr	r4, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
    3324:	4b93      	ldr	r3, [pc, #588]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	1c19      	adds	r1, r3, #0
    332a:	4a93      	ldr	r2, [pc, #588]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    332c:	1c0b      	adds	r3, r1, #0
    332e:	009b      	lsls	r3, r3, #2
    3330:	185b      	adds	r3, r3, r1
    3332:	009b      	lsls	r3, r3, #2
    3334:	18d3      	adds	r3, r2, r3
    3336:	3308      	adds	r3, #8
    3338:	885b      	ldrh	r3, [r3, #2]
        image_data_address=original_image_address;
        *data_line_border_byte=BORDER_TABLE[stage_no];
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
          if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
    333a:	b2db      	uxtb	r3, r3
    333c:	68b9      	ldr	r1, [r7, #8]
    333e:	2210      	movs	r2, #16
    3340:	18ba      	adds	r2, r7, r2
    3342:	1c08      	adds	r0, r1, #0
    3344:	1c11      	adds	r1, r2, #0
    3346:	1c1a      	adds	r2, r3, #0
    3348:	47a0      	blx	r4
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
    334a:	2310      	movs	r3, #16
    334c:	18fb      	adds	r3, r7, r3
    334e:	60fb      	str	r3, [r7, #12]
			}

            cnt=(COG_parameters[cur_EPD_type_index].horizontal_size*2)-1;
    3350:	4b88      	ldr	r3, [pc, #544]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	1c19      	adds	r1, r3, #0
    3356:	4a88      	ldr	r2, [pc, #544]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    3358:	1c0b      	adds	r3, r1, #0
    335a:	009b      	lsls	r3, r3, #2
    335c:	185b      	adds	r3, r3, r1
    335e:	009b      	lsls	r3, r3, #2
    3360:	18d3      	adds	r3, r2, r3
    3362:	3308      	adds	r3, #8
    3364:	885b      	ldrh	r3, [r3, #2]
    3366:	b2db      	uxtb	r3, r3
    3368:	18db      	adds	r3, r3, r3
    336a:	b2da      	uxtb	r2, r3
    336c:	2343      	movs	r3, #67	; 0x43
    336e:	18fb      	adds	r3, r7, r3
    3370:	3a01      	subs	r2, #1
    3372:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    3374:	2346      	movs	r3, #70	; 0x46
    3376:	18fb      	adds	r3, r7, r3
    3378:	2200      	movs	r2, #0
    337a:	801a      	strh	r2, [r3, #0]
    337c:	e03c      	b.n	33f8 <stage_handle_array_for_19_26+0x158>
				temp_byte =*image_prt++;
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	1c5a      	adds	r2, r3, #1
    3382:	60fa      	str	r2, [r7, #12]
    3384:	2236      	movs	r2, #54	; 0x36
    3386:	18ba      	adds	r2, r7, r2
    3388:	781b      	ldrb	r3, [r3, #0]
    338a:	7013      	strb	r3, [r2, #0]
				data_line_scan[cnt--]=data_lookuptable[stage_no][((temp_byte>>4) &0x0f)];
    338c:	4b80      	ldr	r3, [pc, #512]	; (3590 <stage_handle_array_for_19_26+0x2f0>)
    338e:	681a      	ldr	r2, [r3, #0]
    3390:	2343      	movs	r3, #67	; 0x43
    3392:	18fb      	adds	r3, r7, r3
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	2143      	movs	r1, #67	; 0x43
    3398:	1879      	adds	r1, r7, r1
    339a:	1e58      	subs	r0, r3, #1
    339c:	7008      	strb	r0, [r1, #0]
    339e:	18d3      	adds	r3, r2, r3
    33a0:	1dfa      	adds	r2, r7, #7
    33a2:	7810      	ldrb	r0, [r2, #0]
    33a4:	2236      	movs	r2, #54	; 0x36
    33a6:	18ba      	adds	r2, r7, r2
    33a8:	7812      	ldrb	r2, [r2, #0]
    33aa:	0912      	lsrs	r2, r2, #4
    33ac:	b2d2      	uxtb	r2, r2
    33ae:	1c11      	adds	r1, r2, #0
    33b0:	220f      	movs	r2, #15
    33b2:	4011      	ands	r1, r2
    33b4:	4a77      	ldr	r2, [pc, #476]	; (3594 <stage_handle_array_for_19_26+0x2f4>)
    33b6:	0100      	lsls	r0, r0, #4
    33b8:	1841      	adds	r1, r0, r1
    33ba:	5c8a      	ldrb	r2, [r1, r2]
    33bc:	701a      	strb	r2, [r3, #0]
				data_line_scan[(cnt--)]=data_lookuptable[stage_no][(temp_byte&0x0f)];
    33be:	4b74      	ldr	r3, [pc, #464]	; (3590 <stage_handle_array_for_19_26+0x2f0>)
    33c0:	681a      	ldr	r2, [r3, #0]
    33c2:	2343      	movs	r3, #67	; 0x43
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	2143      	movs	r1, #67	; 0x43
    33ca:	1879      	adds	r1, r7, r1
    33cc:	1e58      	subs	r0, r3, #1
    33ce:	7008      	strb	r0, [r1, #0]
    33d0:	18d3      	adds	r3, r2, r3
    33d2:	1dfa      	adds	r2, r7, #7
    33d4:	7810      	ldrb	r0, [r2, #0]
    33d6:	2236      	movs	r2, #54	; 0x36
    33d8:	18ba      	adds	r2, r7, r2
    33da:	7812      	ldrb	r2, [r2, #0]
    33dc:	210f      	movs	r1, #15
    33de:	4011      	ands	r1, r2
    33e0:	4a6c      	ldr	r2, [pc, #432]	; (3594 <stage_handle_array_for_19_26+0x2f4>)
    33e2:	0100      	lsls	r0, r0, #4
    33e4:	1841      	adds	r1, r0, r1
    33e6:	5c8a      	ldrb	r2, [r1, r2]
    33e8:	701a      	strb	r2, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
			}

            cnt=(COG_parameters[cur_EPD_type_index].horizontal_size*2)-1;
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    33ea:	2346      	movs	r3, #70	; 0x46
    33ec:	18fb      	adds	r3, r7, r3
    33ee:	881a      	ldrh	r2, [r3, #0]
    33f0:	2346      	movs	r3, #70	; 0x46
    33f2:	18fb      	adds	r3, r7, r3
    33f4:	3201      	adds	r2, #1
    33f6:	801a      	strh	r2, [r3, #0]
    33f8:	4b5e      	ldr	r3, [pc, #376]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	1c19      	adds	r1, r3, #0
    33fe:	4a5e      	ldr	r2, [pc, #376]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    3400:	1c0b      	adds	r3, r1, #0
    3402:	009b      	lsls	r3, r3, #2
    3404:	185b      	adds	r3, r3, r1
    3406:	009b      	lsls	r3, r3, #2
    3408:	18d3      	adds	r3, r2, r3
    340a:	3308      	adds	r3, #8
    340c:	885b      	ldrh	r3, [r3, #2]
    340e:	2246      	movs	r2, #70	; 0x46
    3410:	18ba      	adds	r2, r7, r2
    3412:	8812      	ldrh	r2, [r2, #0]
    3414:	429a      	cmp	r2, r3
    3416:	d3b2      	bcc.n	337e <stage_handle_array_for_19_26+0xde>
				temp_byte =*image_prt++;
				data_line_scan[cnt--]=data_lookuptable[stage_no][((temp_byte>>4) &0x0f)];
				data_line_scan[(cnt--)]=data_lookuptable[stage_no][(temp_byte&0x0f)];
			}
            s_index=y>>3;
    3418:	2344      	movs	r3, #68	; 0x44
    341a:	18fb      	adds	r3, r7, r3
    341c:	881b      	ldrh	r3, [r3, #0]
    341e:	08db      	lsrs	r3, r3, #3
    3420:	b29a      	uxth	r2, r3
    3422:	2335      	movs	r3, #53	; 0x35
    3424:	18fb      	adds	r3, r7, r3
    3426:	701a      	strb	r2, [r3, #0]
            b_index=(y%8);
    3428:	2344      	movs	r3, #68	; 0x44
    342a:	18fb      	adds	r3, r7, r3
    342c:	881b      	ldrh	r3, [r3, #0]
    342e:	b2da      	uxtb	r2, r3
    3430:	2334      	movs	r3, #52	; 0x34
    3432:	18fb      	adds	r3, r7, r3
    3434:	2107      	movs	r1, #7
    3436:	400a      	ands	r2, r1
    3438:	701a      	strb	r2, [r3, #0]
            if((y%2)==0)
    343a:	2344      	movs	r3, #68	; 0x44
    343c:	18fb      	adds	r3, r7, r3
    343e:	881b      	ldrh	r3, [r3, #0]
    3440:	2201      	movs	r2, #1
    3442:	4013      	ands	r3, r2
    3444:	b29b      	uxth	r3, r3
    3446:	2b00      	cmp	r3, #0
    3448:	d110      	bne.n	346c <stage_handle_array_for_19_26+0x1cc>
            {//odd
                    data_line_even[line_len-s_index]=scan_lookuptable[b_index];
    344a:	4b53      	ldr	r3, [pc, #332]	; (3598 <stage_handle_array_for_19_26+0x2f8>)
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	2237      	movs	r2, #55	; 0x37
    3450:	18ba      	adds	r2, r7, r2
    3452:	7811      	ldrb	r1, [r2, #0]
    3454:	2235      	movs	r2, #53	; 0x35
    3456:	18ba      	adds	r2, r7, r2
    3458:	7812      	ldrb	r2, [r2, #0]
    345a:	1a8a      	subs	r2, r1, r2
    345c:	189b      	adds	r3, r3, r2
    345e:	2234      	movs	r2, #52	; 0x34
    3460:	18ba      	adds	r2, r7, r2
    3462:	7812      	ldrb	r2, [r2, #0]
    3464:	494d      	ldr	r1, [pc, #308]	; (359c <stage_handle_array_for_19_26+0x2fc>)
    3466:	5c8a      	ldrb	r2, [r1, r2]
    3468:	701a      	strb	r2, [r3, #0]
    346a:	e00b      	b.n	3484 <stage_handle_array_for_19_26+0x1e4>
            }
            else
            {//even
            		data_line_odd[s_index]=scan_lookuptable[b_index];
    346c:	4b4c      	ldr	r3, [pc, #304]	; (35a0 <stage_handle_array_for_19_26+0x300>)
    346e:	681a      	ldr	r2, [r3, #0]
    3470:	2335      	movs	r3, #53	; 0x35
    3472:	18fb      	adds	r3, r7, r3
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	18d3      	adds	r3, r2, r3
    3478:	2234      	movs	r2, #52	; 0x34
    347a:	18ba      	adds	r2, r7, r2
    347c:	7812      	ldrb	r2, [r2, #0]
    347e:	4947      	ldr	r1, [pc, #284]	; (359c <stage_handle_array_for_19_26+0x2fc>)
    3480:	5c8a      	ldrb	r2, [r1, r2]
    3482:	701a      	strb	r2, [r3, #0]
            }
            //image_data_address+=COG_parameters[cur_EPD_type_index].horizontal_size;
            image_data_address+=Line_Offset(cur_EPD_type_index);
    3484:	4b3b      	ldr	r3, [pc, #236]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    3486:	781b      	ldrb	r3, [r3, #0]
    3488:	1c19      	adds	r1, r3, #0
    348a:	4a3b      	ldr	r2, [pc, #236]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    348c:	1c0b      	adds	r3, r1, #0
    348e:	009b      	lsls	r3, r3, #2
    3490:	185b      	adds	r3, r3, r1
    3492:	009b      	lsls	r3, r3, #2
    3494:	18d3      	adds	r3, r2, r3
    3496:	3308      	adds	r3, #8
    3498:	885b      	ldrh	r3, [r3, #2]
    349a:	1c1a      	adds	r2, r3, #0
    349c:	68bb      	ldr	r3, [r7, #8]
    349e:	189b      	adds	r3, r3, r2
    34a0:	60bb      	str	r3, [r7, #8]
            /* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
				COG_parameters[cur_EPD_type_index].data_line_size);
    34a2:	4b34      	ldr	r3, [pc, #208]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    34a4:	781b      	ldrb	r3, [r3, #0]
    34a6:	1c19      	adds	r1, r3, #0
    34a8:	4a33      	ldr	r2, [pc, #204]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    34aa:	1c0b      	adds	r3, r1, #0
    34ac:	009b      	lsls	r3, r3, #2
    34ae:	185b      	adds	r3, r3, r1
    34b0:	009b      	lsls	r3, r3, #2
    34b2:	18d3      	adds	r3, r2, r3
    34b4:	3308      	adds	r3, #8
    34b6:	799b      	ldrb	r3, [r3, #6]
            		data_line_odd[s_index]=scan_lookuptable[b_index];
            }
            //image_data_address+=COG_parameters[cur_EPD_type_index].horizontal_size;
            image_data_address+=Line_Offset(cur_EPD_type_index);
            /* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
    34b8:	1c1a      	adds	r2, r3, #0
    34ba:	4b3a      	ldr	r3, [pc, #232]	; (35a4 <stage_handle_array_for_19_26+0x304>)
    34bc:	200a      	movs	r0, #10
    34be:	1c19      	adds	r1, r3, #0
    34c0:	4b39      	ldr	r3, [pc, #228]	; (35a8 <stage_handle_array_for_19_26+0x308>)
    34c2:	4798      	blx	r3
				COG_parameters[cur_EPD_type_index].data_line_size);

			/* Turn on Output Enable */
			epd_spi_send_byte (0x02, 0x07);
    34c4:	2002      	movs	r0, #2
    34c6:	2107      	movs	r1, #7
    34c8:	4b38      	ldr	r3, [pc, #224]	; (35ac <stage_handle_array_for_19_26+0x30c>)
    34ca:	4798      	blx	r3

			data_line_odd[s_index]=0;
    34cc:	4b34      	ldr	r3, [pc, #208]	; (35a0 <stage_handle_array_for_19_26+0x300>)
    34ce:	681a      	ldr	r2, [r3, #0]
    34d0:	2335      	movs	r3, #53	; 0x35
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	18d3      	adds	r3, r2, r3
    34d8:	2200      	movs	r2, #0
    34da:	701a      	strb	r2, [r3, #0]
            data_line_even[line_len-s_index]=0;
    34dc:	4b2e      	ldr	r3, [pc, #184]	; (3598 <stage_handle_array_for_19_26+0x2f8>)
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	2237      	movs	r2, #55	; 0x37
    34e2:	18ba      	adds	r2, r7, r2
    34e4:	7811      	ldrb	r1, [r2, #0]
    34e6:	2235      	movs	r2, #53	; 0x35
    34e8:	18ba      	adds	r2, r7, r2
    34ea:	7812      	ldrb	r2, [r2, #0]
    34ec:	1a8a      	subs	r2, r1, r2
    34ee:	189b      	adds	r3, r3, r2
    34f0:	2200      	movs	r2, #0
    34f2:	701a      	strb	r2, [r3, #0]
	do {
		image_prt=backup_image_prt;
        image_data_address=original_image_address;
        *data_line_border_byte=BORDER_TABLE[stage_no];
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
    34f4:	2344      	movs	r3, #68	; 0x44
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	881a      	ldrh	r2, [r3, #0]
    34fa:	2344      	movs	r3, #68	; 0x44
    34fc:	18fb      	adds	r3, r7, r3
    34fe:	3201      	adds	r2, #1
    3500:	801a      	strh	r2, [r3, #0]
    3502:	4b1c      	ldr	r3, [pc, #112]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	1c19      	adds	r1, r3, #0
    3508:	4a1b      	ldr	r2, [pc, #108]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    350a:	1c0b      	adds	r3, r1, #0
    350c:	009b      	lsls	r3, r3, #2
    350e:	185b      	adds	r3, r3, r1
    3510:	009b      	lsls	r3, r3, #2
    3512:	18d3      	adds	r3, r2, r3
    3514:	3308      	adds	r3, #8
    3516:	889b      	ldrh	r3, [r3, #4]
    3518:	2244      	movs	r2, #68	; 0x44
    351a:	18ba      	adds	r2, r7, r2
    351c:	8812      	ldrh	r2, [r2, #0]
    351e:	429a      	cmp	r2, r3
    3520:	d200      	bcs.n	3524 <stage_handle_array_for_19_26+0x284>
    3522:	e6f9      	b.n	3318 <stage_handle_array_for_19_26+0x78>

			data_line_odd[s_index]=0;
            data_line_even[line_len-s_index]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick()+
    3524:	4b22      	ldr	r3, [pc, #136]	; (35b0 <stage_handle_array_for_19_26+0x310>)
    3526:	4798      	blx	r3
    3528:	1c03      	adds	r3, r0, #0
    352a:	b29a      	uxth	r2, r3
			COG_parameters[cur_EPD_type_index].frame_time_offset;
    352c:	4b11      	ldr	r3, [pc, #68]	; (3574 <stage_handle_array_for_19_26+0x2d4>)
    352e:	781b      	ldrb	r3, [r3, #0]
    3530:	1c18      	adds	r0, r3, #0
    3532:	4911      	ldr	r1, [pc, #68]	; (3578 <stage_handle_array_for_19_26+0x2d8>)
    3534:	1c03      	adds	r3, r0, #0
    3536:	009b      	lsls	r3, r3, #2
    3538:	181b      	adds	r3, r3, r0
    353a:	009b      	lsls	r3, r3, #2
    353c:	18cb      	adds	r3, r1, r3
    353e:	3310      	adds	r3, #16
    3540:	881b      	ldrh	r3, [r3, #0]

			data_line_odd[s_index]=0;
            data_line_even[line_len-s_index]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick()+
    3542:	18d3      	adds	r3, r2, r3
    3544:	b29a      	uxth	r2, r3
    3546:	4b0d      	ldr	r3, [pc, #52]	; (357c <stage_handle_array_for_19_26+0x2dc>)
    3548:	801a      	strh	r2, [r3, #0]
			COG_parameters[cur_EPD_type_index].frame_time_offset;
	} while (stage_time>current_frame_time);
    354a:	4b1a      	ldr	r3, [pc, #104]	; (35b4 <stage_handle_array_for_19_26+0x314>)
    354c:	881a      	ldrh	r2, [r3, #0]
    354e:	4b0b      	ldr	r3, [pc, #44]	; (357c <stage_handle_array_for_19_26+0x2dc>)
    3550:	881b      	ldrh	r3, [r3, #0]
    3552:	429a      	cmp	r2, r3
    3554:	d900      	bls.n	3558 <stage_handle_array_for_19_26+0x2b8>
    3556:	e6cf      	b.n	32f8 <stage_handle_array_for_19_26+0x58>

	/* Do while the SysTick timer fulfills the stage time */
	while(stage_time>get_current_time_tick());
    3558:	46c0      	nop			; (mov r8, r8)
    355a:	4b16      	ldr	r3, [pc, #88]	; (35b4 <stage_handle_array_for_19_26+0x314>)
    355c:	881b      	ldrh	r3, [r3, #0]
    355e:	1c1c      	adds	r4, r3, #0
    3560:	4b13      	ldr	r3, [pc, #76]	; (35b0 <stage_handle_array_for_19_26+0x310>)
    3562:	4798      	blx	r3
    3564:	1c03      	adds	r3, r0, #0
    3566:	429c      	cmp	r4, r3
    3568:	d8f7      	bhi.n	355a <stage_handle_array_for_19_26+0x2ba>

	/* Stop system timer */
	stop_EPD_timer();
    356a:	4b13      	ldr	r3, [pc, #76]	; (35b8 <stage_handle_array_for_19_26+0x318>)
    356c:	4798      	blx	r3
}
    356e:	46bd      	mov	sp, r7
    3570:	b013      	add	sp, #76	; 0x4c
    3572:	bd90      	pop	{r4, r7, pc}
    3574:	20000118 	.word	0x20000118
    3578:	0000a8a8 	.word	0x0000a8a8
    357c:	20000104 	.word	0x20000104
    3580:	0000444d 	.word	0x0000444d
    3584:	20000114 	.word	0x20000114
    3588:	0000a9a4 	.word	0x0000a9a4
    358c:	20000100 	.word	0x20000100
    3590:	20000110 	.word	0x20000110
    3594:	0000a95c 	.word	0x0000a95c
    3598:	20000108 	.word	0x20000108
    359c:	0000a99c 	.word	0x0000a99c
    35a0:	2000010c 	.word	0x2000010c
    35a4:	20000090 	.word	0x20000090
    35a8:	000046f1 	.word	0x000046f1
    35ac:	00004781 	.word	0x00004781
    35b0:	00004481 	.word	0x00004481
    35b4:	2000008e 	.word	0x2000008e
    35b8:	0000445d 	.word	0x0000445d

000035bc <EPD_display_from_array_prt>:
 * - For more detail on driving stages, please refer to COG G2 document Section 5.
 *
 * \param previous_image_ptr The pointer of memory that stores previous image
 * \param new_image_ptr The pointer of memory that stores new image
 */
void EPD_display_from_array_prt (uint8_t *previous_image_ptr,uint8_t *new_image_ptr) {
    35bc:	b580      	push	{r7, lr}
    35be:	b082      	sub	sp, #8
    35c0:	af00      	add	r7, sp, #0
    35c2:	6078      	str	r0, [r7, #4]
    35c4:	6039      	str	r1, [r7, #0]
    _On_EPD_read_flash=NULL;
    35c6:	4b27      	ldr	r3, [pc, #156]	; (3664 <EPD_display_from_array_prt+0xa8>)
    35c8:	2200      	movs	r2, #0
    35ca:	601a      	str	r2, [r3, #0]
    if(cur_EPD_type_index ==EPD_190 || cur_EPD_type_index ==EPD_260)
    35cc:	4b26      	ldr	r3, [pc, #152]	; (3668 <EPD_display_from_array_prt+0xac>)
    35ce:	781b      	ldrb	r3, [r3, #0]
    35d0:	2b03      	cmp	r3, #3
    35d2:	d003      	beq.n	35dc <EPD_display_from_array_prt+0x20>
    35d4:	4b24      	ldr	r3, [pc, #144]	; (3668 <EPD_display_from_array_prt+0xac>)
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b04      	cmp	r3, #4
    35da:	d120      	bne.n	361e <EPD_display_from_array_prt+0x62>
    {
    	stage_handle_array_for_19_26(previous_image_ptr,ADDRESS_NULL,Stage1);
    35dc:	687a      	ldr	r2, [r7, #4]
    35de:	2301      	movs	r3, #1
    35e0:	425b      	negs	r3, r3
    35e2:	1c10      	adds	r0, r2, #0
    35e4:	1c19      	adds	r1, r3, #0
    35e6:	2200      	movs	r2, #0
    35e8:	4b20      	ldr	r3, [pc, #128]	; (366c <EPD_display_from_array_prt+0xb0>)
    35ea:	4798      	blx	r3
    	stage_handle_array_for_19_26(previous_image_ptr,ADDRESS_NULL,Stage2);
    35ec:	687a      	ldr	r2, [r7, #4]
    35ee:	2301      	movs	r3, #1
    35f0:	425b      	negs	r3, r3
    35f2:	1c10      	adds	r0, r2, #0
    35f4:	1c19      	adds	r1, r3, #0
    35f6:	2201      	movs	r2, #1
    35f8:	4b1c      	ldr	r3, [pc, #112]	; (366c <EPD_display_from_array_prt+0xb0>)
    35fa:	4798      	blx	r3
    	stage_handle_array_for_19_26(new_image_ptr,ADDRESS_NULL,Stage3);
    35fc:	683a      	ldr	r2, [r7, #0]
    35fe:	2301      	movs	r3, #1
    3600:	425b      	negs	r3, r3
    3602:	1c10      	adds	r0, r2, #0
    3604:	1c19      	adds	r1, r3, #0
    3606:	2202      	movs	r2, #2
    3608:	4b18      	ldr	r3, [pc, #96]	; (366c <EPD_display_from_array_prt+0xb0>)
    360a:	4798      	blx	r3
    	stage_handle_array_for_19_26(new_image_ptr,ADDRESS_NULL,Stage4);
    360c:	683a      	ldr	r2, [r7, #0]
    360e:	2301      	movs	r3, #1
    3610:	425b      	negs	r3, r3
    3612:	1c10      	adds	r0, r2, #0
    3614:	1c19      	adds	r1, r3, #0
    3616:	2203      	movs	r2, #3
    3618:	4b14      	ldr	r3, [pc, #80]	; (366c <EPD_display_from_array_prt+0xb0>)
    361a:	4798      	blx	r3
    361c:	e01f      	b.n	365e <EPD_display_from_array_prt+0xa2>
    }
    else
    {
        stage_handle_array(previous_image_ptr,ADDRESS_NULL,Stage1);
    361e:	687a      	ldr	r2, [r7, #4]
    3620:	2301      	movs	r3, #1
    3622:	425b      	negs	r3, r3
    3624:	1c10      	adds	r0, r2, #0
    3626:	1c19      	adds	r1, r3, #0
    3628:	2200      	movs	r2, #0
    362a:	4b11      	ldr	r3, [pc, #68]	; (3670 <EPD_display_from_array_prt+0xb4>)
    362c:	4798      	blx	r3
    	stage_handle_array(previous_image_ptr,ADDRESS_NULL,Stage2);
    362e:	687a      	ldr	r2, [r7, #4]
    3630:	2301      	movs	r3, #1
    3632:	425b      	negs	r3, r3
    3634:	1c10      	adds	r0, r2, #0
    3636:	1c19      	adds	r1, r3, #0
    3638:	2201      	movs	r2, #1
    363a:	4b0d      	ldr	r3, [pc, #52]	; (3670 <EPD_display_from_array_prt+0xb4>)
    363c:	4798      	blx	r3
    	stage_handle_array(new_image_ptr,ADDRESS_NULL,Stage3);
    363e:	683a      	ldr	r2, [r7, #0]
    3640:	2301      	movs	r3, #1
    3642:	425b      	negs	r3, r3
    3644:	1c10      	adds	r0, r2, #0
    3646:	1c19      	adds	r1, r3, #0
    3648:	2202      	movs	r2, #2
    364a:	4b09      	ldr	r3, [pc, #36]	; (3670 <EPD_display_from_array_prt+0xb4>)
    364c:	4798      	blx	r3
    	stage_handle_array(new_image_ptr,ADDRESS_NULL,Stage4);
    364e:	683a      	ldr	r2, [r7, #0]
    3650:	2301      	movs	r3, #1
    3652:	425b      	negs	r3, r3
    3654:	1c10      	adds	r0, r2, #0
    3656:	1c19      	adds	r1, r3, #0
    3658:	2203      	movs	r2, #3
    365a:	4b05      	ldr	r3, [pc, #20]	; (3670 <EPD_display_from_array_prt+0xb4>)
    365c:	4798      	blx	r3
    }
}
    365e:	46bd      	mov	sp, r7
    3660:	b002      	add	sp, #8
    3662:	bd80      	pop	{r7, pc}
    3664:	20000100 	.word	0x20000100
    3668:	20000118 	.word	0x20000118
    366c:	000032a1 	.word	0x000032a1
    3670:	000029c9 	.word	0x000029c9

00003674 <nothing_frame>:

/**
 * \brief Write Nothing Frame to COG
 * \note A frame that all D(x,y) are N(01). 0101=0x55=NOTHING
 */
void nothing_frame (void) {
    3674:	b580      	push	{r7, lr}
    3676:	b082      	sub	sp, #8
    3678:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
    367a:	1dbb      	adds	r3, r7, #6
    367c:	2200      	movs	r2, #0
    367e:	801a      	strh	r2, [r3, #0]
    3680:	e012      	b.n	36a8 <nothing_frame+0x34>
		data_line_even[i]=NOTHING;
    3682:	4b34      	ldr	r3, [pc, #208]	; (3754 <nothing_frame+0xe0>)
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	1dbb      	adds	r3, r7, #6
    3688:	881b      	ldrh	r3, [r3, #0]
    368a:	18d3      	adds	r3, r2, r3
    368c:	2200      	movs	r2, #0
    368e:	701a      	strb	r2, [r3, #0]
		data_line_odd[i]=NOTHING;
    3690:	4b31      	ldr	r3, [pc, #196]	; (3758 <nothing_frame+0xe4>)
    3692:	681a      	ldr	r2, [r3, #0]
    3694:	1dbb      	adds	r3, r7, #6
    3696:	881b      	ldrh	r3, [r3, #0]
    3698:	18d3      	adds	r3, r2, r3
    369a:	2200      	movs	r2, #0
    369c:	701a      	strb	r2, [r3, #0]
 * \brief Write Nothing Frame to COG
 * \note A frame that all D(x,y) are N(01). 0101=0x55=NOTHING
 */
void nothing_frame (void) {
	uint16_t i;
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
    369e:	1dbb      	adds	r3, r7, #6
    36a0:	881a      	ldrh	r2, [r3, #0]
    36a2:	1dbb      	adds	r3, r7, #6
    36a4:	3201      	adds	r2, #1
    36a6:	801a      	strh	r2, [r3, #0]
    36a8:	4b2c      	ldr	r3, [pc, #176]	; (375c <nothing_frame+0xe8>)
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	1c19      	adds	r1, r3, #0
    36ae:	4a2c      	ldr	r2, [pc, #176]	; (3760 <nothing_frame+0xec>)
    36b0:	1c0b      	adds	r3, r1, #0
    36b2:	009b      	lsls	r3, r3, #2
    36b4:	185b      	adds	r3, r3, r1
    36b6:	009b      	lsls	r3, r3, #2
    36b8:	18d3      	adds	r3, r2, r3
    36ba:	3308      	adds	r3, #8
    36bc:	885b      	ldrh	r3, [r3, #2]
    36be:	1dba      	adds	r2, r7, #6
    36c0:	8812      	ldrh	r2, [r2, #0]
    36c2:	429a      	cmp	r2, r3
    36c4:	d3dd      	bcc.n	3682 <nothing_frame+0xe>
		data_line_even[i]=NOTHING;
		data_line_odd[i]=NOTHING;
	}

	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    36c6:	1dbb      	adds	r3, r7, #6
    36c8:	2200      	movs	r2, #0
    36ca:	801a      	strh	r2, [r3, #0]
    36cc:	e030      	b.n	3730 <nothing_frame+0xbc>

		/* Scan byte shift per data line */
		data_line_scan[(i>>2)]=SCAN_TABLE[(i%4)];
    36ce:	4b25      	ldr	r3, [pc, #148]	; (3764 <nothing_frame+0xf0>)
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	1dba      	adds	r2, r7, #6
    36d4:	8812      	ldrh	r2, [r2, #0]
    36d6:	0892      	lsrs	r2, r2, #2
    36d8:	b292      	uxth	r2, r2
    36da:	189b      	adds	r3, r3, r2
    36dc:	1dba      	adds	r2, r7, #6
    36de:	8812      	ldrh	r2, [r2, #0]
    36e0:	2103      	movs	r1, #3
    36e2:	400a      	ands	r2, r1
    36e4:	4920      	ldr	r1, [pc, #128]	; (3768 <nothing_frame+0xf4>)
    36e6:	5c8a      	ldrb	r2, [r1, r2]
    36e8:	701a      	strb	r2, [r3, #0]

		/* Sending data */
		epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    36ea:	4b1c      	ldr	r3, [pc, #112]	; (375c <nothing_frame+0xe8>)
    36ec:	781b      	ldrb	r3, [r3, #0]
    36ee:	1c19      	adds	r1, r3, #0
    36f0:	4a1b      	ldr	r2, [pc, #108]	; (3760 <nothing_frame+0xec>)
    36f2:	1c0b      	adds	r3, r1, #0
    36f4:	009b      	lsls	r3, r3, #2
    36f6:	185b      	adds	r3, r3, r1
    36f8:	009b      	lsls	r3, r3, #2
    36fa:	18d3      	adds	r3, r2, r3
    36fc:	3308      	adds	r3, #8
    36fe:	799b      	ldrb	r3, [r3, #6]
    3700:	1c1a      	adds	r2, r3, #0
    3702:	4b1a      	ldr	r3, [pc, #104]	; (376c <nothing_frame+0xf8>)
    3704:	200a      	movs	r0, #10
    3706:	1c19      	adds	r1, r3, #0
    3708:	4b19      	ldr	r3, [pc, #100]	; (3770 <nothing_frame+0xfc>)
    370a:	4798      	blx	r3

		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);
    370c:	2002      	movs	r0, #2
    370e:	2107      	movs	r1, #7
    3710:	4b18      	ldr	r3, [pc, #96]	; (3774 <nothing_frame+0x100>)
    3712:	4798      	blx	r3

		data_line_scan[(i>>2)]=0;
    3714:	4b13      	ldr	r3, [pc, #76]	; (3764 <nothing_frame+0xf0>)
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	1dba      	adds	r2, r7, #6
    371a:	8812      	ldrh	r2, [r2, #0]
    371c:	0892      	lsrs	r2, r2, #2
    371e:	b292      	uxth	r2, r2
    3720:	189b      	adds	r3, r3, r2
    3722:	2200      	movs	r2, #0
    3724:	701a      	strb	r2, [r3, #0]
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
		data_line_even[i]=NOTHING;
		data_line_odd[i]=NOTHING;
	}

	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    3726:	1dbb      	adds	r3, r7, #6
    3728:	881a      	ldrh	r2, [r3, #0]
    372a:	1dbb      	adds	r3, r7, #6
    372c:	3201      	adds	r2, #1
    372e:	801a      	strh	r2, [r3, #0]
    3730:	4b0a      	ldr	r3, [pc, #40]	; (375c <nothing_frame+0xe8>)
    3732:	781b      	ldrb	r3, [r3, #0]
    3734:	1c19      	adds	r1, r3, #0
    3736:	4a0a      	ldr	r2, [pc, #40]	; (3760 <nothing_frame+0xec>)
    3738:	1c0b      	adds	r3, r1, #0
    373a:	009b      	lsls	r3, r3, #2
    373c:	185b      	adds	r3, r3, r1
    373e:	009b      	lsls	r3, r3, #2
    3740:	18d3      	adds	r3, r2, r3
    3742:	3308      	adds	r3, #8
    3744:	889b      	ldrh	r3, [r3, #4]
    3746:	1dba      	adds	r2, r7, #6
    3748:	8812      	ldrh	r2, [r2, #0]
    374a:	429a      	cmp	r2, r3
    374c:	d3bf      	bcc.n	36ce <nothing_frame+0x5a>
		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);

		data_line_scan[(i>>2)]=0;
	}
}
    374e:	46bd      	mov	sp, r7
    3750:	b002      	add	sp, #8
    3752:	bd80      	pop	{r7, pc}
    3754:	20000108 	.word	0x20000108
    3758:	2000010c 	.word	0x2000010c
    375c:	20000118 	.word	0x20000118
    3760:	0000a8a8 	.word	0x0000a8a8
    3764:	20000110 	.word	0x20000110
    3768:	0000a9a8 	.word	0x0000a9a8
    376c:	20000090 	.word	0x20000090
    3770:	000046f1 	.word	0x000046f1
    3774:	00004781 	.word	0x00004781

00003778 <nothing_frame_for_19_26>:

/**
 * \brief Write Nothing Frame to COG for 1.9" and 2.6"
 */
void nothing_frame_for_19_26 (void) {
    3778:	b580      	push	{r7, lr}
    377a:	b082      	sub	sp, #8
    377c:	af00      	add	r7, sp, #0
	uint16_t i;
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
    377e:	1dbb      	adds	r3, r7, #6
    3780:	2200      	movs	r2, #0
    3782:	801a      	strh	r2, [r3, #0]
    3784:	e00b      	b.n	379e <nothing_frame_for_19_26+0x26>
		data_line_scan[i]=NOTHING;
    3786:	4b4d      	ldr	r3, [pc, #308]	; (38bc <nothing_frame_for_19_26+0x144>)
    3788:	681a      	ldr	r2, [r3, #0]
    378a:	1dbb      	adds	r3, r7, #6
    378c:	881b      	ldrh	r3, [r3, #0]
    378e:	18d3      	adds	r3, r2, r3
    3790:	2200      	movs	r2, #0
    3792:	701a      	strb	r2, [r3, #0]
 * \brief Write Nothing Frame to COG for 1.9" and 2.6"
 */
void nothing_frame_for_19_26 (void) {
	uint16_t i;
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
    3794:	1dbb      	adds	r3, r7, #6
    3796:	881a      	ldrh	r2, [r3, #0]
    3798:	1dbb      	adds	r3, r7, #6
    379a:	3201      	adds	r2, #1
    379c:	801a      	strh	r2, [r3, #0]
    379e:	1dbb      	adds	r3, r7, #6
    37a0:	881a      	ldrh	r2, [r3, #0]
    37a2:	4b47      	ldr	r3, [pc, #284]	; (38c0 <nothing_frame_for_19_26+0x148>)
    37a4:	781b      	ldrb	r3, [r3, #0]
    37a6:	1c18      	adds	r0, r3, #0
    37a8:	4946      	ldr	r1, [pc, #280]	; (38c4 <nothing_frame_for_19_26+0x14c>)
    37aa:	1c03      	adds	r3, r0, #0
    37ac:	009b      	lsls	r3, r3, #2
    37ae:	181b      	adds	r3, r3, r0
    37b0:	009b      	lsls	r3, r3, #2
    37b2:	18cb      	adds	r3, r1, r3
    37b4:	3308      	adds	r3, #8
    37b6:	885b      	ldrh	r3, [r3, #2]
    37b8:	005b      	lsls	r3, r3, #1
    37ba:	429a      	cmp	r2, r3
    37bc:	dbe3      	blt.n	3786 <nothing_frame_for_19_26+0xe>
		data_line_scan[i]=NOTHING;
	}
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
    37be:	4b40      	ldr	r3, [pc, #256]	; (38c0 <nothing_frame_for_19_26+0x148>)
    37c0:	781b      	ldrb	r3, [r3, #0]
    37c2:	1c19      	adds	r1, r3, #0
    37c4:	4a3f      	ldr	r2, [pc, #252]	; (38c4 <nothing_frame_for_19_26+0x14c>)
    37c6:	1c0b      	adds	r3, r1, #0
    37c8:	009b      	lsls	r3, r3, #2
    37ca:	185b      	adds	r3, r3, r1
    37cc:	009b      	lsls	r3, r3, #2
    37ce:	18d3      	adds	r3, r2, r3
    37d0:	3308      	adds	r3, #8
    37d2:	889b      	ldrh	r3, [r3, #4]
    37d4:	08db      	lsrs	r3, r3, #3
    37d6:	b29b      	uxth	r3, r3
    37d8:	b2da      	uxtb	r2, r3
    37da:	1d7b      	adds	r3, r7, #5
    37dc:	3a01      	subs	r2, #1
    37de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    37e0:	1dbb      	adds	r3, r7, #6
    37e2:	2200      	movs	r2, #0
    37e4:	801a      	strh	r2, [r3, #0]
    37e6:	e056      	b.n	3896 <nothing_frame_for_19_26+0x11e>

        s_index=i>>3;
    37e8:	1dbb      	adds	r3, r7, #6
    37ea:	881b      	ldrh	r3, [r3, #0]
    37ec:	08db      	lsrs	r3, r3, #3
    37ee:	b29a      	uxth	r2, r3
    37f0:	1d3b      	adds	r3, r7, #4
    37f2:	701a      	strb	r2, [r3, #0]
        b_index=(i%8);
    37f4:	1dbb      	adds	r3, r7, #6
    37f6:	881b      	ldrh	r3, [r3, #0]
    37f8:	b2da      	uxtb	r2, r3
    37fa:	1cfb      	adds	r3, r7, #3
    37fc:	2107      	movs	r1, #7
    37fe:	400a      	ands	r2, r1
    3800:	701a      	strb	r2, [r3, #0]
        if((i%2)==0)
    3802:	1dbb      	adds	r3, r7, #6
    3804:	881b      	ldrh	r3, [r3, #0]
    3806:	2201      	movs	r2, #1
    3808:	4013      	ands	r3, r2
    380a:	b29b      	uxth	r3, r3
    380c:	2b00      	cmp	r3, #0
    380e:	d10d      	bne.n	382c <nothing_frame_for_19_26+0xb4>
        {//odd
             data_line_even[line_len-s_index]=scan_lookuptable[b_index];
    3810:	4b2d      	ldr	r3, [pc, #180]	; (38c8 <nothing_frame_for_19_26+0x150>)
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	1d7a      	adds	r2, r7, #5
    3816:	7811      	ldrb	r1, [r2, #0]
    3818:	1d3a      	adds	r2, r7, #4
    381a:	7812      	ldrb	r2, [r2, #0]
    381c:	1a8a      	subs	r2, r1, r2
    381e:	189b      	adds	r3, r3, r2
    3820:	1cfa      	adds	r2, r7, #3
    3822:	7812      	ldrb	r2, [r2, #0]
    3824:	4929      	ldr	r1, [pc, #164]	; (38cc <nothing_frame_for_19_26+0x154>)
    3826:	5c8a      	ldrb	r2, [r1, r2]
    3828:	701a      	strb	r2, [r3, #0]
    382a:	e009      	b.n	3840 <nothing_frame_for_19_26+0xc8>
        }
        else
        {//even
             data_line_odd[s_index]=scan_lookuptable[b_index];
    382c:	4b28      	ldr	r3, [pc, #160]	; (38d0 <nothing_frame_for_19_26+0x158>)
    382e:	681a      	ldr	r2, [r3, #0]
    3830:	1d3b      	adds	r3, r7, #4
    3832:	781b      	ldrb	r3, [r3, #0]
    3834:	18d3      	adds	r3, r2, r3
    3836:	1cfa      	adds	r2, r7, #3
    3838:	7812      	ldrb	r2, [r2, #0]
    383a:	4924      	ldr	r1, [pc, #144]	; (38cc <nothing_frame_for_19_26+0x154>)
    383c:	5c8a      	ldrb	r2, [r1, r2]
    383e:	701a      	strb	r2, [r3, #0]
        }

		/* Sending data */
		epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    3840:	4b1f      	ldr	r3, [pc, #124]	; (38c0 <nothing_frame_for_19_26+0x148>)
    3842:	781b      	ldrb	r3, [r3, #0]
    3844:	1c19      	adds	r1, r3, #0
    3846:	4a1f      	ldr	r2, [pc, #124]	; (38c4 <nothing_frame_for_19_26+0x14c>)
    3848:	1c0b      	adds	r3, r1, #0
    384a:	009b      	lsls	r3, r3, #2
    384c:	185b      	adds	r3, r3, r1
    384e:	009b      	lsls	r3, r3, #2
    3850:	18d3      	adds	r3, r2, r3
    3852:	3308      	adds	r3, #8
    3854:	799b      	ldrb	r3, [r3, #6]
    3856:	1c1a      	adds	r2, r3, #0
    3858:	4b1e      	ldr	r3, [pc, #120]	; (38d4 <nothing_frame_for_19_26+0x15c>)
    385a:	200a      	movs	r0, #10
    385c:	1c19      	adds	r1, r3, #0
    385e:	4b1e      	ldr	r3, [pc, #120]	; (38d8 <nothing_frame_for_19_26+0x160>)
    3860:	4798      	blx	r3

		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);
    3862:	2002      	movs	r0, #2
    3864:	2107      	movs	r1, #7
    3866:	4b1d      	ldr	r3, [pc, #116]	; (38dc <nothing_frame_for_19_26+0x164>)
    3868:	4798      	blx	r3

        data_line_odd[s_index]=0;
    386a:	4b19      	ldr	r3, [pc, #100]	; (38d0 <nothing_frame_for_19_26+0x158>)
    386c:	681a      	ldr	r2, [r3, #0]
    386e:	1d3b      	adds	r3, r7, #4
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	18d3      	adds	r3, r2, r3
    3874:	2200      	movs	r2, #0
    3876:	701a      	strb	r2, [r3, #0]
        data_line_even[line_len-s_index]=0;
    3878:	4b13      	ldr	r3, [pc, #76]	; (38c8 <nothing_frame_for_19_26+0x150>)
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	1d7a      	adds	r2, r7, #5
    387e:	7811      	ldrb	r1, [r2, #0]
    3880:	1d3a      	adds	r2, r7, #4
    3882:	7812      	ldrb	r2, [r2, #0]
    3884:	1a8a      	subs	r2, r1, r2
    3886:	189b      	adds	r3, r3, r2
    3888:	2200      	movs	r2, #0
    388a:	701a      	strb	r2, [r3, #0]
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
		data_line_scan[i]=NOTHING;
	}
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    388c:	1dbb      	adds	r3, r7, #6
    388e:	881a      	ldrh	r2, [r3, #0]
    3890:	1dbb      	adds	r3, r7, #6
    3892:	3201      	adds	r2, #1
    3894:	801a      	strh	r2, [r3, #0]
    3896:	4b0a      	ldr	r3, [pc, #40]	; (38c0 <nothing_frame_for_19_26+0x148>)
    3898:	781b      	ldrb	r3, [r3, #0]
    389a:	1c19      	adds	r1, r3, #0
    389c:	4a09      	ldr	r2, [pc, #36]	; (38c4 <nothing_frame_for_19_26+0x14c>)
    389e:	1c0b      	adds	r3, r1, #0
    38a0:	009b      	lsls	r3, r3, #2
    38a2:	185b      	adds	r3, r3, r1
    38a4:	009b      	lsls	r3, r3, #2
    38a6:	18d3      	adds	r3, r2, r3
    38a8:	3308      	adds	r3, #8
    38aa:	889b      	ldrh	r3, [r3, #4]
    38ac:	1dba      	adds	r2, r7, #6
    38ae:	8812      	ldrh	r2, [r2, #0]
    38b0:	429a      	cmp	r2, r3
    38b2:	d399      	bcc.n	37e8 <nothing_frame_for_19_26+0x70>

        data_line_odd[s_index]=0;
        data_line_even[line_len-s_index]=0;

	}
}
    38b4:	46bd      	mov	sp, r7
    38b6:	b002      	add	sp, #8
    38b8:	bd80      	pop	{r7, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	20000110 	.word	0x20000110
    38c0:	20000118 	.word	0x20000118
    38c4:	0000a8a8 	.word	0x0000a8a8
    38c8:	20000108 	.word	0x20000108
    38cc:	0000a99c 	.word	0x0000a99c
    38d0:	2000010c 	.word	0x2000010c
    38d4:	20000090 	.word	0x20000090
    38d8:	000046f1 	.word	0x000046f1
    38dc:	00004781 	.word	0x00004781

000038e0 <border_dummy_line>:

/**
 * \brief BORDER Dummy Line for 1.44",1.9", 2" or 2.6"
 */
void border_dummy_line(void)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	af00      	add	r7, sp, #0
	uint16_t	i;
	for (i =0 ; i < COG_parameters[cur_EPD_type_index].horizontal_size ; i++)
    38e6:	1dbb      	adds	r3, r7, #6
    38e8:	2200      	movs	r2, #0
    38ea:	801a      	strh	r2, [r3, #0]
    38ec:	e012      	b.n	3914 <border_dummy_line+0x34>
	{
		data_line_odd[i]=0x55;
    38ee:	4b2f      	ldr	r3, [pc, #188]	; (39ac <border_dummy_line+0xcc>)
    38f0:	681a      	ldr	r2, [r3, #0]
    38f2:	1dbb      	adds	r3, r7, #6
    38f4:	881b      	ldrh	r3, [r3, #0]
    38f6:	18d3      	adds	r3, r2, r3
    38f8:	2255      	movs	r2, #85	; 0x55
    38fa:	701a      	strb	r2, [r3, #0]
		data_line_even[i]=0x55;
    38fc:	4b2c      	ldr	r3, [pc, #176]	; (39b0 <border_dummy_line+0xd0>)
    38fe:	681a      	ldr	r2, [r3, #0]
    3900:	1dbb      	adds	r3, r7, #6
    3902:	881b      	ldrh	r3, [r3, #0]
    3904:	18d3      	adds	r3, r2, r3
    3906:	2255      	movs	r2, #85	; 0x55
    3908:	701a      	strb	r2, [r3, #0]
 * \brief BORDER Dummy Line for 1.44",1.9", 2" or 2.6"
 */
void border_dummy_line(void)
{
	uint16_t	i;
	for (i =0 ; i < COG_parameters[cur_EPD_type_index].horizontal_size ; i++)
    390a:	1dbb      	adds	r3, r7, #6
    390c:	881a      	ldrh	r2, [r3, #0]
    390e:	1dbb      	adds	r3, r7, #6
    3910:	3201      	adds	r2, #1
    3912:	801a      	strh	r2, [r3, #0]
    3914:	4b27      	ldr	r3, [pc, #156]	; (39b4 <border_dummy_line+0xd4>)
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	1c19      	adds	r1, r3, #0
    391a:	4a27      	ldr	r2, [pc, #156]	; (39b8 <border_dummy_line+0xd8>)
    391c:	1c0b      	adds	r3, r1, #0
    391e:	009b      	lsls	r3, r3, #2
    3920:	185b      	adds	r3, r3, r1
    3922:	009b      	lsls	r3, r3, #2
    3924:	18d3      	adds	r3, r2, r3
    3926:	3308      	adds	r3, #8
    3928:	885b      	ldrh	r3, [r3, #2]
    392a:	1dba      	adds	r2, r7, #6
    392c:	8812      	ldrh	r2, [r2, #0]
    392e:	429a      	cmp	r2, r3
    3930:	d3dd      	bcc.n	38ee <border_dummy_line+0xe>
	{
		data_line_odd[i]=0x55;
		data_line_even[i]=0x55;
	}

	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++)
    3932:	1dbb      	adds	r3, r7, #6
    3934:	2200      	movs	r2, #0
    3936:	801a      	strh	r2, [r3, #0]
    3938:	e00b      	b.n	3952 <border_dummy_line+0x72>
	{
		data_line_scan[i] =0x00;
    393a:	4b20      	ldr	r3, [pc, #128]	; (39bc <border_dummy_line+0xdc>)
    393c:	681a      	ldr	r2, [r3, #0]
    393e:	1dbb      	adds	r3, r7, #6
    3940:	881b      	ldrh	r3, [r3, #0]
    3942:	18d3      	adds	r3, r2, r3
    3944:	2200      	movs	r2, #0
    3946:	701a      	strb	r2, [r3, #0]
	{
		data_line_odd[i]=0x55;
		data_line_even[i]=0x55;
	}

	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++)
    3948:	1dbb      	adds	r3, r7, #6
    394a:	881a      	ldrh	r2, [r3, #0]
    394c:	1dbb      	adds	r3, r7, #6
    394e:	3201      	adds	r2, #1
    3950:	801a      	strh	r2, [r3, #0]
    3952:	4b18      	ldr	r3, [pc, #96]	; (39b4 <border_dummy_line+0xd4>)
    3954:	781b      	ldrb	r3, [r3, #0]
    3956:	1c19      	adds	r1, r3, #0
    3958:	4a17      	ldr	r2, [pc, #92]	; (39b8 <border_dummy_line+0xd8>)
    395a:	1c0b      	adds	r3, r1, #0
    395c:	009b      	lsls	r3, r3, #2
    395e:	185b      	adds	r3, r3, r1
    3960:	009b      	lsls	r3, r3, #2
    3962:	18d3      	adds	r3, r2, r3
    3964:	3308      	adds	r3, #8
    3966:	889b      	ldrh	r3, [r3, #4]
    3968:	08db      	lsrs	r3, r3, #3
    396a:	b29b      	uxth	r3, r3
    396c:	1dba      	adds	r2, r7, #6
    396e:	8812      	ldrh	r2, [r2, #0]
    3970:	429a      	cmp	r2, r3
    3972:	d3e2      	bcc.n	393a <border_dummy_line+0x5a>
	{
		data_line_scan[i] =0x00;
	}

	*data_line_border_byte=BORDER_BYTE_W;
    3974:	4b12      	ldr	r3, [pc, #72]	; (39c0 <border_dummy_line+0xe0>)
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	22aa      	movs	r2, #170	; 0xaa
    397a:	701a      	strb	r2, [r3, #0]
	//Write a Borde(B) Dummy Line
	epd_spi_send (0x0a, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    397c:	4b0d      	ldr	r3, [pc, #52]	; (39b4 <border_dummy_line+0xd4>)
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	1c19      	adds	r1, r3, #0
    3982:	4a0d      	ldr	r2, [pc, #52]	; (39b8 <border_dummy_line+0xd8>)
    3984:	1c0b      	adds	r3, r1, #0
    3986:	009b      	lsls	r3, r3, #2
    3988:	185b      	adds	r3, r3, r1
    398a:	009b      	lsls	r3, r3, #2
    398c:	18d3      	adds	r3, r2, r3
    398e:	3308      	adds	r3, #8
    3990:	799b      	ldrb	r3, [r3, #6]
    3992:	1c1a      	adds	r2, r3, #0
    3994:	4b0b      	ldr	r3, [pc, #44]	; (39c4 <border_dummy_line+0xe4>)
    3996:	200a      	movs	r0, #10
    3998:	1c19      	adds	r1, r3, #0
    399a:	4b0b      	ldr	r3, [pc, #44]	; (39c8 <border_dummy_line+0xe8>)
    399c:	4798      	blx	r3
	//Turn on OE
	epd_spi_send_byte (0x02, 0x07);
    399e:	2002      	movs	r0, #2
    39a0:	2107      	movs	r1, #7
    39a2:	4b0a      	ldr	r3, [pc, #40]	; (39cc <border_dummy_line+0xec>)
    39a4:	4798      	blx	r3

}
    39a6:	46bd      	mov	sp, r7
    39a8:	b002      	add	sp, #8
    39aa:	bd80      	pop	{r7, pc}
    39ac:	2000010c 	.word	0x2000010c
    39b0:	20000108 	.word	0x20000108
    39b4:	20000118 	.word	0x20000118
    39b8:	0000a8a8 	.word	0x0000a8a8
    39bc:	20000110 	.word	0x20000110
    39c0:	20000114 	.word	0x20000114
    39c4:	20000090 	.word	0x20000090
    39c8:	000046f1 	.word	0x000046f1
    39cc:	00004781 	.word	0x00004781

000039d0 <dummy_line>:

/**
 * \brief Write Dummy Line to COG
 * \note A line that all Data and Scan Bytes are 0x00
 */
void dummy_line(void) {
    39d0:	b580      	push	{r7, lr}
    39d2:	b082      	sub	sp, #8
    39d4:	af00      	add	r7, sp, #0
	uint8_t	i;
	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++) {
    39d6:	1dfb      	adds	r3, r7, #7
    39d8:	2200      	movs	r2, #0
    39da:	701a      	strb	r2, [r3, #0]
    39dc:	e009      	b.n	39f2 <dummy_line+0x22>
		COG_Line.uint8[i] = 0x00;
    39de:	1dfb      	adds	r3, r7, #7
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	4a19      	ldr	r2, [pc, #100]	; (3a48 <dummy_line+0x78>)
    39e4:	2100      	movs	r1, #0
    39e6:	54d1      	strb	r1, [r2, r3]
 * \brief Write Dummy Line to COG
 * \note A line that all Data and Scan Bytes are 0x00
 */
void dummy_line(void) {
	uint8_t	i;
	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++) {
    39e8:	1dfb      	adds	r3, r7, #7
    39ea:	781a      	ldrb	r2, [r3, #0]
    39ec:	1dfb      	adds	r3, r7, #7
    39ee:	3201      	adds	r2, #1
    39f0:	701a      	strb	r2, [r3, #0]
    39f2:	1dfb      	adds	r3, r7, #7
    39f4:	781b      	ldrb	r3, [r3, #0]
    39f6:	b29a      	uxth	r2, r3
    39f8:	4b14      	ldr	r3, [pc, #80]	; (3a4c <dummy_line+0x7c>)
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	1c18      	adds	r0, r3, #0
    39fe:	4914      	ldr	r1, [pc, #80]	; (3a50 <dummy_line+0x80>)
    3a00:	1c03      	adds	r3, r0, #0
    3a02:	009b      	lsls	r3, r3, #2
    3a04:	181b      	adds	r3, r3, r0
    3a06:	009b      	lsls	r3, r3, #2
    3a08:	18cb      	adds	r3, r1, r3
    3a0a:	3308      	adds	r3, #8
    3a0c:	889b      	ldrh	r3, [r3, #4]
    3a0e:	08db      	lsrs	r3, r3, #3
    3a10:	b29b      	uxth	r3, r3
    3a12:	429a      	cmp	r2, r3
    3a14:	d3e3      	bcc.n	39de <dummy_line+0xe>
		COG_Line.uint8[i] = 0x00;
	}

	/* Sending data */
	epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    3a16:	4b0d      	ldr	r3, [pc, #52]	; (3a4c <dummy_line+0x7c>)
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	1c19      	adds	r1, r3, #0
    3a1c:	4a0c      	ldr	r2, [pc, #48]	; (3a50 <dummy_line+0x80>)
    3a1e:	1c0b      	adds	r3, r1, #0
    3a20:	009b      	lsls	r3, r3, #2
    3a22:	185b      	adds	r3, r3, r1
    3a24:	009b      	lsls	r3, r3, #2
    3a26:	18d3      	adds	r3, r2, r3
    3a28:	3308      	adds	r3, #8
    3a2a:	799b      	ldrb	r3, [r3, #6]
    3a2c:	1c1a      	adds	r2, r3, #0
    3a2e:	4b06      	ldr	r3, [pc, #24]	; (3a48 <dummy_line+0x78>)
    3a30:	200a      	movs	r0, #10
    3a32:	1c19      	adds	r1, r3, #0
    3a34:	4b07      	ldr	r3, [pc, #28]	; (3a54 <dummy_line+0x84>)
    3a36:	4798      	blx	r3

	/* Turn on Output Enable */
	epd_spi_send_byte (0x02, 0x07);
    3a38:	2002      	movs	r0, #2
    3a3a:	2107      	movs	r1, #7
    3a3c:	4b06      	ldr	r3, [pc, #24]	; (3a58 <dummy_line+0x88>)
    3a3e:	4798      	blx	r3
}
    3a40:	46bd      	mov	sp, r7
    3a42:	b002      	add	sp, #8
    3a44:	bd80      	pop	{r7, pc}
    3a46:	46c0      	nop			; (mov r8, r8)
    3a48:	20000090 	.word	0x20000090
    3a4c:	20000118 	.word	0x20000118
    3a50:	0000a8a8 	.word	0x0000a8a8
    3a54:	000046f1 	.word	0x000046f1
    3a58:	00004781 	.word	0x00004781

00003a5c <EPD_power_off>:

/**
 * \brief Power Off COG Driver
 * \note For detailed flow and description, please refer to the COG G2 document Section 6.
 */
uint8_t EPD_power_off (void) {
    3a5c:	b580      	push	{r7, lr}
    3a5e:	af00      	add	r7, sp, #0

	if(cur_EPD_type_index ==EPD_190 || cur_EPD_type_index ==EPD_260)
    3a60:	4b3b      	ldr	r3, [pc, #236]	; (3b50 <EPD_power_off+0xf4>)
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	2b03      	cmp	r3, #3
    3a66:	d003      	beq.n	3a70 <EPD_power_off+0x14>
    3a68:	4b39      	ldr	r3, [pc, #228]	; (3b50 <EPD_power_off+0xf4>)
    3a6a:	781b      	ldrb	r3, [r3, #0]
    3a6c:	2b04      	cmp	r3, #4
    3a6e:	d102      	bne.n	3a76 <EPD_power_off+0x1a>
	{
		nothing_frame_for_19_26();
    3a70:	4b38      	ldr	r3, [pc, #224]	; (3b54 <EPD_power_off+0xf8>)
    3a72:	4798      	blx	r3
    3a74:	e001      	b.n	3a7a <EPD_power_off+0x1e>
	}
	else
	{
		nothing_frame();
    3a76:	4b38      	ldr	r3, [pc, #224]	; (3b58 <EPD_power_off+0xfc>)
    3a78:	4798      	blx	r3
	}

	if(cur_EPD_type_index==EPD_270)
    3a7a:	4b35      	ldr	r3, [pc, #212]	; (3b50 <EPD_power_off+0xf4>)
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	2b02      	cmp	r3, #2
    3a80:	d110      	bne.n	3aa4 <EPD_power_off+0x48>
	{
		dummy_line();
    3a82:	4b36      	ldr	r3, [pc, #216]	; (3b5c <EPD_power_off+0x100>)
    3a84:	4798      	blx	r3
		delay_ms (25);
    3a86:	2019      	movs	r0, #25
    3a88:	4b35      	ldr	r3, [pc, #212]	; (3b60 <EPD_power_off+0x104>)
    3a8a:	4798      	blx	r3
		EPD_border_low();
    3a8c:	200b      	movs	r0, #11
    3a8e:	2100      	movs	r1, #0
    3a90:	4b34      	ldr	r3, [pc, #208]	; (3b64 <EPD_power_off+0x108>)
    3a92:	4798      	blx	r3
		delay_ms (200);
    3a94:	20c8      	movs	r0, #200	; 0xc8
    3a96:	4b32      	ldr	r3, [pc, #200]	; (3b60 <EPD_power_off+0x104>)
    3a98:	4798      	blx	r3
		EPD_border_high();
    3a9a:	200b      	movs	r0, #11
    3a9c:	2101      	movs	r1, #1
    3a9e:	4b31      	ldr	r3, [pc, #196]	; (3b64 <EPD_power_off+0x108>)
    3aa0:	4798      	blx	r3
    3aa2:	e004      	b.n	3aae <EPD_power_off+0x52>
	}
	else
	{
		border_dummy_line();
    3aa4:	4b30      	ldr	r3, [pc, #192]	; (3b68 <EPD_power_off+0x10c>)
    3aa6:	4798      	blx	r3
		delay_ms (200);
    3aa8:	20c8      	movs	r0, #200	; 0xc8
    3aaa:	4b2d      	ldr	r3, [pc, #180]	; (3b60 <EPD_power_off+0x104>)
    3aac:	4798      	blx	r3
	}

	//Check DC/DC
	if((SPI_R(0x0F,0x00) & 0x40) == 0x00) return ERROR_DC;
    3aae:	200f      	movs	r0, #15
    3ab0:	2100      	movs	r1, #0
    3ab2:	4b2e      	ldr	r3, [pc, #184]	; (3b6c <EPD_power_off+0x110>)
    3ab4:	4798      	blx	r3
    3ab6:	1c03      	adds	r3, r0, #0
    3ab8:	1c1a      	adds	r2, r3, #0
    3aba:	2340      	movs	r3, #64	; 0x40
    3abc:	4013      	ands	r3, r2
    3abe:	d101      	bne.n	3ac4 <EPD_power_off+0x68>
    3ac0:	23f3      	movs	r3, #243	; 0xf3
    3ac2:	e042      	b.n	3b4a <EPD_power_off+0xee>

	epd_spi_send_byte (0x0B, 0x00);
    3ac4:	200b      	movs	r0, #11
    3ac6:	2100      	movs	r1, #0
    3ac8:	4b29      	ldr	r3, [pc, #164]	; (3b70 <EPD_power_off+0x114>)
    3aca:	4798      	blx	r3

	//Turn on Latch Reset
	epd_spi_send_byte (0x03, 0x01);
    3acc:	2003      	movs	r0, #3
    3ace:	2101      	movs	r1, #1
    3ad0:	4b27      	ldr	r3, [pc, #156]	; (3b70 <EPD_power_off+0x114>)
    3ad2:	4798      	blx	r3
	//Power off charge pump Vcom
	epd_spi_send_byte (0x05, 0x03);
    3ad4:	2005      	movs	r0, #5
    3ad6:	2103      	movs	r1, #3
    3ad8:	4b25      	ldr	r3, [pc, #148]	; (3b70 <EPD_power_off+0x114>)
    3ada:	4798      	blx	r3
	//Power off charge pump neg voltage
	epd_spi_send_byte (0x05, 0x01);
    3adc:	2005      	movs	r0, #5
    3ade:	2101      	movs	r1, #1
    3ae0:	4b23      	ldr	r3, [pc, #140]	; (3b70 <EPD_power_off+0x114>)
    3ae2:	4798      	blx	r3
	delay_ms(120);
    3ae4:	2078      	movs	r0, #120	; 0x78
    3ae6:	4b1e      	ldr	r3, [pc, #120]	; (3b60 <EPD_power_off+0x104>)
    3ae8:	4798      	blx	r3
	//Discharge internal SPI
	epd_spi_send_byte (0x04, 0x80);
    3aea:	2004      	movs	r0, #4
    3aec:	2180      	movs	r1, #128	; 0x80
    3aee:	4b20      	ldr	r3, [pc, #128]	; (3b70 <EPD_power_off+0x114>)
    3af0:	4798      	blx	r3
	//Turn off all charge pump
	epd_spi_send_byte (0x05, 0x00);
    3af2:	2005      	movs	r0, #5
    3af4:	2100      	movs	r1, #0
    3af6:	4b1e      	ldr	r3, [pc, #120]	; (3b70 <EPD_power_off+0x114>)
    3af8:	4798      	blx	r3
	//Turn off OSC
	epd_spi_send_byte (0x07, 0x01);
    3afa:	2007      	movs	r0, #7
    3afc:	2101      	movs	r1, #1
    3afe:	4b1c      	ldr	r3, [pc, #112]	; (3b70 <EPD_power_off+0x114>)
    3b00:	4798      	blx	r3
	delay_ms(50);
    3b02:	2032      	movs	r0, #50	; 0x32
    3b04:	4b16      	ldr	r3, [pc, #88]	; (3b60 <EPD_power_off+0x104>)
    3b06:	4798      	blx	r3

	epd_spi_detach ();
    3b08:	4b1a      	ldr	r3, [pc, #104]	; (3b74 <EPD_power_off+0x118>)
    3b0a:	4798      	blx	r3
	EPD_Vcc_turn_off ();
    3b0c:	202d      	movs	r0, #45	; 0x2d
    3b0e:	2100      	movs	r1, #0
    3b10:	4b14      	ldr	r3, [pc, #80]	; (3b64 <EPD_power_off+0x108>)
    3b12:	4798      	blx	r3
	EPD_border_low();
    3b14:	200b      	movs	r0, #11
    3b16:	2100      	movs	r1, #0
    3b18:	4b12      	ldr	r3, [pc, #72]	; (3b64 <EPD_power_off+0x108>)
    3b1a:	4798      	blx	r3
	delay_ms (10);
    3b1c:	200a      	movs	r0, #10
    3b1e:	4b10      	ldr	r3, [pc, #64]	; (3b60 <EPD_power_off+0x104>)
    3b20:	4798      	blx	r3
	EPD_cs_low();
    3b22:	2011      	movs	r0, #17
    3b24:	2100      	movs	r1, #0
    3b26:	4b0f      	ldr	r3, [pc, #60]	; (3b64 <EPD_power_off+0x108>)
    3b28:	4798      	blx	r3
	EPD_rst_low();
    3b2a:	2015      	movs	r0, #21
    3b2c:	2100      	movs	r1, #0
    3b2e:	4b0d      	ldr	r3, [pc, #52]	; (3b64 <EPD_power_off+0x108>)
    3b30:	4798      	blx	r3

	EPD_discharge_high ();
    3b32:	2014      	movs	r0, #20
    3b34:	2101      	movs	r1, #1
    3b36:	4b0b      	ldr	r3, [pc, #44]	; (3b64 <EPD_power_off+0x108>)
    3b38:	4798      	blx	r3
	delay_ms (150);
    3b3a:	2096      	movs	r0, #150	; 0x96
    3b3c:	4b08      	ldr	r3, [pc, #32]	; (3b60 <EPD_power_off+0x104>)
    3b3e:	4798      	blx	r3
	EPD_discharge_low ();
    3b40:	2014      	movs	r0, #20
    3b42:	2100      	movs	r1, #0
    3b44:	4b07      	ldr	r3, [pc, #28]	; (3b64 <EPD_power_off+0x108>)
    3b46:	4798      	blx	r3

	return RES_OK;
    3b48:	2300      	movs	r3, #0
}
    3b4a:	1c18      	adds	r0, r3, #0
    3b4c:	46bd      	mov	sp, r7
    3b4e:	bd80      	pop	{r7, pc}
    3b50:	20000118 	.word	0x20000118
    3b54:	00003779 	.word	0x00003779
    3b58:	00003675 	.word	0x00003675
    3b5c:	000039d1 	.word	0x000039d1
    3b60:	0000619d 	.word	0x0000619d
    3b64:	00002551 	.word	0x00002551
    3b68:	000038e1 	.word	0x000038e1
    3b6c:	00004651 	.word	0x00004651
    3b70:	00004781 	.word	0x00004781
    3b74:	00004565 	.word	0x00004565

00003b78 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b082      	sub	sp, #8
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	1c02      	adds	r2, r0, #0
    3b80:	1dfb      	adds	r3, r7, #7
    3b82:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b84:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <system_interrupt_enable+0x28>)
    3b86:	1dfa      	adds	r2, r7, #7
    3b88:	7812      	ldrb	r2, [r2, #0]
    3b8a:	1c11      	adds	r1, r2, #0
    3b8c:	221f      	movs	r2, #31
    3b8e:	400a      	ands	r2, r1
    3b90:	2101      	movs	r1, #1
    3b92:	4091      	lsls	r1, r2
    3b94:	1c0a      	adds	r2, r1, #0
    3b96:	601a      	str	r2, [r3, #0]
}
    3b98:	46bd      	mov	sp, r7
    3b9a:	b002      	add	sp, #8
    3b9c:	bd80      	pop	{r7, pc}
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	e000e100 	.word	0xe000e100

00003ba4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b082      	sub	sp, #8
    3ba8:	af00      	add	r7, sp, #0
    3baa:	1c02      	adds	r2, r0, #0
    3bac:	1dfb      	adds	r3, r7, #7
    3bae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3bb0:	4a07      	ldr	r2, [pc, #28]	; (3bd0 <system_interrupt_disable+0x2c>)
    3bb2:	1dfb      	adds	r3, r7, #7
    3bb4:	781b      	ldrb	r3, [r3, #0]
    3bb6:	1c19      	adds	r1, r3, #0
    3bb8:	231f      	movs	r3, #31
    3bba:	400b      	ands	r3, r1
    3bbc:	2101      	movs	r1, #1
    3bbe:	4099      	lsls	r1, r3
    3bc0:	1c0b      	adds	r3, r1, #0
    3bc2:	1c19      	adds	r1, r3, #0
    3bc4:	2380      	movs	r3, #128	; 0x80
    3bc6:	50d1      	str	r1, [r2, r3]
}
    3bc8:	46bd      	mov	sp, r7
    3bca:	b002      	add	sp, #8
    3bcc:	bd80      	pop	{r7, pc}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	e000e100 	.word	0xe000e100

00003bd4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b084      	sub	sp, #16
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	7e5b      	ldrb	r3, [r3, #25]
    3be6:	b2db      	uxtb	r3, r3
    3be8:	b2db      	uxtb	r3, r3
    3bea:	b25b      	sxtb	r3, r3
    3bec:	2b00      	cmp	r3, #0
    3bee:	da01      	bge.n	3bf4 <adc_is_syncing+0x20>
		return true;
    3bf0:	2301      	movs	r3, #1
    3bf2:	e000      	b.n	3bf6 <adc_is_syncing+0x22>
	}

	return false;
    3bf4:	2300      	movs	r3, #0
}
    3bf6:	1c18      	adds	r0, r3, #0
    3bf8:	46bd      	mov	sp, r7
    3bfa:	b004      	add	sp, #16
    3bfc:	bd80      	pop	{r7, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)

00003c00 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b086      	sub	sp, #24
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    3c0e:	693b      	ldr	r3, [r7, #16]
    3c10:	7e1b      	ldrb	r3, [r3, #24]
    3c12:	b2db      	uxtb	r3, r3
    3c14:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    3c16:	2300      	movs	r3, #0
    3c18:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3c1a:	68fb      	ldr	r3, [r7, #12]
    3c1c:	2201      	movs	r2, #1
    3c1e:	4013      	ands	r3, r2
    3c20:	d003      	beq.n	3c2a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    3c22:	697b      	ldr	r3, [r7, #20]
    3c24:	2201      	movs	r2, #1
    3c26:	4313      	orrs	r3, r2
    3c28:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    3c2a:	68fb      	ldr	r3, [r7, #12]
    3c2c:	2204      	movs	r2, #4
    3c2e:	4013      	ands	r3, r2
    3c30:	d003      	beq.n	3c3a <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    3c32:	697b      	ldr	r3, [r7, #20]
    3c34:	2202      	movs	r2, #2
    3c36:	4313      	orrs	r3, r2
    3c38:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	2202      	movs	r2, #2
    3c3e:	4013      	ands	r3, r2
    3c40:	d003      	beq.n	3c4a <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    3c42:	697b      	ldr	r3, [r7, #20]
    3c44:	2204      	movs	r2, #4
    3c46:	4313      	orrs	r3, r2
    3c48:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    3c4a:	697b      	ldr	r3, [r7, #20]
}
    3c4c:	1c18      	adds	r0, r3, #0
    3c4e:	46bd      	mov	sp, r7
    3c50:	b006      	add	sp, #24
    3c52:	bd80      	pop	{r7, pc}

00003c54 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    3c54:	b580      	push	{r7, lr}
    3c56:	b084      	sub	sp, #16
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    3c64:	2300      	movs	r3, #0
    3c66:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    3c68:	683b      	ldr	r3, [r7, #0]
    3c6a:	2201      	movs	r2, #1
    3c6c:	4013      	ands	r3, r2
    3c6e:	d003      	beq.n	3c78 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	2201      	movs	r2, #1
    3c74:	4313      	orrs	r3, r2
    3c76:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    3c78:	683b      	ldr	r3, [r7, #0]
    3c7a:	2202      	movs	r2, #2
    3c7c:	4013      	ands	r3, r2
    3c7e:	d003      	beq.n	3c88 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    3c80:	68fb      	ldr	r3, [r7, #12]
    3c82:	2204      	movs	r2, #4
    3c84:	4313      	orrs	r3, r2
    3c86:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    3c88:	683b      	ldr	r3, [r7, #0]
    3c8a:	2204      	movs	r2, #4
    3c8c:	4013      	ands	r3, r2
    3c8e:	d003      	beq.n	3c98 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    3c90:	68fb      	ldr	r3, [r7, #12]
    3c92:	2202      	movs	r2, #2
    3c94:	4313      	orrs	r3, r2
    3c96:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	b2da      	uxtb	r2, r3
    3c9c:	68bb      	ldr	r3, [r7, #8]
    3c9e:	761a      	strb	r2, [r3, #24]
}
    3ca0:	46bd      	mov	sp, r7
    3ca2:	b004      	add	sp, #16
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	46c0      	nop			; (mov r8, r8)

00003ca8 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b084      	sub	sp, #16
    3cac:	af00      	add	r7, sp, #0
    3cae:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	687b      	ldr	r3, [r7, #4]
    3cba:	1c18      	adds	r0, r3, #0
    3cbc:	4b0d      	ldr	r3, [pc, #52]	; (3cf4 <adc_enable+0x4c>)
    3cbe:	4798      	blx	r3
    3cc0:	1e03      	subs	r3, r0, #0
    3cc2:	d1f9      	bne.n	3cb8 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    3cc4:	2017      	movs	r0, #23
    3cc6:	4b0c      	ldr	r3, [pc, #48]	; (3cf8 <adc_enable+0x50>)
    3cc8:	4798      	blx	r3
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3cca:	68fb      	ldr	r3, [r7, #12]
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	2202      	movs	r2, #2
    3cd2:	4313      	orrs	r3, r2
    3cd4:	b2da      	uxtb	r2, r3
    3cd6:	68fb      	ldr	r3, [r7, #12]
    3cd8:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    3cda:	46c0      	nop			; (mov r8, r8)
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	1c18      	adds	r0, r3, #0
    3ce0:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <adc_enable+0x4c>)
    3ce2:	4798      	blx	r3
    3ce4:	1e03      	subs	r3, r0, #0
    3ce6:	d1f9      	bne.n	3cdc <adc_enable+0x34>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    3ce8:	2300      	movs	r3, #0
}
    3cea:	1c18      	adds	r0, r3, #0
    3cec:	46bd      	mov	sp, r7
    3cee:	b004      	add	sp, #16
    3cf0:	bd80      	pop	{r7, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00003bd5 	.word	0x00003bd5
    3cf8:	00003b79 	.word	0x00003b79

00003cfc <adc_disable>:
 *
 * \param[in] module_inst Pointer to the ADC software instance struct
 */
static inline enum status_code adc_disable(
		struct adc_module *const module_inst)
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b084      	sub	sp, #16
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    3d0a:	2017      	movs	r0, #23
    3d0c:	4b0e      	ldr	r3, [pc, #56]	; (3d48 <adc_disable+0x4c>)
    3d0e:	4798      	blx	r3
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    3d10:	46c0      	nop			; (mov r8, r8)
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	1c18      	adds	r0, r3, #0
    3d16:	4b0d      	ldr	r3, [pc, #52]	; (3d4c <adc_disable+0x50>)
    3d18:	4798      	blx	r3
    3d1a:	1e03      	subs	r3, r0, #0
    3d1c:	d1f9      	bne.n	3d12 <adc_disable+0x16>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3d1e:	68fb      	ldr	r3, [r7, #12]
    3d20:	781b      	ldrb	r3, [r3, #0]
    3d22:	b2db      	uxtb	r3, r3
    3d24:	2202      	movs	r2, #2
    3d26:	4393      	bics	r3, r2
    3d28:	b2da      	uxtb	r2, r3
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	1c18      	adds	r0, r3, #0
    3d34:	4b05      	ldr	r3, [pc, #20]	; (3d4c <adc_disable+0x50>)
    3d36:	4798      	blx	r3
    3d38:	1e03      	subs	r3, r0, #0
    3d3a:	d1f9      	bne.n	3d30 <adc_disable+0x34>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    3d3c:	2300      	movs	r3, #0
}
    3d3e:	1c18      	adds	r0, r3, #0
    3d40:	46bd      	mov	sp, r7
    3d42:	b004      	add	sp, #16
    3d44:	bd80      	pop	{r7, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	00003ba5 	.word	0x00003ba5
    3d4c:	00003bd5 	.word	0x00003bd5

00003d50 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3d50:	b580      	push	{r7, lr}
    3d52:	b084      	sub	sp, #16
    3d54:	af00      	add	r7, sp, #0
    3d56:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	1c18      	adds	r0, r3, #0
    3d64:	4b0a      	ldr	r3, [pc, #40]	; (3d90 <adc_start_conversion+0x40>)
    3d66:	4798      	blx	r3
    3d68:	1e03      	subs	r3, r0, #0
    3d6a:	d1f9      	bne.n	3d60 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3d6c:	68fb      	ldr	r3, [r7, #12]
    3d6e:	7b1b      	ldrb	r3, [r3, #12]
    3d70:	b2db      	uxtb	r3, r3
    3d72:	2202      	movs	r2, #2
    3d74:	4313      	orrs	r3, r2
    3d76:	b2da      	uxtb	r2, r3
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3d7c:	46c0      	nop			; (mov r8, r8)
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	1c18      	adds	r0, r3, #0
    3d82:	4b03      	ldr	r3, [pc, #12]	; (3d90 <adc_start_conversion+0x40>)
    3d84:	4798      	blx	r3
    3d86:	1e03      	subs	r3, r0, #0
    3d88:	d1f9      	bne.n	3d7e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3d8a:	46bd      	mov	sp, r7
    3d8c:	b004      	add	sp, #16
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	00003bd5 	.word	0x00003bd5

00003d94 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
    3d9c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	1c18      	adds	r0, r3, #0
    3da2:	4b18      	ldr	r3, [pc, #96]	; (3e04 <adc_read+0x70>)
    3da4:	4798      	blx	r3
    3da6:	1c02      	adds	r2, r0, #0
    3da8:	2301      	movs	r3, #1
    3daa:	4013      	ands	r3, r2
    3dac:	d101      	bne.n	3db2 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    3dae:	2305      	movs	r3, #5
    3db0:	e023      	b.n	3dfa <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    3db2:	687b      	ldr	r3, [r7, #4]
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    3db8:	46c0      	nop			; (mov r8, r8)
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	1c18      	adds	r0, r3, #0
    3dbe:	4b12      	ldr	r3, [pc, #72]	; (3e08 <adc_read+0x74>)
    3dc0:	4798      	blx	r3
    3dc2:	1e03      	subs	r3, r0, #0
    3dc4:	d1f9      	bne.n	3dba <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	8b5b      	ldrh	r3, [r3, #26]
    3dca:	b29a      	uxth	r2, r3
    3dcc:	683b      	ldr	r3, [r7, #0]
    3dce:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	1c18      	adds	r0, r3, #0
    3dd4:	2101      	movs	r1, #1
    3dd6:	4b0d      	ldr	r3, [pc, #52]	; (3e0c <adc_read+0x78>)
    3dd8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	1c18      	adds	r0, r3, #0
    3dde:	4b09      	ldr	r3, [pc, #36]	; (3e04 <adc_read+0x70>)
    3de0:	4798      	blx	r3
    3de2:	1c02      	adds	r2, r0, #0
    3de4:	2304      	movs	r3, #4
    3de6:	4013      	ands	r3, r2
    3de8:	d006      	beq.n	3df8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	1c18      	adds	r0, r3, #0
    3dee:	2104      	movs	r1, #4
    3df0:	4b06      	ldr	r3, [pc, #24]	; (3e0c <adc_read+0x78>)
    3df2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    3df4:	231e      	movs	r3, #30
    3df6:	e000      	b.n	3dfa <adc_read+0x66>
	}

	return STATUS_OK;
    3df8:	2300      	movs	r3, #0
}
    3dfa:	1c18      	adds	r0, r3, #0
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b004      	add	sp, #16
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00003c01 	.word	0x00003c01
    3e08:	00003bd5 	.word	0x00003bd5
    3e0c:	00003c55 	.word	0x00003c55

00003e10 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b082      	sub	sp, #8
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	095b      	lsrs	r3, r3, #5
}
    3e1c:	1c18      	adds	r0, r3, #0
    3e1e:	46bd      	mov	sp, r7
    3e20:	b002      	add	sp, #8
    3e22:	bd80      	pop	{r7, pc}

00003e24 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b082      	sub	sp, #8
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	01db      	lsls	r3, r3, #7
    3e30:	4a03      	ldr	r2, [pc, #12]	; (3e40 <arch_ioport_port_to_base+0x1c>)
    3e32:	4694      	mov	ip, r2
    3e34:	4463      	add	r3, ip
}
    3e36:	1c18      	adds	r0, r3, #0
    3e38:	46bd      	mov	sp, r7
    3e3a:	b002      	add	sp, #8
    3e3c:	bd80      	pop	{r7, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	41004400 	.word	0x41004400

00003e44 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	1c18      	adds	r0, r3, #0
    3e50:	4b05      	ldr	r3, [pc, #20]	; (3e68 <arch_ioport_pin_to_base+0x24>)
    3e52:	4798      	blx	r3
    3e54:	1c03      	adds	r3, r0, #0
    3e56:	1c18      	adds	r0, r3, #0
    3e58:	4b04      	ldr	r3, [pc, #16]	; (3e6c <arch_ioport_pin_to_base+0x28>)
    3e5a:	4798      	blx	r3
    3e5c:	1c03      	adds	r3, r0, #0
}
    3e5e:	1c18      	adds	r0, r3, #0
    3e60:	46bd      	mov	sp, r7
    3e62:	b002      	add	sp, #8
    3e64:	bd80      	pop	{r7, pc}
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	00003e11 	.word	0x00003e11
    3e6c:	00003e25 	.word	0x00003e25

00003e70 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    3e70:	b580      	push	{r7, lr}
    3e72:	b082      	sub	sp, #8
    3e74:	af00      	add	r7, sp, #0
    3e76:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	221f      	movs	r2, #31
    3e7c:	4013      	ands	r3, r2
    3e7e:	2201      	movs	r2, #1
    3e80:	409a      	lsls	r2, r3
    3e82:	1c13      	adds	r3, r2, #0
}
    3e84:	1c18      	adds	r0, r3, #0
    3e86:	46bd      	mov	sp, r7
    3e88:	b002      	add	sp, #8
    3e8a:	bd80      	pop	{r7, pc}

00003e8c <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
    3e90:	46bd      	mov	sp, r7
    3e92:	bd80      	pop	{r7, pc}

00003e94 <arch_ioport_enable_port>:


inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b084      	sub	sp, #16
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
    3e9c:	6039      	str	r1, [r7, #0]
	volatile PortGroup *base = arch_ioport_port_to_base(port);
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	1c18      	adds	r0, r3, #0
    3ea2:	4b14      	ldr	r3, [pc, #80]	; (3ef4 <arch_ioport_enable_port+0x60>)
    3ea4:	4798      	blx	r3
    3ea6:	1c03      	adds	r3, r0, #0
    3ea8:	60bb      	str	r3, [r7, #8]

	for (uint32_t i = 0; i < 32; i++) {
    3eaa:	2300      	movs	r3, #0
    3eac:	60fb      	str	r3, [r7, #12]
    3eae:	e01b      	b.n	3ee8 <arch_ioport_enable_port+0x54>
		if (mask & (1 << i)) {
    3eb0:	68fb      	ldr	r3, [r7, #12]
    3eb2:	2201      	movs	r2, #1
    3eb4:	409a      	lsls	r2, r3
    3eb6:	1c13      	adds	r3, r2, #0
    3eb8:	1c1a      	adds	r2, r3, #0
    3eba:	683b      	ldr	r3, [r7, #0]
    3ebc:	4013      	ands	r3, r2
    3ebe:	d010      	beq.n	3ee2 <arch_ioport_enable_port+0x4e>
			base->PINCFG[i].reg &= ~PORT_PINCFG_PMUXEN;
    3ec0:	68ba      	ldr	r2, [r7, #8]
    3ec2:	2140      	movs	r1, #64	; 0x40
    3ec4:	68fb      	ldr	r3, [r7, #12]
    3ec6:	18d3      	adds	r3, r2, r3
    3ec8:	185b      	adds	r3, r3, r1
    3eca:	781b      	ldrb	r3, [r3, #0]
    3ecc:	b2db      	uxtb	r3, r3
    3ece:	2201      	movs	r2, #1
    3ed0:	4393      	bics	r3, r2
    3ed2:	b2d8      	uxtb	r0, r3
    3ed4:	68ba      	ldr	r2, [r7, #8]
    3ed6:	2140      	movs	r1, #64	; 0x40
    3ed8:	68fb      	ldr	r3, [r7, #12]
    3eda:	18d3      	adds	r3, r2, r3
    3edc:	185b      	adds	r3, r3, r1
    3ede:	1c02      	adds	r2, r0, #0
    3ee0:	701a      	strb	r2, [r3, #0]
inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	volatile PortGroup *base = arch_ioport_port_to_base(port);

	for (uint32_t i = 0; i < 32; i++) {
    3ee2:	68fb      	ldr	r3, [r7, #12]
    3ee4:	3301      	adds	r3, #1
    3ee6:	60fb      	str	r3, [r7, #12]
    3ee8:	68fb      	ldr	r3, [r7, #12]
    3eea:	2b1f      	cmp	r3, #31
    3eec:	d9e0      	bls.n	3eb0 <arch_ioport_enable_port+0x1c>
		if (mask & (1 << i)) {
			base->PINCFG[i].reg &= ~PORT_PINCFG_PMUXEN;
		}
	}
}
    3eee:	46bd      	mov	sp, r7
    3ef0:	b004      	add	sp, #16
    3ef2:	bd80      	pop	{r7, pc}
    3ef4:	00003e25 	.word	0x00003e25

00003ef8 <arch_ioport_enable_pin>:
		}
	}
}

inline static void arch_ioport_enable_pin(ioport_pin_t pin)
{
    3ef8:	b590      	push	{r4, r7, lr}
    3efa:	b083      	sub	sp, #12
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	1c18      	adds	r0, r3, #0
    3f04:	4b07      	ldr	r3, [pc, #28]	; (3f24 <arch_ioport_enable_pin+0x2c>)
    3f06:	4798      	blx	r3
    3f08:	1c04      	adds	r4, r0, #0
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	1c18      	adds	r0, r3, #0
    3f0e:	4b06      	ldr	r3, [pc, #24]	; (3f28 <arch_ioport_enable_pin+0x30>)
    3f10:	4798      	blx	r3
    3f12:	1c03      	adds	r3, r0, #0
    3f14:	1c20      	adds	r0, r4, #0
    3f16:	1c19      	adds	r1, r3, #0
    3f18:	4b04      	ldr	r3, [pc, #16]	; (3f2c <arch_ioport_enable_pin+0x34>)
    3f1a:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin));
}
    3f1c:	46bd      	mov	sp, r7
    3f1e:	b003      	add	sp, #12
    3f20:	bd90      	pop	{r4, r7, pc}
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	00003e11 	.word	0x00003e11
    3f28:	00003e71 	.word	0x00003e71
    3f2c:	00003e95 	.word	0x00003e95

00003f30 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b084      	sub	sp, #16
    3f34:	af00      	add	r7, sp, #0
    3f36:	6078      	str	r0, [r7, #4]
    3f38:	1c0a      	adds	r2, r1, #0
    3f3a:	1cfb      	adds	r3, r7, #3
    3f3c:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	1c18      	adds	r0, r3, #0
    3f42:	4b19      	ldr	r3, [pc, #100]	; (3fa8 <arch_ioport_set_pin_dir+0x78>)
    3f44:	4798      	blx	r3
    3f46:	1c03      	adds	r3, r0, #0
    3f48:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
    3f4a:	1cfb      	adds	r3, r7, #3
    3f4c:	781b      	ldrb	r3, [r3, #0]
    3f4e:	2b01      	cmp	r3, #1
    3f50:	d107      	bne.n	3f62 <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	1c18      	adds	r0, r3, #0
    3f56:	4b15      	ldr	r3, [pc, #84]	; (3fac <arch_ioport_set_pin_dir+0x7c>)
    3f58:	4798      	blx	r3
    3f5a:	1c02      	adds	r2, r0, #0
    3f5c:	68fb      	ldr	r3, [r7, #12]
    3f5e:	609a      	str	r2, [r3, #8]
    3f60:	e00a      	b.n	3f78 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    3f62:	1cfb      	adds	r3, r7, #3
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d106      	bne.n	3f78 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	1c18      	adds	r0, r3, #0
    3f6e:	4b0f      	ldr	r3, [pc, #60]	; (3fac <arch_ioport_set_pin_dir+0x7c>)
    3f70:	4798      	blx	r3
    3f72:	1c02      	adds	r2, r0, #0
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	1c18      	adds	r0, r3, #0
    3f7c:	4b0c      	ldr	r3, [pc, #48]	; (3fb0 <arch_ioport_set_pin_dir+0x80>)
    3f7e:	4798      	blx	r3
    3f80:	1c03      	adds	r3, r0, #0
    3f82:	68fa      	ldr	r2, [r7, #12]
    3f84:	2140      	movs	r1, #64	; 0x40
    3f86:	18d2      	adds	r2, r2, r3
    3f88:	1852      	adds	r2, r2, r1
    3f8a:	7812      	ldrb	r2, [r2, #0]
    3f8c:	b2d2      	uxtb	r2, r2
    3f8e:	2102      	movs	r1, #2
    3f90:	430a      	orrs	r2, r1
    3f92:	b2d0      	uxtb	r0, r2
    3f94:	68fa      	ldr	r2, [r7, #12]
    3f96:	2140      	movs	r1, #64	; 0x40
    3f98:	18d3      	adds	r3, r2, r3
    3f9a:	185b      	adds	r3, r3, r1
    3f9c:	1c02      	adds	r2, r0, #0
    3f9e:	701a      	strb	r2, [r3, #0]
}
    3fa0:	46bd      	mov	sp, r7
    3fa2:	b004      	add	sp, #16
    3fa4:	bd80      	pop	{r7, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	00003e45 	.word	0x00003e45
    3fac:	00003e71 	.word	0x00003e71
    3fb0:	00003e11 	.word	0x00003e11

00003fb4 <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    3fb4:	b590      	push	{r4, r7, lr}
    3fb6:	b083      	sub	sp, #12
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
    3fbc:	1c0a      	adds	r2, r1, #0
    3fbe:	1cfb      	adds	r3, r7, #3
    3fc0:	701a      	strb	r2, [r3, #0]
	if (level) {
    3fc2:	1cfb      	adds	r3, r7, #3
    3fc4:	781b      	ldrb	r3, [r3, #0]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d00b      	beq.n	3fe2 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	1c18      	adds	r0, r3, #0
    3fce:	4b0c      	ldr	r3, [pc, #48]	; (4000 <arch_ioport_set_pin_level+0x4c>)
    3fd0:	4798      	blx	r3
    3fd2:	1c04      	adds	r4, r0, #0
    3fd4:	687b      	ldr	r3, [r7, #4]
    3fd6:	1c18      	adds	r0, r3, #0
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <arch_ioport_set_pin_level+0x50>)
    3fda:	4798      	blx	r3
    3fdc:	1c03      	adds	r3, r0, #0
    3fde:	61a3      	str	r3, [r4, #24]
    3fe0:	e00a      	b.n	3ff8 <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	1c18      	adds	r0, r3, #0
    3fe6:	4b06      	ldr	r3, [pc, #24]	; (4000 <arch_ioport_set_pin_level+0x4c>)
    3fe8:	4798      	blx	r3
    3fea:	1c04      	adds	r4, r0, #0
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	1c18      	adds	r0, r3, #0
    3ff0:	4b04      	ldr	r3, [pc, #16]	; (4004 <arch_ioport_set_pin_level+0x50>)
    3ff2:	4798      	blx	r3
    3ff4:	1c03      	adds	r3, r0, #0
    3ff6:	6163      	str	r3, [r4, #20]
	}
}
    3ff8:	46bd      	mov	sp, r7
    3ffa:	b003      	add	sp, #12
    3ffc:	bd90      	pop	{r4, r7, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00003e45 	.word	0x00003e45
    4004:	00003e71 	.word	0x00003e71

00004008 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    4008:	b580      	push	{r7, lr}
    400a:	af00      	add	r7, sp, #0
	arch_ioport_init();
    400c:	4b01      	ldr	r3, [pc, #4]	; (4014 <ioport_init+0xc>)
    400e:	4798      	blx	r3
}
    4010:	46bd      	mov	sp, r7
    4012:	bd80      	pop	{r7, pc}
    4014:	00003e8d 	.word	0x00003e8d

00004018 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
	arch_ioport_enable_pin(pin);
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	1c18      	adds	r0, r3, #0
    4024:	4b02      	ldr	r3, [pc, #8]	; (4030 <ioport_enable_pin+0x18>)
    4026:	4798      	blx	r3
}
    4028:	46bd      	mov	sp, r7
    402a:	b002      	add	sp, #8
    402c:	bd80      	pop	{r7, pc}
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	00003ef9 	.word	0x00003ef9

00004034 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    4034:	b580      	push	{r7, lr}
    4036:	b082      	sub	sp, #8
    4038:	af00      	add	r7, sp, #0
    403a:	6078      	str	r0, [r7, #4]
    403c:	1c0a      	adds	r2, r1, #0
    403e:	1cfb      	adds	r3, r7, #3
    4040:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    4042:	687a      	ldr	r2, [r7, #4]
    4044:	1cfb      	adds	r3, r7, #3
    4046:	781b      	ldrb	r3, [r3, #0]
    4048:	1c10      	adds	r0, r2, #0
    404a:	1c19      	adds	r1, r3, #0
    404c:	4b02      	ldr	r3, [pc, #8]	; (4058 <ioport_set_pin_dir+0x24>)
    404e:	4798      	blx	r3
}
    4050:	46bd      	mov	sp, r7
    4052:	b002      	add	sp, #8
    4054:	bd80      	pop	{r7, pc}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	00003f31 	.word	0x00003f31

0000405c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
    4062:	6078      	str	r0, [r7, #4]
    4064:	1c0a      	adds	r2, r1, #0
    4066:	1cfb      	adds	r3, r7, #3
    4068:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    406a:	687a      	ldr	r2, [r7, #4]
    406c:	1cfb      	adds	r3, r7, #3
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	1c10      	adds	r0, r2, #0
    4072:	1c19      	adds	r1, r3, #0
    4074:	4b02      	ldr	r3, [pc, #8]	; (4080 <ioport_set_pin_level+0x24>)
    4076:	4798      	blx	r3
}
    4078:	46bd      	mov	sp, r7
    407a:	b002      	add	sp, #8
    407c:	bd80      	pop	{r7, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	00003fb5 	.word	0x00003fb5

00004084 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    4084:	b580      	push	{r7, lr}
    4086:	b084      	sub	sp, #16
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4092:	68fb      	ldr	r3, [r7, #12]
    4094:	69db      	ldr	r3, [r3, #28]
    4096:	1e5a      	subs	r2, r3, #1
    4098:	4193      	sbcs	r3, r2
    409a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    409c:	1c18      	adds	r0, r3, #0
    409e:	46bd      	mov	sp, r7
    40a0:	b004      	add	sp, #16
    40a2:	bd80      	pop	{r7, pc}

000040a4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b082      	sub	sp, #8
    40a8:	af00      	add	r7, sp, #0
    40aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	2201      	movs	r2, #1
    40b0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	2200      	movs	r2, #0
    40b6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	2200      	movs	r2, #0
    40bc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    40be:	687b      	ldr	r3, [r7, #4]
    40c0:	22c0      	movs	r2, #192	; 0xc0
    40c2:	0392      	lsls	r2, r2, #14
    40c4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	2200      	movs	r2, #0
    40ca:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	2200      	movs	r2, #0
    40d0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	2201      	movs	r2, #1
    40d6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	2201      	movs	r2, #1
    40dc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	2200      	movs	r2, #0
    40e2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	2224      	movs	r2, #36	; 0x24
    40e8:	2100      	movs	r1, #0
    40ea:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	3318      	adds	r3, #24
    40f0:	1c18      	adds	r0, r3, #0
    40f2:	2100      	movs	r1, #0
    40f4:	220c      	movs	r2, #12
    40f6:	4b0a      	ldr	r3, [pc, #40]	; (4120 <spi_get_config_defaults+0x7c>)
    40f8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	4a09      	ldr	r2, [pc, #36]	; (4124 <spi_get_config_defaults+0x80>)
    40fe:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	2200      	movs	r2, #0
    4104:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	2200      	movs	r2, #0
    410a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	2200      	movs	r2, #0
    4110:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	2200      	movs	r2, #0
    4116:	635a      	str	r2, [r3, #52]	; 0x34

};
    4118:	46bd      	mov	sp, r7
    411a:	b002      	add	sp, #8
    411c:	bd80      	pop	{r7, pc}
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	00009e53 	.word	0x00009e53
    4124:	000186a0 	.word	0x000186a0

00004128 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    4128:	b580      	push	{r7, lr}
    412a:	b084      	sub	sp, #16
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	681b      	ldr	r3, [r3, #0]
    4134:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	1c18      	adds	r0, r3, #0
    413c:	4b06      	ldr	r3, [pc, #24]	; (4158 <spi_enable+0x30>)
    413e:	4798      	blx	r3
    4140:	1e03      	subs	r3, r0, #0
    4142:	d1f9      	bne.n	4138 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4144:	68fb      	ldr	r3, [r7, #12]
    4146:	681b      	ldr	r3, [r3, #0]
    4148:	2202      	movs	r2, #2
    414a:	431a      	orrs	r2, r3
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	601a      	str	r2, [r3, #0]
}
    4150:	46bd      	mov	sp, r7
    4152:	b004      	add	sp, #16
    4154:	bd80      	pop	{r7, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	00004085 	.word	0x00004085

0000415c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    415c:	b580      	push	{r7, lr}
    415e:	b084      	sub	sp, #16
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4164:	687b      	ldr	r3, [r7, #4]
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	1c18      	adds	r0, r3, #0
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <spi_disable+0x30>)
    4172:	4798      	blx	r3
    4174:	1e03      	subs	r3, r0, #0
    4176:	d1f9      	bne.n	416c <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4178:	68fb      	ldr	r3, [r7, #12]
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	2202      	movs	r2, #2
    417e:	4393      	bics	r3, r2
    4180:	1c1a      	adds	r2, r3, #0
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	601a      	str	r2, [r3, #0]
}
    4186:	46bd      	mov	sp, r7
    4188:	b004      	add	sp, #16
    418a:	bd80      	pop	{r7, pc}
    418c:	00004085 	.word	0x00004085

00004190 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    4190:	b580      	push	{r7, lr}
    4192:	b084      	sub	sp, #16
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	681b      	ldr	r3, [r3, #0]
    419c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	1c1a      	adds	r2, r3, #0
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	1e5a      	subs	r2, r3, #1
    41ac:	4193      	sbcs	r3, r2
    41ae:	b2db      	uxtb	r3, r3
}
    41b0:	1c18      	adds	r0, r3, #0
    41b2:	46bd      	mov	sp, r7
    41b4:	b004      	add	sp, #16
    41b6:	bd80      	pop	{r7, pc}

000041b8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b084      	sub	sp, #16
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	681b      	ldr	r3, [r3, #0]
    41c4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	7e1b      	ldrb	r3, [r3, #24]
    41ca:	b2db      	uxtb	r3, r3
    41cc:	1c1a      	adds	r2, r3, #0
    41ce:	2301      	movs	r3, #1
    41d0:	4013      	ands	r3, r2
    41d2:	1e5a      	subs	r2, r3, #1
    41d4:	4193      	sbcs	r3, r2
    41d6:	b2db      	uxtb	r3, r3
}
    41d8:	1c18      	adds	r0, r3, #0
    41da:	46bd      	mov	sp, r7
    41dc:	b004      	add	sp, #16
    41de:	bd80      	pop	{r7, pc}

000041e0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b084      	sub	sp, #16
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	1c0a      	adds	r2, r1, #0
    41ea:	1cbb      	adds	r3, r7, #2
    41ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	681b      	ldr	r3, [r3, #0]
    41f2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	1c18      	adds	r0, r3, #0
    41f8:	4b0a      	ldr	r3, [pc, #40]	; (4224 <spi_write+0x44>)
    41fa:	4798      	blx	r3
    41fc:	1c03      	adds	r3, r0, #0
    41fe:	1c1a      	adds	r2, r3, #0
    4200:	2301      	movs	r3, #1
    4202:	4053      	eors	r3, r2
    4204:	b2db      	uxtb	r3, r3
    4206:	2b00      	cmp	r3, #0
    4208:	d001      	beq.n	420e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    420a:	2305      	movs	r3, #5
    420c:	e006      	b.n	421c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    420e:	1cbb      	adds	r3, r7, #2
    4210:	881b      	ldrh	r3, [r3, #0]
    4212:	05db      	lsls	r3, r3, #23
    4214:	0dda      	lsrs	r2, r3, #23
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    421a:	2300      	movs	r3, #0
}
    421c:	1c18      	adds	r0, r3, #0
    421e:	46bd      	mov	sp, r7
    4220:	b004      	add	sp, #16
    4222:	bd80      	pop	{r7, pc}
    4224:	000041b9 	.word	0x000041b9

00004228 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    4228:	b580      	push	{r7, lr}
    422a:	b084      	sub	sp, #16
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	681b      	ldr	r3, [r3, #0]
    4234:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4236:	68fb      	ldr	r3, [r7, #12]
    4238:	7bdb      	ldrb	r3, [r3, #15]
    423a:	b2db      	uxtb	r3, r3
    423c:	1c1a      	adds	r2, r3, #0
    423e:	2380      	movs	r3, #128	; 0x80
    4240:	4013      	ands	r3, r2
    4242:	1e5a      	subs	r2, r3, #1
    4244:	4193      	sbcs	r3, r2
    4246:	b2db      	uxtb	r3, r3
#endif
}
    4248:	1c18      	adds	r0, r3, #0
    424a:	46bd      	mov	sp, r7
    424c:	b004      	add	sp, #16
    424e:	bd80      	pop	{r7, pc}

00004250 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    4250:	b580      	push	{r7, lr}
    4252:	b082      	sub	sp, #8
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	2200      	movs	r2, #0
    425c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    425e:	687b      	ldr	r3, [r7, #4]
    4260:	2200      	movs	r2, #0
    4262:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    4264:	687b      	ldr	r3, [r7, #4]
    4266:	2200      	movs	r2, #0
    4268:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	2200      	movs	r2, #0
    426e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	2200      	movs	r2, #0
    4274:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	2200      	movs	r2, #0
    427a:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	2200      	movs	r2, #0
    4280:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	2200      	movs	r2, #0
    4286:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	2200      	movs	r2, #0
    428c:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	2200      	movs	r2, #0
    4292:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	2200      	movs	r2, #0
    4298:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	2200      	movs	r2, #0
    429e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	2200      	movs	r2, #0
    42a4:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	2200      	movs	r2, #0
    42aa:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    42ac:	687b      	ldr	r3, [r7, #4]
    42ae:	2200      	movs	r2, #0
    42b0:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	2200      	movs	r2, #0
    42b6:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    42b8:	687b      	ldr	r3, [r7, #4]
    42ba:	2200      	movs	r2, #0
    42bc:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	2200      	movs	r2, #0
    42c2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	2200      	movs	r2, #0
    42c8:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	2200      	movs	r2, #0
    42ce:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    42d0:	46bd      	mov	sp, r7
    42d2:	b002      	add	sp, #8
    42d4:	bd80      	pop	{r7, pc}
    42d6:	46c0      	nop			; (mov r8, r8)

000042d8 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    42d8:	b580      	push	{r7, lr}
    42da:	b084      	sub	sp, #16
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	681b      	ldr	r3, [r3, #0]
    42e4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	1c18      	adds	r0, r3, #0
    42ec:	4b07      	ldr	r3, [pc, #28]	; (430c <tc_enable+0x34>)
    42ee:	4798      	blx	r3
    42f0:	1e03      	subs	r3, r0, #0
    42f2:	d1f9      	bne.n	42e8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	881b      	ldrh	r3, [r3, #0]
    42f8:	b29b      	uxth	r3, r3
    42fa:	2202      	movs	r2, #2
    42fc:	4313      	orrs	r3, r2
    42fe:	b29a      	uxth	r2, r3
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	801a      	strh	r2, [r3, #0]
}
    4304:	46bd      	mov	sp, r7
    4306:	b004      	add	sp, #16
    4308:	bd80      	pop	{r7, pc}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	00004229 	.word	0x00004229

00004310 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    4310:	b580      	push	{r7, lr}
    4312:	b084      	sub	sp, #16
    4314:	af00      	add	r7, sp, #0
    4316:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	1c18      	adds	r0, r3, #0
    4324:	4b07      	ldr	r3, [pc, #28]	; (4344 <tc_disable+0x34>)
    4326:	4798      	blx	r3
    4328:	1e03      	subs	r3, r0, #0
    432a:	d1f9      	bne.n	4320 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    432c:	68fb      	ldr	r3, [r7, #12]
    432e:	881b      	ldrh	r3, [r3, #0]
    4330:	b29b      	uxth	r3, r3
    4332:	2202      	movs	r2, #2
    4334:	4393      	bics	r3, r2
    4336:	b29a      	uxth	r2, r3
    4338:	68fb      	ldr	r3, [r7, #12]
    433a:	801a      	strh	r2, [r3, #0]
}
    433c:	46bd      	mov	sp, r7
    433e:	b004      	add	sp, #16
    4340:	bd80      	pop	{r7, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	00004229 	.word	0x00004229

00004348 <tc_stop_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_stop_counter(
		const struct tc_module *const module_inst)
{
    4348:	b580      	push	{r7, lr}
    434a:	b084      	sub	sp, #16
    434c:	af00      	add	r7, sp, #0
    434e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	681b      	ldr	r3, [r3, #0]
    4354:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	1c18      	adds	r0, r3, #0
    435c:	4b04      	ldr	r3, [pc, #16]	; (4370 <tc_stop_counter+0x28>)
    435e:	4798      	blx	r3
    4360:	1e03      	subs	r3, r0, #0
    4362:	d1f9      	bne.n	4358 <tc_stop_counter+0x10>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	2280      	movs	r2, #128	; 0x80
    4368:	715a      	strb	r2, [r3, #5]
}
    436a:	46bd      	mov	sp, r7
    436c:	b004      	add	sp, #16
    436e:	bd80      	pop	{r7, pc}
    4370:	00004229 	.word	0x00004229

00004374 <tc_start_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_start_counter(
		const struct tc_module *const module_inst)
{
    4374:	b580      	push	{r7, lr}
    4376:	b084      	sub	sp, #16
    4378:	af00      	add	r7, sp, #0
    437a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	1c18      	adds	r0, r3, #0
    4388:	4b09      	ldr	r3, [pc, #36]	; (43b0 <tc_start_counter+0x3c>)
    438a:	4798      	blx	r3
    438c:	1e03      	subs	r3, r0, #0
    438e:	d1f9      	bne.n	4384 <tc_start_counter+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	2200      	movs	r2, #0
    4394:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	1c18      	adds	r0, r3, #0
    439c:	4b04      	ldr	r3, [pc, #16]	; (43b0 <tc_start_counter+0x3c>)
    439e:	4798      	blx	r3
    43a0:	1e03      	subs	r3, r0, #0
    43a2:	d1f9      	bne.n	4398 <tc_start_counter+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	2240      	movs	r2, #64	; 0x40
    43a8:	715a      	strb	r2, [r3, #5]
}
    43aa:	46bd      	mov	sp, r7
    43ac:	b004      	add	sp, #16
    43ae:	bd80      	pop	{r7, pc}
    43b0:	00004229 	.word	0x00004229

000043b4 <initialize_EPD_timer>:
*
* \note
* desired value: 1mSec
* actual value:  1.000mSec
*/
static void initialize_EPD_timer(void) {
    43b4:	b580      	push	{r7, lr}
    43b6:	b08e      	sub	sp, #56	; 0x38
    43b8:	af00      	add	r7, sp, #0

	 struct tc_config config_tc;
	 
	 tc_reset(&tc_instance);
    43ba:	4b1b      	ldr	r3, [pc, #108]	; (4428 <initialize_EPD_timer+0x74>)
    43bc:	1c18      	adds	r0, r3, #0
    43be:	4b1b      	ldr	r3, [pc, #108]	; (442c <initialize_EPD_timer+0x78>)
    43c0:	4798      	blx	r3
	 tc_get_config_defaults(&config_tc);
    43c2:	1d3b      	adds	r3, r7, #4
    43c4:	1c18      	adds	r0, r3, #0
    43c6:	4b1a      	ldr	r3, [pc, #104]	; (4430 <initialize_EPD_timer+0x7c>)
    43c8:	4798      	blx	r3
	 config_tc.clock_source=TC_CLK_Source;
    43ca:	1d3b      	adds	r3, r7, #4
    43cc:	2203      	movs	r2, #3
    43ce:	701a      	strb	r2, [r3, #0]
	 config_tc.clock_prescaler=TC_CLOCK_PRESCALER_DIV8;
    43d0:	1d3b      	adds	r3, r7, #4
    43d2:	22c0      	movs	r2, #192	; 0xc0
    43d4:	0092      	lsls	r2, r2, #2
    43d6:	809a      	strh	r2, [r3, #4]
	 config_tc.counter_size=TC_COUNTER_SIZE_32BIT;
    43d8:	1d3b      	adds	r3, r7, #4
    43da:	2208      	movs	r2, #8
    43dc:	709a      	strb	r2, [r3, #2]
	 config_tc.reload_action=TC_RELOAD_ACTION_RESYNC;
    43de:	1d3b      	adds	r3, r7, #4
    43e0:	2280      	movs	r2, #128	; 0x80
    43e2:	0192      	lsls	r2, r2, #6
    43e4:	811a      	strh	r2, [r3, #8]
	 config_tc.count_direction=TC_COUNT_DIRECTION_UP;
    43e6:	1d3b      	adds	r3, r7, #4
    43e8:	2200      	movs	r2, #0
    43ea:	739a      	strb	r2, [r3, #14]
	 config_tc.counter_32_bit.value=0;
    43ec:	1d3b      	adds	r3, r7, #4
    43ee:	2200      	movs	r2, #0
    43f0:	629a      	str	r2, [r3, #40]	; 0x28
	 
	 tc_init(&tc_instance, TC_HW, &config_tc);
    43f2:	4a0d      	ldr	r2, [pc, #52]	; (4428 <initialize_EPD_timer+0x74>)
    43f4:	490f      	ldr	r1, [pc, #60]	; (4434 <initialize_EPD_timer+0x80>)
    43f6:	1d3b      	adds	r3, r7, #4
    43f8:	1c10      	adds	r0, r2, #0
    43fa:	1c1a      	adds	r2, r3, #0
    43fc:	4b0e      	ldr	r3, [pc, #56]	; (4438 <initialize_EPD_timer+0x84>)
    43fe:	4798      	blx	r3
	 tc_enable(&tc_instance);
    4400:	4b09      	ldr	r3, [pc, #36]	; (4428 <initialize_EPD_timer+0x74>)
    4402:	1c18      	adds	r0, r3, #0
    4404:	4b0d      	ldr	r3, [pc, #52]	; (443c <initialize_EPD_timer+0x88>)
    4406:	4798      	blx	r3
	 tc_set_count_value(&tc_instance, 0);
    4408:	4b07      	ldr	r3, [pc, #28]	; (4428 <initialize_EPD_timer+0x74>)
    440a:	1c18      	adds	r0, r3, #0
    440c:	2100      	movs	r1, #0
    440e:	4b0c      	ldr	r3, [pc, #48]	; (4440 <initialize_EPD_timer+0x8c>)
    4410:	4798      	blx	r3
	 tc_start_counter(&tc_instance);
    4412:	4b05      	ldr	r3, [pc, #20]	; (4428 <initialize_EPD_timer+0x74>)
    4414:	1c18      	adds	r0, r3, #0
    4416:	4b0b      	ldr	r3, [pc, #44]	; (4444 <initialize_EPD_timer+0x90>)
    4418:	4798      	blx	r3
	 EPD_Counter=0;
    441a:	4b0b      	ldr	r3, [pc, #44]	; (4448 <initialize_EPD_timer+0x94>)
    441c:	2200      	movs	r2, #0
    441e:	601a      	str	r2, [r3, #0]
}
    4420:	46bd      	mov	sp, r7
    4422:	b00e      	add	sp, #56	; 0x38
    4424:	bd80      	pop	{r7, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	20002f30 	.word	0x20002f30
    442c:	0000117d 	.word	0x0000117d
    4430:	00004251 	.word	0x00004251
    4434:	42003000 	.word	0x42003000
    4438:	00000c65 	.word	0x00000c65
    443c:	000042d9 	.word	0x000042d9
    4440:	000010c9 	.word	0x000010c9
    4444:	00004375 	.word	0x00004375
    4448:	2000011c 	.word	0x2000011c

0000444c <start_EPD_timer>:

/**
* \brief Start Timer
*/
void start_EPD_timer(void) {
    444c:	b580      	push	{r7, lr}
    444e:	af00      	add	r7, sp, #0
	initialize_EPD_timer();
    4450:	4b01      	ldr	r3, [pc, #4]	; (4458 <start_EPD_timer+0xc>)
    4452:	4798      	blx	r3
}
    4454:	46bd      	mov	sp, r7
    4456:	bd80      	pop	{r7, pc}
    4458:	000043b5 	.word	0x000043b5

0000445c <stop_EPD_timer>:

/**
* \brief Stop Timer
*/
void stop_EPD_timer(void) {
    445c:	b580      	push	{r7, lr}
    445e:	af00      	add	r7, sp, #0
    tc_stop_counter(&tc_instance);
    4460:	4b04      	ldr	r3, [pc, #16]	; (4474 <stop_EPD_timer+0x18>)
    4462:	1c18      	adds	r0, r3, #0
    4464:	4b04      	ldr	r3, [pc, #16]	; (4478 <stop_EPD_timer+0x1c>)
    4466:	4798      	blx	r3
	tc_disable(&tc_instance);
    4468:	4b02      	ldr	r3, [pc, #8]	; (4474 <stop_EPD_timer+0x18>)
    446a:	1c18      	adds	r0, r3, #0
    446c:	4b03      	ldr	r3, [pc, #12]	; (447c <stop_EPD_timer+0x20>)
    446e:	4798      	blx	r3
	
}
    4470:	46bd      	mov	sp, r7
    4472:	bd80      	pop	{r7, pc}
    4474:	20002f30 	.word	0x20002f30
    4478:	00004349 	.word	0x00004349
    447c:	00004311 	.word	0x00004311

00004480 <get_current_time_tick>:

/**
* \brief Get current Timer after starting a new one
*/
uint32_t get_current_time_tick(void) {
    4480:	b580      	push	{r7, lr}
    4482:	af00      	add	r7, sp, #0
	EPD_Counter=tc_get_count_value(&tc_instance)/1000;
    4484:	4b09      	ldr	r3, [pc, #36]	; (44ac <get_current_time_tick+0x2c>)
    4486:	1c18      	adds	r0, r3, #0
    4488:	4b09      	ldr	r3, [pc, #36]	; (44b0 <get_current_time_tick+0x30>)
    448a:	4798      	blx	r3
    448c:	1c02      	adds	r2, r0, #0
    448e:	4b09      	ldr	r3, [pc, #36]	; (44b4 <get_current_time_tick+0x34>)
    4490:	1c10      	adds	r0, r2, #0
    4492:	22fa      	movs	r2, #250	; 0xfa
    4494:	0091      	lsls	r1, r2, #2
    4496:	4798      	blx	r3
    4498:	1c03      	adds	r3, r0, #0
    449a:	1c1a      	adds	r2, r3, #0
    449c:	4b06      	ldr	r3, [pc, #24]	; (44b8 <get_current_time_tick+0x38>)
    449e:	601a      	str	r2, [r3, #0]
	return EPD_Counter;
    44a0:	4b05      	ldr	r3, [pc, #20]	; (44b8 <get_current_time_tick+0x38>)
    44a2:	681b      	ldr	r3, [r3, #0]
}
    44a4:	1c18      	adds	r0, r3, #0
    44a6:	46bd      	mov	sp, r7
    44a8:	bd80      	pop	{r7, pc}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	20002f30 	.word	0x20002f30
    44b0:	00001129 	.word	0x00001129
    44b4:	00007755 	.word	0x00007755
    44b8:	2000011c 	.word	0x2000011c

000044bc <Wait_10us>:
	while ((EPD_Counter - curTicks) < ms) __WFI();
	stop_EPD_timer();
}


static void Wait_10us(void) {
    44bc:	b580      	push	{r7, lr}
    44be:	af00      	add	r7, sp, #0
	//delay_us(10);
}
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}

000044c4 <epd_spi_init>:
static bool spi_flag=FALSE;
//#define SLAVE_SELECT_PIN Flash_CS_PIN
/**
* \brief Configure SPI
*/
void epd_spi_init(void) {
    44c4:	b580      	push	{r7, lr}
    44c6:	b08e      	sub	sp, #56	; 0x38
    44c8:	af00      	add	r7, sp, #0
	if(spi_flag) return;
    44ca:	4b18      	ldr	r3, [pc, #96]	; (452c <epd_spi_init+0x68>)
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d128      	bne.n	4524 <epd_spi_init+0x60>
	struct spi_config config_spi_master;  
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    44d2:	1c3b      	adds	r3, r7, #0
    44d4:	1c18      	adds	r0, r3, #0
    44d6:	4b16      	ldr	r3, [pc, #88]	; (4530 <epd_spi_init+0x6c>)
    44d8:	4798      	blx	r3

	config_spi_master.mux_setting = SPI_SERCOM_MUX;
    44da:	1c3b      	adds	r3, r7, #0
    44dc:	2280      	movs	r2, #128	; 0x80
    44de:	0252      	lsls	r2, r2, #9
    44e0:	60da      	str	r2, [r3, #12]
	config_spi_master.transfer_mode=SPI_TRANSFER_MODE_0;
    44e2:	1c3b      	adds	r3, r7, #0
    44e4:	2200      	movs	r2, #0
    44e6:	609a      	str	r2, [r3, #8]
    config_spi_master.mode_specific.master.baudrate=SPI_baudrate;
    44e8:	1c3b      	adds	r3, r7, #0
    44ea:	4a12      	ldr	r2, [pc, #72]	; (4534 <epd_spi_init+0x70>)
    44ec:	619a      	str	r2, [r3, #24]
	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EX_SPI_MISO_PAD;
    44ee:	1c3b      	adds	r3, r7, #0
    44f0:	4a11      	ldr	r2, [pc, #68]	; (4538 <epd_spi_init+0x74>)
    44f2:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 =PINMUX_UNUSED;
    44f4:	1c3b      	adds	r3, r7, #0
    44f6:	2201      	movs	r2, #1
    44f8:	4252      	negs	r2, r2
    44fa:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = EX_SPI_MOSI_PAD;
    44fc:	1c3b      	adds	r3, r7, #0
    44fe:	4a0f      	ldr	r2, [pc, #60]	; (453c <epd_spi_init+0x78>)
    4500:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EX_SPI_SCK_PAD;
    4502:	1c3b      	adds	r3, r7, #0
    4504:	4a0e      	ldr	r2, [pc, #56]	; (4540 <epd_spi_init+0x7c>)
    4506:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi_master);
    4508:	4a0e      	ldr	r2, [pc, #56]	; (4544 <epd_spi_init+0x80>)
    450a:	490f      	ldr	r1, [pc, #60]	; (4548 <epd_spi_init+0x84>)
    450c:	1c3b      	adds	r3, r7, #0
    450e:	1c10      	adds	r0, r2, #0
    4510:	1c1a      	adds	r2, r3, #0
    4512:	4b0e      	ldr	r3, [pc, #56]	; (454c <epd_spi_init+0x88>)
    4514:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    4516:	4b0b      	ldr	r3, [pc, #44]	; (4544 <epd_spi_init+0x80>)
    4518:	1c18      	adds	r0, r3, #0
    451a:	4b0d      	ldr	r3, [pc, #52]	; (4550 <epd_spi_init+0x8c>)
    451c:	4798      	blx	r3
	spi_flag=TRUE;
    451e:	4b03      	ldr	r3, [pc, #12]	; (452c <epd_spi_init+0x68>)
    4520:	2201      	movs	r2, #1
    4522:	701a      	strb	r2, [r3, #0]
}
    4524:	46bd      	mov	sp, r7
    4526:	b00e      	add	sp, #56	; 0x38
    4528:	bd80      	pop	{r7, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	2000012c 	.word	0x2000012c
    4530:	000040a5 	.word	0x000040a5
    4534:	007a1200 	.word	0x007a1200
    4538:	00100002 	.word	0x00100002
    453c:	00120002 	.word	0x00120002
    4540:	00130002 	.word	0x00130002
    4544:	20000120 	.word	0x20000120
    4548:	42000c00 	.word	0x42000c00
    454c:	00005d95 	.word	0x00005d95
    4550:	00004129 	.word	0x00004129

00004554 <epd_spi_attach>:

/**
* \brief Initialize SPI
*/
void epd_spi_attach (void) {
    4554:	b580      	push	{r7, lr}
    4556:	af00      	add	r7, sp, #0
	epd_spi_init();
    4558:	4b01      	ldr	r3, [pc, #4]	; (4560 <epd_spi_attach+0xc>)
    455a:	4798      	blx	r3

}
    455c:	46bd      	mov	sp, r7
    455e:	bd80      	pop	{r7, pc}
    4560:	000044c5 	.word	0x000044c5

00004564 <epd_spi_detach>:

/**
* \brief Disable SPI and change to GPIO
*/
void epd_spi_detach (void) {
    4564:	b580      	push	{r7, lr}
    4566:	af00      	add	r7, sp, #0
	spi_disable(&spi_master_instance);
    4568:	4b14      	ldr	r3, [pc, #80]	; (45bc <epd_spi_detach+0x58>)
    456a:	1c18      	adds	r0, r3, #0
    456c:	4b14      	ldr	r3, [pc, #80]	; (45c0 <epd_spi_detach+0x5c>)
    456e:	4798      	blx	r3
	
    ioport_enable_pin(SPI_CLK_PIN);    
    4570:	2013      	movs	r0, #19
    4572:	4b14      	ldr	r3, [pc, #80]	; (45c4 <epd_spi_detach+0x60>)
    4574:	4798      	blx	r3
    ioport_enable_pin(SPI_MOSI_PIN);
    4576:	2012      	movs	r0, #18
    4578:	4b12      	ldr	r3, [pc, #72]	; (45c4 <epd_spi_detach+0x60>)
    457a:	4798      	blx	r3
	ioport_enable_pin(SPI_MISO_PIN);
    457c:	2010      	movs	r0, #16
    457e:	4b11      	ldr	r3, [pc, #68]	; (45c4 <epd_spi_detach+0x60>)
    4580:	4798      	blx	r3
	
    config_gpio_dir_o(SPI_CLK_PIN);
    4582:	2013      	movs	r0, #19
    4584:	2101      	movs	r1, #1
    4586:	4b10      	ldr	r3, [pc, #64]	; (45c8 <epd_spi_detach+0x64>)
    4588:	4798      	blx	r3
    config_gpio_dir_o(SPI_MOSI_PIN);
    458a:	2012      	movs	r0, #18
    458c:	2101      	movs	r1, #1
    458e:	4b0e      	ldr	r3, [pc, #56]	; (45c8 <epd_spi_detach+0x64>)
    4590:	4798      	blx	r3
    config_gpio_dir_o(SPI_MISO_PIN);
    4592:	2010      	movs	r0, #16
    4594:	2101      	movs	r1, #1
    4596:	4b0c      	ldr	r3, [pc, #48]	; (45c8 <epd_spi_detach+0x64>)
    4598:	4798      	blx	r3
	
    set_gpio_low(SPI_CLK_PIN);
    459a:	2013      	movs	r0, #19
    459c:	2100      	movs	r1, #0
    459e:	4b0b      	ldr	r3, [pc, #44]	; (45cc <epd_spi_detach+0x68>)
    45a0:	4798      	blx	r3
    set_gpio_low(SPI_MISO_PIN);
    45a2:	2010      	movs	r0, #16
    45a4:	2100      	movs	r1, #0
    45a6:	4b09      	ldr	r3, [pc, #36]	; (45cc <epd_spi_detach+0x68>)
    45a8:	4798      	blx	r3
    set_gpio_low(SPI_MOSI_PIN);
    45aa:	2012      	movs	r0, #18
    45ac:	2100      	movs	r1, #0
    45ae:	4b07      	ldr	r3, [pc, #28]	; (45cc <epd_spi_detach+0x68>)
    45b0:	4798      	blx	r3
	spi_flag=FALSE;
    45b2:	4b07      	ldr	r3, [pc, #28]	; (45d0 <epd_spi_detach+0x6c>)
    45b4:	2200      	movs	r2, #0
    45b6:	701a      	strb	r2, [r3, #0]
	
}
    45b8:	46bd      	mov	sp, r7
    45ba:	bd80      	pop	{r7, pc}
    45bc:	20000120 	.word	0x20000120
    45c0:	0000415d 	.word	0x0000415d
    45c4:	00004019 	.word	0x00004019
    45c8:	00004035 	.word	0x00004035
    45cc:	0000405d 	.word	0x0000405d
    45d0:	2000012c 	.word	0x2000012c

000045d4 <epd_spi_write>:
/**
 * \brief Send data to SPI
 *
 * \param Data The data to be sent out
 */
void epd_spi_write (unsigned char Data) {
    45d4:	b580      	push	{r7, lr}
    45d6:	b082      	sub	sp, #8
    45d8:	af00      	add	r7, sp, #0
    45da:	1c02      	adds	r2, r0, #0
    45dc:	1dfb      	adds	r3, r7, #7
    45de:	701a      	strb	r2, [r3, #0]
	//uint16_t retval;
	//spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
	spi_write(&spi_master_instance, Data);
    45e0:	1dfb      	adds	r3, r7, #7
    45e2:	781b      	ldrb	r3, [r3, #0]
    45e4:	b29b      	uxth	r3, r3
    45e6:	4a0a      	ldr	r2, [pc, #40]	; (4610 <epd_spi_write+0x3c>)
    45e8:	1c10      	adds	r0, r2, #0
    45ea:	1c19      	adds	r1, r3, #0
    45ec:	4b09      	ldr	r3, [pc, #36]	; (4614 <epd_spi_write+0x40>)
    45ee:	4798      	blx	r3
	while (!spi_is_write_complete(&spi_master_instance));
    45f0:	46c0      	nop			; (mov r8, r8)
    45f2:	4b07      	ldr	r3, [pc, #28]	; (4610 <epd_spi_write+0x3c>)
    45f4:	1c18      	adds	r0, r3, #0
    45f6:	4b08      	ldr	r3, [pc, #32]	; (4618 <epd_spi_write+0x44>)
    45f8:	4798      	blx	r3
    45fa:	1c03      	adds	r3, r0, #0
    45fc:	1c1a      	adds	r2, r3, #0
    45fe:	2301      	movs	r3, #1
    4600:	4053      	eors	r3, r2
    4602:	b2db      	uxtb	r3, r3
    4604:	2b00      	cmp	r3, #0
    4606:	d1f4      	bne.n	45f2 <epd_spi_write+0x1e>
	//while (!spi_is_ready_to_read(&spi_master_instance));
	//spi_read(&spi_master_instance, &retval);
	
}
    4608:	46bd      	mov	sp, r7
    460a:	b002      	add	sp, #8
    460c:	bd80      	pop	{r7, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	20000120 	.word	0x20000120
    4614:	000041e1 	.word	0x000041e1
    4618:	00004191 	.word	0x00004191

0000461c <epd_spi_read>:
/**
 * \brief SPI synchronous read
 *
 * \param RDATA The data to be read
 */
uint8_t epd_spi_read(uint16_t rdata) {
    461c:	b580      	push	{r7, lr}
    461e:	b082      	sub	sp, #8
    4620:	af00      	add	r7, sp, #0
    4622:	1c02      	adds	r2, r0, #0
    4624:	1dbb      	adds	r3, r7, #6
    4626:	801a      	strh	r2, [r3, #0]
	//spi_master_instance.hw->SPI.CTRLB.bit.RXEN=1;
	spi_transceive_wait(&spi_master_instance,rdata, (uint16_t *)&rdata);
    4628:	1dbb      	adds	r3, r7, #6
    462a:	881a      	ldrh	r2, [r3, #0]
    462c:	4906      	ldr	r1, [pc, #24]	; (4648 <epd_spi_read+0x2c>)
    462e:	1dbb      	adds	r3, r7, #6
    4630:	1c08      	adds	r0, r1, #0
    4632:	1c11      	adds	r1, r2, #0
    4634:	1c1a      	adds	r2, r3, #0
    4636:	4b05      	ldr	r3, [pc, #20]	; (464c <epd_spi_read+0x30>)
    4638:	4798      	blx	r3
	return rdata;
    463a:	1dbb      	adds	r3, r7, #6
    463c:	881b      	ldrh	r3, [r3, #0]
    463e:	b2db      	uxtb	r3, r3
}
    4640:	1c18      	adds	r0, r3, #0
    4642:	46bd      	mov	sp, r7
    4644:	b002      	add	sp, #8
    4646:	bd80      	pop	{r7, pc}
    4648:	20000120 	.word	0x20000120
    464c:	00005e9d 	.word	0x00005e9d

00004650 <SPI_R>:
*
* \param Register The Register Index as SPI Data to COG
* \param Data The Register Data for sending command data to COG
* \return the SPI read value
*/
uint8_t SPI_R(uint8_t Register, uint8_t Data) {
    4650:	b590      	push	{r4, r7, lr}
    4652:	b085      	sub	sp, #20
    4654:	af00      	add	r7, sp, #0
    4656:	1c02      	adds	r2, r0, #0
    4658:	1dfb      	adds	r3, r7, #7
    465a:	701a      	strb	r2, [r3, #0]
    465c:	1dbb      	adds	r3, r7, #6
    465e:	1c0a      	adds	r2, r1, #0
    4660:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    4662:	4b1d      	ldr	r3, [pc, #116]	; (46d8 <SPI_R+0x88>)
    4664:	681b      	ldr	r3, [r3, #0]
    4666:	685a      	ldr	r2, [r3, #4]
    4668:	491c      	ldr	r1, [pc, #112]	; (46dc <SPI_R+0x8c>)
    466a:	400a      	ands	r2, r1
    466c:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    466e:	2011      	movs	r0, #17
    4670:	2100      	movs	r1, #0
    4672:	4b1b      	ldr	r3, [pc, #108]	; (46e0 <SPI_R+0x90>)
    4674:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    4676:	2070      	movs	r0, #112	; 0x70
    4678:	4b1a      	ldr	r3, [pc, #104]	; (46e4 <SPI_R+0x94>)
    467a:	4798      	blx	r3
	epd_spi_write (Register);
    467c:	1dfb      	adds	r3, r7, #7
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	1c18      	adds	r0, r3, #0
    4682:	4b18      	ldr	r3, [pc, #96]	; (46e4 <SPI_R+0x94>)
    4684:	4798      	blx	r3

	EPD_cs_high ();
    4686:	2011      	movs	r0, #17
    4688:	2101      	movs	r1, #1
    468a:	4b15      	ldr	r3, [pc, #84]	; (46e0 <SPI_R+0x90>)
    468c:	4798      	blx	r3
	Wait_10us ();	
    468e:	4b16      	ldr	r3, [pc, #88]	; (46e8 <SPI_R+0x98>)
    4690:	4798      	blx	r3
	
	EPD_cs_low ();
    4692:	2011      	movs	r0, #17
    4694:	2100      	movs	r1, #0
    4696:	4b12      	ldr	r3, [pc, #72]	; (46e0 <SPI_R+0x90>)
    4698:	4798      	blx	r3

	epd_spi_write (0x73); // header of Register Data of read command
    469a:	2073      	movs	r0, #115	; 0x73
    469c:	4b11      	ldr	r3, [pc, #68]	; (46e4 <SPI_R+0x94>)
    469e:	4798      	blx	r3
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=1;
    46a0:	4b0d      	ldr	r3, [pc, #52]	; (46d8 <SPI_R+0x88>)
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	685a      	ldr	r2, [r3, #4]
    46a6:	2180      	movs	r1, #128	; 0x80
    46a8:	0289      	lsls	r1, r1, #10
    46aa:	430a      	orrs	r2, r1
    46ac:	605a      	str	r2, [r3, #4]
	result=epd_spi_read (Data);
    46ae:	1dbb      	adds	r3, r7, #6
    46b0:	781b      	ldrb	r3, [r3, #0]
    46b2:	b29b      	uxth	r3, r3
    46b4:	220f      	movs	r2, #15
    46b6:	18bc      	adds	r4, r7, r2
    46b8:	1c18      	adds	r0, r3, #0
    46ba:	4b0c      	ldr	r3, [pc, #48]	; (46ec <SPI_R+0x9c>)
    46bc:	4798      	blx	r3
    46be:	1c03      	adds	r3, r0, #0
    46c0:	7023      	strb	r3, [r4, #0]

	EPD_cs_high ();
    46c2:	2011      	movs	r0, #17
    46c4:	2101      	movs	r1, #1
    46c6:	4b06      	ldr	r3, [pc, #24]	; (46e0 <SPI_R+0x90>)
    46c8:	4798      	blx	r3

	return result;
    46ca:	230f      	movs	r3, #15
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	781b      	ldrb	r3, [r3, #0]
}
    46d0:	1c18      	adds	r0, r3, #0
    46d2:	46bd      	mov	sp, r7
    46d4:	b005      	add	sp, #20
    46d6:	bd90      	pop	{r4, r7, pc}
    46d8:	20000120 	.word	0x20000120
    46dc:	fffdffff 	.word	0xfffdffff
    46e0:	0000405d 	.word	0x0000405d
    46e4:	000045d5 	.word	0x000045d5
    46e8:	000044bd 	.word	0x000044bd
    46ec:	0000461d 	.word	0x0000461d

000046f0 <epd_spi_send>:
* \param register_data The Register Data for sending command data to COG
* \param length The number of bytes of Register Data which depends on which
* Register Index is selected.
*/
void epd_spi_send (unsigned char register_index, unsigned char *register_data,
               unsigned length) {
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60b9      	str	r1, [r7, #8]
    46f8:	607a      	str	r2, [r7, #4]
    46fa:	230f      	movs	r3, #15
    46fc:	18fb      	adds	r3, r7, r3
    46fe:	1c02      	adds	r2, r0, #0
    4700:	701a      	strb	r2, [r3, #0]
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    4702:	4b1a      	ldr	r3, [pc, #104]	; (476c <epd_spi_send+0x7c>)
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	685a      	ldr	r2, [r3, #4]
    4708:	4919      	ldr	r1, [pc, #100]	; (4770 <epd_spi_send+0x80>)
    470a:	400a      	ands	r2, r1
    470c:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    470e:	2011      	movs	r0, #17
    4710:	2100      	movs	r1, #0
    4712:	4b18      	ldr	r3, [pc, #96]	; (4774 <epd_spi_send+0x84>)
    4714:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    4716:	2070      	movs	r0, #112	; 0x70
    4718:	4b17      	ldr	r3, [pc, #92]	; (4778 <epd_spi_send+0x88>)
    471a:	4798      	blx	r3
	epd_spi_write (register_index);
    471c:	230f      	movs	r3, #15
    471e:	18fb      	adds	r3, r7, r3
    4720:	781b      	ldrb	r3, [r3, #0]
    4722:	1c18      	adds	r0, r3, #0
    4724:	4b14      	ldr	r3, [pc, #80]	; (4778 <epd_spi_send+0x88>)
    4726:	4798      	blx	r3

	EPD_cs_high ();
    4728:	2011      	movs	r0, #17
    472a:	2101      	movs	r1, #1
    472c:	4b11      	ldr	r3, [pc, #68]	; (4774 <epd_spi_send+0x84>)
    472e:	4798      	blx	r3
	Wait_10us ();
    4730:	4b12      	ldr	r3, [pc, #72]	; (477c <epd_spi_send+0x8c>)
    4732:	4798      	blx	r3
	EPD_cs_low ();
    4734:	2011      	movs	r0, #17
    4736:	2100      	movs	r1, #0
    4738:	4b0e      	ldr	r3, [pc, #56]	; (4774 <epd_spi_send+0x84>)
    473a:	4798      	blx	r3

	epd_spi_write (0x72); // header of Register Data of write command
    473c:	2072      	movs	r0, #114	; 0x72
    473e:	4b0e      	ldr	r3, [pc, #56]	; (4778 <epd_spi_send+0x88>)
    4740:	4798      	blx	r3
	while(length--) {
    4742:	e006      	b.n	4752 <epd_spi_send+0x62>
	   epd_spi_write (*register_data++);
    4744:	68bb      	ldr	r3, [r7, #8]
    4746:	1c5a      	adds	r2, r3, #1
    4748:	60ba      	str	r2, [r7, #8]
    474a:	781b      	ldrb	r3, [r3, #0]
    474c:	1c18      	adds	r0, r3, #0
    474e:	4b0a      	ldr	r3, [pc, #40]	; (4778 <epd_spi_send+0x88>)
    4750:	4798      	blx	r3
	EPD_cs_high ();
	Wait_10us ();
	EPD_cs_low ();

	epd_spi_write (0x72); // header of Register Data of write command
	while(length--) {
    4752:	687b      	ldr	r3, [r7, #4]
    4754:	1e5a      	subs	r2, r3, #1
    4756:	607a      	str	r2, [r7, #4]
    4758:	2b00      	cmp	r3, #0
    475a:	d1f3      	bne.n	4744 <epd_spi_send+0x54>
	   epd_spi_write (*register_data++);
	}
	EPD_cs_high ();
    475c:	2011      	movs	r0, #17
    475e:	2101      	movs	r1, #1
    4760:	4b04      	ldr	r3, [pc, #16]	; (4774 <epd_spi_send+0x84>)
    4762:	4798      	blx	r3
}
    4764:	46bd      	mov	sp, r7
    4766:	b004      	add	sp, #16
    4768:	bd80      	pop	{r7, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	20000120 	.word	0x20000120
    4770:	fffdffff 	.word	0xfffdffff
    4774:	0000405d 	.word	0x0000405d
    4778:	000045d5 	.word	0x000045d5
    477c:	000044bd 	.word	0x000044bd

00004780 <epd_spi_send_byte>:
* \brief SPI command
*
* \param register_index The Register Index as SPI command to COG
* \param register_data The Register Data for sending command data to COG
*/
void epd_spi_send_byte (uint8_t register_index, uint8_t register_data) {
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	1c02      	adds	r2, r0, #0
    4788:	1dfb      	adds	r3, r7, #7
    478a:	701a      	strb	r2, [r3, #0]
    478c:	1dbb      	adds	r3, r7, #6
    478e:	1c0a      	adds	r2, r1, #0
    4790:	701a      	strb	r2, [r3, #0]
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    4792:	4b15      	ldr	r3, [pc, #84]	; (47e8 <epd_spi_send_byte+0x68>)
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	685a      	ldr	r2, [r3, #4]
    4798:	4914      	ldr	r1, [pc, #80]	; (47ec <epd_spi_send_byte+0x6c>)
    479a:	400a      	ands	r2, r1
    479c:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    479e:	2011      	movs	r0, #17
    47a0:	2100      	movs	r1, #0
    47a2:	4b13      	ldr	r3, [pc, #76]	; (47f0 <epd_spi_send_byte+0x70>)
    47a4:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    47a6:	2070      	movs	r0, #112	; 0x70
    47a8:	4b12      	ldr	r3, [pc, #72]	; (47f4 <epd_spi_send_byte+0x74>)
    47aa:	4798      	blx	r3
	epd_spi_write (register_index);
    47ac:	1dfb      	adds	r3, r7, #7
    47ae:	781b      	ldrb	r3, [r3, #0]
    47b0:	1c18      	adds	r0, r3, #0
    47b2:	4b10      	ldr	r3, [pc, #64]	; (47f4 <epd_spi_send_byte+0x74>)
    47b4:	4798      	blx	r3

	EPD_cs_high ();
    47b6:	2011      	movs	r0, #17
    47b8:	2101      	movs	r1, #1
    47ba:	4b0d      	ldr	r3, [pc, #52]	; (47f0 <epd_spi_send_byte+0x70>)
    47bc:	4798      	blx	r3
	Wait_10us ();
    47be:	4b0e      	ldr	r3, [pc, #56]	; (47f8 <epd_spi_send_byte+0x78>)
    47c0:	4798      	blx	r3
	EPD_cs_low ();
    47c2:	2011      	movs	r0, #17
    47c4:	2100      	movs	r1, #0
    47c6:	4b0a      	ldr	r3, [pc, #40]	; (47f0 <epd_spi_send_byte+0x70>)
    47c8:	4798      	blx	r3
	epd_spi_write (0x72); // header of Register Data
    47ca:	2072      	movs	r0, #114	; 0x72
    47cc:	4b09      	ldr	r3, [pc, #36]	; (47f4 <epd_spi_send_byte+0x74>)
    47ce:	4798      	blx	r3
	epd_spi_write (register_data);
    47d0:	1dbb      	adds	r3, r7, #6
    47d2:	781b      	ldrb	r3, [r3, #0]
    47d4:	1c18      	adds	r0, r3, #0
    47d6:	4b07      	ldr	r3, [pc, #28]	; (47f4 <epd_spi_send_byte+0x74>)
    47d8:	4798      	blx	r3
	EPD_cs_high ();
    47da:	2011      	movs	r0, #17
    47dc:	2101      	movs	r1, #1
    47de:	4b04      	ldr	r3, [pc, #16]	; (47f0 <epd_spi_send_byte+0x70>)
    47e0:	4798      	blx	r3
}
    47e2:	46bd      	mov	sp, r7
    47e4:	b002      	add	sp, #8
    47e6:	bd80      	pop	{r7, pc}
    47e8:	20000120 	.word	0x20000120
    47ec:	fffdffff 	.word	0xfffdffff
    47f0:	0000405d 	.word	0x0000405d
    47f4:	000045d5 	.word	0x000045d5
    47f8:	000044bd 	.word	0x000044bd

000047fc <get_ADC_value>:
/**
* \brief ADC trigger conversion
*
* \return the ADC conversion value
*/
static inline uint16_t get_ADC_value(void) {
    47fc:	b580      	push	{r7, lr}
    47fe:	b082      	sub	sp, #8
    4800:	af00      	add	r7, sp, #0
	/** Conversion value */
    uint16_t g_adc_sample_data;
	adc_start_conversion(&adc_instance);
    4802:	4b09      	ldr	r3, [pc, #36]	; (4828 <get_ADC_value+0x2c>)
    4804:	1c18      	adds	r0, r3, #0
    4806:	4b09      	ldr	r3, [pc, #36]	; (482c <get_ADC_value+0x30>)
    4808:	4798      	blx	r3
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &g_adc_sample_data) == STATUS_BUSY);	
    480a:	4a07      	ldr	r2, [pc, #28]	; (4828 <get_ADC_value+0x2c>)
    480c:	1dbb      	adds	r3, r7, #6
    480e:	1c10      	adds	r0, r2, #0
    4810:	1c19      	adds	r1, r3, #0
    4812:	4b07      	ldr	r3, [pc, #28]	; (4830 <get_ADC_value+0x34>)
    4814:	4798      	blx	r3
    4816:	1e03      	subs	r3, r0, #0
    4818:	2b05      	cmp	r3, #5
    481a:	d0f6      	beq.n	480a <get_ADC_value+0xe>
	return g_adc_sample_data;
    481c:	1dbb      	adds	r3, r7, #6
    481e:	881b      	ldrh	r3, [r3, #0]
}
    4820:	1c18      	adds	r0, r3, #0
    4822:	46bd      	mov	sp, r7
    4824:	b002      	add	sp, #8
    4826:	bd80      	pop	{r7, pc}
    4828:	20002f4c 	.word	0x20002f4c
    482c:	00003d51 	.word	0x00003d51
    4830:	00003d95 	.word	0x00003d95

00004834 <get_temperature>:
/**
* \brief Get temperature value from ADC
*
* \return the Celsius temperature
*/
int16_t get_temperature(void) {
    4834:	b580      	push	{r7, lr}
    4836:	b084      	sub	sp, #16
    4838:	af00      	add	r7, sp, #0

	uint8_t	i;
	long ADC_value;
	float Vadc=0.0;
    483a:	2300      	movs	r3, #0
    483c:	607b      	str	r3, [r7, #4]
	float degC=0.0;
    483e:	2300      	movs	r3, #0
    4840:	603b      	str	r3, [r7, #0]
	adc_enable(&adc_instance);
    4842:	4b36      	ldr	r3, [pc, #216]	; (491c <get_temperature+0xe8>)
    4844:	1c18      	adds	r0, r3, #0
    4846:	4b36      	ldr	r3, [pc, #216]	; (4920 <get_temperature+0xec>)
    4848:	4798      	blx	r3
	for(i=0; i<10; i++)get_ADC_value();
    484a:	230f      	movs	r3, #15
    484c:	18fb      	adds	r3, r7, r3
    484e:	2200      	movs	r2, #0
    4850:	701a      	strb	r2, [r3, #0]
    4852:	e008      	b.n	4866 <get_temperature+0x32>
    4854:	4b33      	ldr	r3, [pc, #204]	; (4924 <get_temperature+0xf0>)
    4856:	4798      	blx	r3
    4858:	230f      	movs	r3, #15
    485a:	18fb      	adds	r3, r7, r3
    485c:	781a      	ldrb	r2, [r3, #0]
    485e:	230f      	movs	r3, #15
    4860:	18fb      	adds	r3, r7, r3
    4862:	3201      	adds	r2, #1
    4864:	701a      	strb	r2, [r3, #0]
    4866:	230f      	movs	r3, #15
    4868:	18fb      	adds	r3, r7, r3
    486a:	781b      	ldrb	r3, [r3, #0]
    486c:	2b09      	cmp	r3, #9
    486e:	d9f1      	bls.n	4854 <get_temperature+0x20>
	ADC_value=0;
    4870:	2300      	movs	r3, #0
    4872:	60bb      	str	r3, [r7, #8]
	for(i=0; i<_ADCSampleCount; i++) {
    4874:	230f      	movs	r3, #15
    4876:	18fb      	adds	r3, r7, r3
    4878:	2200      	movs	r2, #0
    487a:	701a      	strb	r2, [r3, #0]
    487c:	e00d      	b.n	489a <get_temperature+0x66>
		ADC_value+=get_ADC_value();
    487e:	4b29      	ldr	r3, [pc, #164]	; (4924 <get_temperature+0xf0>)
    4880:	4798      	blx	r3
    4882:	1c03      	adds	r3, r0, #0
    4884:	1c1a      	adds	r2, r3, #0
    4886:	68bb      	ldr	r3, [r7, #8]
    4888:	189b      	adds	r3, r3, r2
    488a:	60bb      	str	r3, [r7, #8]
	float Vadc=0.0;
	float degC=0.0;
	adc_enable(&adc_instance);
	for(i=0; i<10; i++)get_ADC_value();
	ADC_value=0;
	for(i=0; i<_ADCSampleCount; i++) {
    488c:	230f      	movs	r3, #15
    488e:	18fb      	adds	r3, r7, r3
    4890:	781a      	ldrb	r2, [r3, #0]
    4892:	230f      	movs	r3, #15
    4894:	18fb      	adds	r3, r7, r3
    4896:	3201      	adds	r2, #1
    4898:	701a      	strb	r2, [r3, #0]
    489a:	230f      	movs	r3, #15
    489c:	18fb      	adds	r3, r7, r3
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	2b0f      	cmp	r3, #15
    48a2:	d9ec      	bls.n	487e <get_temperature+0x4a>
		ADC_value+=get_ADC_value();
	}
	ADC_value=ADC_value/_ADCSampleCount;
    48a4:	68bb      	ldr	r3, [r7, #8]
    48a6:	2b00      	cmp	r3, #0
    48a8:	da00      	bge.n	48ac <get_temperature+0x78>
    48aa:	330f      	adds	r3, #15
    48ac:	111b      	asrs	r3, r3, #4
    48ae:	60bb      	str	r3, [r7, #8]
	adc_disable(&adc_instance);
    48b0:	4b1a      	ldr	r3, [pc, #104]	; (491c <get_temperature+0xe8>)
    48b2:	1c18      	adds	r0, r3, #0
    48b4:	4b1c      	ldr	r3, [pc, #112]	; (4928 <get_temperature+0xf4>)
    48b6:	4798      	blx	r3
	Vadc=(_ADCRefVcc/_ADCres)*ADC_value*_TempeScaled;
    48b8:	4b1c      	ldr	r3, [pc, #112]	; (492c <get_temperature+0xf8>)
    48ba:	68b8      	ldr	r0, [r7, #8]
    48bc:	4798      	blx	r3
    48be:	1c02      	adds	r2, r0, #0
    48c0:	4b1b      	ldr	r3, [pc, #108]	; (4930 <get_temperature+0xfc>)
    48c2:	1c10      	adds	r0, r2, #0
    48c4:	491b      	ldr	r1, [pc, #108]	; (4934 <get_temperature+0x100>)
    48c6:	4798      	blx	r3
    48c8:	1c03      	adds	r3, r0, #0
    48ca:	1c1a      	adds	r2, r3, #0
    48cc:	4b18      	ldr	r3, [pc, #96]	; (4930 <get_temperature+0xfc>)
    48ce:	1c10      	adds	r0, r2, #0
    48d0:	4919      	ldr	r1, [pc, #100]	; (4938 <get_temperature+0x104>)
    48d2:	4798      	blx	r3
    48d4:	1c03      	adds	r3, r0, #0
    48d6:	607b      	str	r3, [r7, #4]
	degC=(100.0f+_DegCOffset)-(float)(((Vadc-1.199f)*1000.0f)/10.77f);
    48d8:	4b18      	ldr	r3, [pc, #96]	; (493c <get_temperature+0x108>)
    48da:	6878      	ldr	r0, [r7, #4]
    48dc:	4918      	ldr	r1, [pc, #96]	; (4940 <get_temperature+0x10c>)
    48de:	4798      	blx	r3
    48e0:	1c03      	adds	r3, r0, #0
    48e2:	1c1a      	adds	r2, r3, #0
    48e4:	4b12      	ldr	r3, [pc, #72]	; (4930 <get_temperature+0xfc>)
    48e6:	1c10      	adds	r0, r2, #0
    48e8:	4916      	ldr	r1, [pc, #88]	; (4944 <get_temperature+0x110>)
    48ea:	4798      	blx	r3
    48ec:	1c03      	adds	r3, r0, #0
    48ee:	1c1a      	adds	r2, r3, #0
    48f0:	4b15      	ldr	r3, [pc, #84]	; (4948 <get_temperature+0x114>)
    48f2:	1c10      	adds	r0, r2, #0
    48f4:	4915      	ldr	r1, [pc, #84]	; (494c <get_temperature+0x118>)
    48f6:	4798      	blx	r3
    48f8:	1c03      	adds	r3, r0, #0
    48fa:	1c1a      	adds	r2, r3, #0
    48fc:	4b0f      	ldr	r3, [pc, #60]	; (493c <get_temperature+0x108>)
    48fe:	4814      	ldr	r0, [pc, #80]	; (4950 <get_temperature+0x11c>)
    4900:	1c11      	adds	r1, r2, #0
    4902:	4798      	blx	r3
    4904:	1c03      	adds	r3, r0, #0
    4906:	603b      	str	r3, [r7, #0]
	return   (int16_t)degC;
    4908:	4b12      	ldr	r3, [pc, #72]	; (4954 <get_temperature+0x120>)
    490a:	6838      	ldr	r0, [r7, #0]
    490c:	4798      	blx	r3
    490e:	1c03      	adds	r3, r0, #0
    4910:	b29b      	uxth	r3, r3
    4912:	b21b      	sxth	r3, r3
}
    4914:	1c18      	adds	r0, r3, #0
    4916:	46bd      	mov	sp, r7
    4918:	b004      	add	sp, #16
    491a:	bd80      	pop	{r7, pc}
    491c:	20002f4c 	.word	0x20002f4c
    4920:	00003ca9 	.word	0x00003ca9
    4924:	000047fd 	.word	0x000047fd
    4928:	00003cfd 	.word	0x00003cfd
    492c:	00008181 	.word	0x00008181
    4930:	00007be1 	.word	0x00007be1
    4934:	39d33333 	.word	0x39d33333
    4938:	40200000 	.word	0x40200000
    493c:	00007e45 	.word	0x00007e45
    4940:	3f9978d5 	.word	0x3f9978d5
    4944:	447a0000 	.word	0x447a0000
    4948:	00007971 	.word	0x00007971
    494c:	412c51ec 	.word	0x412c51ec
    4950:	42ca0000 	.word	0x42ca0000
    4954:	00008141 	.word	0x00008141

00004958 <initialize_temperature>:

/**
* \brief Initialize the temperature sensor
*/
void initialize_temperature(void) {
    4958:	b580      	push	{r7, lr}
    495a:	b08c      	sub	sp, #48	; 0x30
    495c:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
    adc_get_config_defaults(&config_adc);
    495e:	1c3b      	adds	r3, r7, #0
    4960:	1c18      	adds	r0, r3, #0
    4962:	4b0e      	ldr	r3, [pc, #56]	; (499c <initialize_temperature+0x44>)
    4964:	4798      	blx	r3
    config_adc.gain_factor =ADC_GAIN_FACTOR_1X;
    4966:	1c3b      	adds	r3, r7, #0
    4968:	2200      	movs	r2, #0
    496a:	609a      	str	r2, [r3, #8]
    config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    496c:	1c3b      	adds	r3, r7, #0
    496e:	2280      	movs	r2, #128	; 0x80
    4970:	0092      	lsls	r2, r2, #2
    4972:	805a      	strh	r2, [r3, #2]
    config_adc.reference = ADC_REFERENCE_INTVCC1;
    4974:	1c3b      	adds	r3, r7, #0
    4976:	2202      	movs	r2, #2
    4978:	705a      	strb	r2, [r3, #1]
    config_adc.positive_input = Temperature_Sensor_ADC;
    497a:	1c3b      	adds	r3, r7, #0
    497c:	2212      	movs	r2, #18
    497e:	731a      	strb	r2, [r3, #12]
    config_adc.resolution = ADC_RESOLUTION_12BIT;
    4980:	1c3b      	adds	r3, r7, #0
    4982:	2200      	movs	r2, #0
    4984:	711a      	strb	r2, [r3, #4]
    adc_init(&adc_instance, ADC, &config_adc);
    4986:	4a06      	ldr	r2, [pc, #24]	; (49a0 <initialize_temperature+0x48>)
    4988:	4906      	ldr	r1, [pc, #24]	; (49a4 <initialize_temperature+0x4c>)
    498a:	1c3b      	adds	r3, r7, #0
    498c:	1c10      	adds	r0, r2, #0
    498e:	1c1a      	adds	r2, r3, #0
    4990:	4b05      	ldr	r3, [pc, #20]	; (49a8 <initialize_temperature+0x50>)
    4992:	4798      	blx	r3
}
    4994:	46bd      	mov	sp, r7
    4996:	b00c      	add	sp, #48	; 0x30
    4998:	bd80      	pop	{r7, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	00000219 	.word	0x00000219
    49a0:	20002f4c 	.word	0x20002f4c
    49a4:	42004000 	.word	0x42004000
    49a8:	00000855 	.word	0x00000855

000049ac <EPD_initialize_gpio>:

/**
* \brief Configure GPIO
*/
void EPD_initialize_gpio(void) {
    49ac:	b580      	push	{r7, lr}
    49ae:	af00      	add	r7, sp, #0
	 ioport_init();
    49b0:	4b17      	ldr	r3, [pc, #92]	; (4a10 <EPD_initialize_gpio+0x64>)
    49b2:	4798      	blx	r3
	config_gpio_dir_i( EPD_BUSY_PIN);
    49b4:	202e      	movs	r0, #46	; 0x2e
    49b6:	2100      	movs	r1, #0
    49b8:	4b16      	ldr	r3, [pc, #88]	; (4a14 <EPD_initialize_gpio+0x68>)
    49ba:	4798      	blx	r3
	config_gpio_dir_o( EPD_CS_PIN);
    49bc:	2011      	movs	r0, #17
    49be:	2101      	movs	r1, #1
    49c0:	4b14      	ldr	r3, [pc, #80]	; (4a14 <EPD_initialize_gpio+0x68>)
    49c2:	4798      	blx	r3
	config_gpio_dir_o( EPD_RST_PIN);
    49c4:	2015      	movs	r0, #21
    49c6:	2101      	movs	r1, #1
    49c8:	4b12      	ldr	r3, [pc, #72]	; (4a14 <EPD_initialize_gpio+0x68>)
    49ca:	4798      	blx	r3
	config_gpio_dir_o( EPD_PANELON_PIN);
    49cc:	202d      	movs	r0, #45	; 0x2d
    49ce:	2101      	movs	r1, #1
    49d0:	4b10      	ldr	r3, [pc, #64]	; (4a14 <EPD_initialize_gpio+0x68>)
    49d2:	4798      	blx	r3
	config_gpio_dir_o( EPD_DISCHARGE_PIN);
    49d4:	2014      	movs	r0, #20
    49d6:	2101      	movs	r1, #1
    49d8:	4b0e      	ldr	r3, [pc, #56]	; (4a14 <EPD_initialize_gpio+0x68>)
    49da:	4798      	blx	r3
	config_gpio_dir_o( EPD_BORDER_PIN);
    49dc:	200b      	movs	r0, #11
    49de:	2101      	movs	r1, #1
    49e0:	4b0c      	ldr	r3, [pc, #48]	; (4a14 <EPD_initialize_gpio+0x68>)
    49e2:	4798      	blx	r3
	config_gpio_dir_o( Flash_CS_PIN);
    49e4:	202f      	movs	r0, #47	; 0x2f
    49e6:	2101      	movs	r1, #1
    49e8:	4b0a      	ldr	r3, [pc, #40]	; (4a14 <EPD_initialize_gpio+0x68>)
    49ea:	4798      	blx	r3
	config_gpio_dir_o( PWM_PIN);
    49ec:	202c      	movs	r0, #44	; 0x2c
    49ee:	2101      	movs	r1, #1
    49f0:	4b08      	ldr	r3, [pc, #32]	; (4a14 <EPD_initialize_gpio+0x68>)
    49f2:	4798      	blx	r3
	config_gpio_dir_i( Temper_PIN);
    49f4:	200a      	movs	r0, #10
    49f6:	2100      	movs	r1, #0
    49f8:	4b06      	ldr	r3, [pc, #24]	; (4a14 <EPD_initialize_gpio+0x68>)
    49fa:	4798      	blx	r3
	EPD_flash_cs_high();
    49fc:	202f      	movs	r0, #47	; 0x2f
    49fe:	2101      	movs	r1, #1
    4a00:	4b05      	ldr	r3, [pc, #20]	; (4a18 <EPD_initialize_gpio+0x6c>)
    4a02:	4798      	blx	r3
	EPD_border_low();
    4a04:	200b      	movs	r0, #11
    4a06:	2100      	movs	r1, #0
    4a08:	4b03      	ldr	r3, [pc, #12]	; (4a18 <EPD_initialize_gpio+0x6c>)
    4a0a:	4798      	blx	r3
}
    4a0c:	46bd      	mov	sp, r7
    4a0e:	bd80      	pop	{r7, pc}
    4a10:	00004009 	.word	0x00004009
    4a14:	00004035 	.word	0x00004035
    4a18:	0000405d 	.word	0x0000405d

00004a1c <EPD_display_hardware_init>:

/**
* \brief Initialize the EPD hardware setting
*/
void EPD_display_hardware_init (void) {
    4a1c:	b580      	push	{r7, lr}
    4a1e:	af00      	add	r7, sp, #0
	
	EPD_initialize_gpio();	   
    4a20:	4b11      	ldr	r3, [pc, #68]	; (4a68 <EPD_display_hardware_init+0x4c>)
    4a22:	4798      	blx	r3
	EPD_Vcc_turn_off();		
    4a24:	202d      	movs	r0, #45	; 0x2d
    4a26:	2100      	movs	r1, #0
    4a28:	4b10      	ldr	r3, [pc, #64]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a2a:	4798      	blx	r3
	initialize_temperature();
    4a2c:	4b10      	ldr	r3, [pc, #64]	; (4a70 <EPD_display_hardware_init+0x54>)
    4a2e:	4798      	blx	r3
	EPD_cs_low();
    4a30:	2011      	movs	r0, #17
    4a32:	2100      	movs	r1, #0
    4a34:	4b0d      	ldr	r3, [pc, #52]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a36:	4798      	blx	r3
	EPD_pwm_low();
    4a38:	202c      	movs	r0, #44	; 0x2c
    4a3a:	2100      	movs	r1, #0
    4a3c:	4b0b      	ldr	r3, [pc, #44]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a3e:	4798      	blx	r3
	EPD_rst_low();
    4a40:	2015      	movs	r0, #21
    4a42:	2100      	movs	r1, #0
    4a44:	4b09      	ldr	r3, [pc, #36]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a46:	4798      	blx	r3
	EPD_discharge_low();
    4a48:	2014      	movs	r0, #20
    4a4a:	2100      	movs	r1, #0
    4a4c:	4b07      	ldr	r3, [pc, #28]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a4e:	4798      	blx	r3
	EPD_border_low();
    4a50:	200b      	movs	r0, #11
    4a52:	2100      	movs	r1, #0
    4a54:	4b05      	ldr	r3, [pc, #20]	; (4a6c <EPD_display_hardware_init+0x50>)
    4a56:	4798      	blx	r3
	//initialize_EPD_timer();
	epd_spi_attach();
    4a58:	4b06      	ldr	r3, [pc, #24]	; (4a74 <EPD_display_hardware_init+0x58>)
    4a5a:	4798      	blx	r3
	PWM_Run_Flag=false;
    4a5c:	4b06      	ldr	r3, [pc, #24]	; (4a78 <EPD_display_hardware_init+0x5c>)
    4a5e:	2200      	movs	r2, #0
    4a60:	701a      	strb	r2, [r3, #0]
    4a62:	46bd      	mov	sp, r7
    4a64:	bd80      	pop	{r7, pc}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	000049ad 	.word	0x000049ad
    4a6c:	0000405d 	.word	0x0000405d
    4a70:	00004959 	.word	0x00004959
    4a74:	00004555 	.word	0x00004555
    4a78:	20002f6c 	.word	0x20002f6c

00004a7c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	1c02      	adds	r2, r0, #0
    4a84:	1dfb      	adds	r3, r7, #7
    4a86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4a88:	230f      	movs	r3, #15
    4a8a:	18fb      	adds	r3, r7, r3
    4a8c:	1dfa      	adds	r2, r7, #7
    4a8e:	7812      	ldrb	r2, [r2, #0]
    4a90:	09d2      	lsrs	r2, r2, #7
    4a92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4a94:	230e      	movs	r3, #14
    4a96:	18fb      	adds	r3, r7, r3
    4a98:	1dfa      	adds	r2, r7, #7
    4a9a:	7812      	ldrb	r2, [r2, #0]
    4a9c:	0952      	lsrs	r2, r2, #5
    4a9e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4aa0:	4b0d      	ldr	r3, [pc, #52]	; (4ad8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aa2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4aa4:	230f      	movs	r3, #15
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	781b      	ldrb	r3, [r3, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d10f      	bne.n	4ace <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4aae:	230f      	movs	r3, #15
    4ab0:	18fb      	adds	r3, r7, r3
    4ab2:	781b      	ldrb	r3, [r3, #0]
    4ab4:	009b      	lsls	r3, r3, #2
    4ab6:	2210      	movs	r2, #16
    4ab8:	4694      	mov	ip, r2
    4aba:	44bc      	add	ip, r7
    4abc:	4463      	add	r3, ip
    4abe:	3b08      	subs	r3, #8
    4ac0:	681a      	ldr	r2, [r3, #0]
    4ac2:	230e      	movs	r3, #14
    4ac4:	18fb      	adds	r3, r7, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	01db      	lsls	r3, r3, #7
    4aca:	18d3      	adds	r3, r2, r3
    4acc:	e000      	b.n	4ad0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4ace:	2300      	movs	r3, #0
	}
}
    4ad0:	1c18      	adds	r0, r3, #0
    4ad2:	46bd      	mov	sp, r7
    4ad4:	b004      	add	sp, #16
    4ad6:	bd80      	pop	{r7, pc}
    4ad8:	41004400 	.word	0x41004400

00004adc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4adc:	b580      	push	{r7, lr}
    4ade:	b082      	sub	sp, #8
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	1c02      	adds	r2, r0, #0
    4ae4:	1dfb      	adds	r3, r7, #7
    4ae6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4ae8:	1dfb      	adds	r3, r7, #7
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	1c18      	adds	r0, r3, #0
    4aee:	4b03      	ldr	r3, [pc, #12]	; (4afc <port_get_group_from_gpio_pin+0x20>)
    4af0:	4798      	blx	r3
    4af2:	1c03      	adds	r3, r0, #0
}
    4af4:	1c18      	adds	r0, r3, #0
    4af6:	46bd      	mov	sp, r7
    4af8:	b002      	add	sp, #8
    4afa:	bd80      	pop	{r7, pc}
    4afc:	00004a7d 	.word	0x00004a7d

00004b00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b084      	sub	sp, #16
    4b04:	af00      	add	r7, sp, #0
    4b06:	1c02      	adds	r2, r0, #0
    4b08:	1dfb      	adds	r3, r7, #7
    4b0a:	701a      	strb	r2, [r3, #0]
    4b0c:	1dbb      	adds	r3, r7, #6
    4b0e:	1c0a      	adds	r2, r1, #0
    4b10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b12:	1dfb      	adds	r3, r7, #7
    4b14:	781b      	ldrb	r3, [r3, #0]
    4b16:	1c18      	adds	r0, r3, #0
    4b18:	4b0c      	ldr	r3, [pc, #48]	; (4b4c <port_pin_set_output_level+0x4c>)
    4b1a:	4798      	blx	r3
    4b1c:	1c03      	adds	r3, r0, #0
    4b1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b20:	1dfb      	adds	r3, r7, #7
    4b22:	781b      	ldrb	r3, [r3, #0]
    4b24:	221f      	movs	r2, #31
    4b26:	4013      	ands	r3, r2
    4b28:	2201      	movs	r2, #1
    4b2a:	409a      	lsls	r2, r3
    4b2c:	1c13      	adds	r3, r2, #0
    4b2e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4b30:	1dbb      	adds	r3, r7, #6
    4b32:	781b      	ldrb	r3, [r3, #0]
    4b34:	2b00      	cmp	r3, #0
    4b36:	d003      	beq.n	4b40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4b38:	68fb      	ldr	r3, [r7, #12]
    4b3a:	68ba      	ldr	r2, [r7, #8]
    4b3c:	619a      	str	r2, [r3, #24]
    4b3e:	e002      	b.n	4b46 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	68ba      	ldr	r2, [r7, #8]
    4b44:	615a      	str	r2, [r3, #20]
	}
}
    4b46:	46bd      	mov	sp, r7
    4b48:	b004      	add	sp, #16
    4b4a:	bd80      	pop	{r7, pc}
    4b4c:	00004add 	.word	0x00004add

00004b50 <EPD_display_init>:
#include  "EPD_interface.h"

/**
 * \brief Initialize the EPD hardware setting 
 */
void EPD_display_init(void) {
    4b50:	b580      	push	{r7, lr}
    4b52:	af00      	add	r7, sp, #0
	EPD_display_hardware_init();
    4b54:	4b01      	ldr	r3, [pc, #4]	; (4b5c <EPD_display_init+0xc>)
    4b56:	4798      	blx	r3
}
    4b58:	46bd      	mov	sp, r7
    4b5a:	bd80      	pop	{r7, pc}
    4b5c:	00004a1d 	.word	0x00004a1d

00004b60 <EPD_display_from_pointer>:
 * \param EPD_type_index The defined EPD size
 * \param previous_image_ptr The pointer of memory that stores previous image
 * \param new_image_ptr The pointer of memory that stores new image
 */
void EPD_display_from_pointer(uint8_t EPD_type_index,uint8_t *previous_image_ptr,
	uint8_t *new_image_ptr) {
    4b60:	b580      	push	{r7, lr}
    4b62:	b086      	sub	sp, #24
    4b64:	af00      	add	r7, sp, #0
    4b66:	60b9      	str	r1, [r7, #8]
    4b68:	607a      	str	r2, [r7, #4]
    4b6a:	230f      	movs	r3, #15
    4b6c:	18fb      	adds	r3, r7, r3
    4b6e:	1c02      	adds	r2, r0, #0
    4b70:	701a      	strb	r2, [r3, #0]
	int8_t temperature=get_temperature();// Sense temperature
    4b72:	4b1a      	ldr	r3, [pc, #104]	; (4bdc <EPD_display_from_pointer+0x7c>)
    4b74:	4798      	blx	r3
    4b76:	1c03      	adds	r3, r0, #0
    4b78:	1c1a      	adds	r2, r3, #0
    4b7a:	2317      	movs	r3, #23
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	701a      	strb	r2, [r3, #0]
	
	/* Power on COG Driver */
	EPD_power_on(EPD_type_index,temperature);
    4b80:	230f      	movs	r3, #15
    4b82:	18fb      	adds	r3, r7, r3
    4b84:	781a      	ldrb	r2, [r3, #0]
    4b86:	2317      	movs	r3, #23
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	b25b      	sxtb	r3, r3
    4b8e:	1c10      	adds	r0, r2, #0
    4b90:	1c19      	adds	r1, r3, #0
    4b92:	4b13      	ldr	r3, [pc, #76]	; (4be0 <EPD_display_from_pointer+0x80>)
    4b94:	4798      	blx	r3

	
	/* Initialize COG Driver */
	if(EPD_initialize_driver() == (uint8_t)(0xF4)){
    4b96:	4b13      	ldr	r3, [pc, #76]	; (4be4 <EPD_display_from_pointer+0x84>)
    4b98:	4798      	blx	r3
    4b9a:	1e03      	subs	r3, r0, #0
    4b9c:	2bf4      	cmp	r3, #244	; 0xf4
    4b9e:	d111      	bne.n	4bc4 <EPD_display_from_pointer+0x64>
		port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
    4ba0:	203e      	movs	r0, #62	; 0x3e
    4ba2:	2100      	movs	r1, #0
    4ba4:	4b10      	ldr	r3, [pc, #64]	; (4be8 <EPD_display_from_pointer+0x88>)
    4ba6:	4798      	blx	r3
		delay_ms(500);
    4ba8:	23fa      	movs	r3, #250	; 0xfa
    4baa:	005b      	lsls	r3, r3, #1
    4bac:	1c18      	adds	r0, r3, #0
    4bae:	4b0f      	ldr	r3, [pc, #60]	; (4bec <EPD_display_from_pointer+0x8c>)
    4bb0:	4798      	blx	r3
		port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
    4bb2:	203e      	movs	r0, #62	; 0x3e
    4bb4:	2101      	movs	r1, #1
    4bb6:	4b0c      	ldr	r3, [pc, #48]	; (4be8 <EPD_display_from_pointer+0x88>)
    4bb8:	4798      	blx	r3
		delay_ms(500);
    4bba:	23fa      	movs	r3, #250	; 0xfa
    4bbc:	005b      	lsls	r3, r3, #1
    4bbe:	1c18      	adds	r0, r3, #0
    4bc0:	4b0a      	ldr	r3, [pc, #40]	; (4bec <EPD_display_from_pointer+0x8c>)
    4bc2:	4798      	blx	r3
	}
	
	/* Display image data on EPD from image array */
	EPD_display_from_array_prt(previous_image_ptr,new_image_ptr);
    4bc4:	68ba      	ldr	r2, [r7, #8]
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	1c10      	adds	r0, r2, #0
    4bca:	1c19      	adds	r1, r3, #0
    4bcc:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <EPD_display_from_pointer+0x90>)
    4bce:	4798      	blx	r3
	
	/* Power off COG Driver */
	EPD_power_off ();
    4bd0:	4b08      	ldr	r3, [pc, #32]	; (4bf4 <EPD_display_from_pointer+0x94>)
    4bd2:	4798      	blx	r3
}
    4bd4:	46bd      	mov	sp, r7
    4bd6:	b006      	add	sp, #24
    4bd8:	bd80      	pop	{r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	00004835 	.word	0x00004835
    4be0:	000027c5 	.word	0x000027c5
    4be4:	0000284d 	.word	0x0000284d
    4be8:	00004b01 	.word	0x00004b01
    4bec:	0000619d 	.word	0x0000619d
    4bf0:	000035bd 	.word	0x000035bd
    4bf4:	00003a5d 	.word	0x00003a5d

00004bf8 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    4bf8:	b580      	push	{r7, lr}
    4bfa:	b082      	sub	sp, #8
    4bfc:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4bfe:	4bbb      	ldr	r3, [pc, #748]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4c00:	681b      	ldr	r3, [r3, #0]
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	8c1b      	ldrh	r3, [r3, #32]
    4c06:	b29b      	uxth	r3, r3
    4c08:	1c1a      	adds	r2, r3, #0
    4c0a:	4bb9      	ldr	r3, [pc, #740]	; (4ef0 <_usb_host_interrupt_handler+0x2f8>)
    4c0c:	1c10      	adds	r0, r2, #0
    4c0e:	4798      	blx	r3
    4c10:	1c03      	adds	r3, r0, #0
    4c12:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	2b1f      	cmp	r3, #31
    4c18:	d900      	bls.n	4c1c <_usb_host_interrupt_handler+0x24>
    4c1a:	e173      	b.n	4f04 <_usb_host_interrupt_handler+0x30c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4c1c:	4bb3      	ldr	r3, [pc, #716]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	681a      	ldr	r2, [r3, #0]
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	3308      	adds	r3, #8
    4c26:	015b      	lsls	r3, r3, #5
    4c28:	18d3      	adds	r3, r2, r3
    4c2a:	79db      	ldrb	r3, [r3, #7]
    4c2c:	b2db      	uxtb	r3, r3
    4c2e:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4c30:	683b      	ldr	r3, [r7, #0]
    4c32:	2203      	movs	r2, #3
    4c34:	4013      	ands	r3, r2
    4c36:	d100      	bne.n	4c3a <_usb_host_interrupt_handler+0x42>
    4c38:	e089      	b.n	4d4e <_usb_host_interrupt_handler+0x156>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4c3a:	687b      	ldr	r3, [r7, #4]
    4c3c:	2201      	movs	r2, #1
    4c3e:	409a      	lsls	r2, r3
    4c40:	1c13      	adds	r3, r2, #0
    4c42:	43db      	mvns	r3, r3
    4c44:	1c1a      	adds	r2, r3, #0
    4c46:	4bab      	ldr	r3, [pc, #684]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	401a      	ands	r2, r3
    4c4c:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4c4e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4c50:	4ba6      	ldr	r3, [pc, #664]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	681a      	ldr	r2, [r3, #0]
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	3308      	adds	r3, #8
    4c5a:	015b      	lsls	r3, r3, #5
    4c5c:	18d3      	adds	r3, r2, r3
    4c5e:	2203      	movs	r2, #3
    4c60:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4c62:	4ba2      	ldr	r3, [pc, #648]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4c64:	681a      	ldr	r2, [r3, #0]
    4c66:	21a8      	movs	r1, #168	; 0xa8
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	18d3      	adds	r3, r2, r3
    4c6c:	185b      	adds	r3, r3, r1
    4c6e:	799b      	ldrb	r3, [r3, #6]
    4c70:	1c1a      	adds	r2, r3, #0
    4c72:	2301      	movs	r3, #1
    4c74:	4013      	ands	r3, r2
    4c76:	d06a      	beq.n	4d4e <_usb_host_interrupt_handler+0x156>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    4c78:	687b      	ldr	r3, [r7, #4]
    4c7a:	b2da      	uxtb	r2, r3
    4c7c:	4b9e      	ldr	r3, [pc, #632]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4c7e:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4c80:	4b9a      	ldr	r3, [pc, #616]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4c82:	681b      	ldr	r3, [r3, #0]
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	687a      	ldr	r2, [r7, #4]
    4c88:	3208      	adds	r2, #8
    4c8a:	0152      	lsls	r2, r2, #5
    4c8c:	5cd3      	ldrb	r3, [r2, r3]
    4c8e:	2203      	movs	r2, #3
    4c90:	4013      	ands	r3, r2
    4c92:	b2db      	uxtb	r3, r3
    4c94:	2b01      	cmp	r3, #1
    4c96:	d11f      	bne.n	4cd8 <_usb_host_interrupt_handler+0xe0>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4c98:	4a98      	ldr	r2, [pc, #608]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	015b      	lsls	r3, r3, #5
    4c9e:	18d3      	adds	r3, r2, r3
    4ca0:	685b      	ldr	r3, [r3, #4]
    4ca2:	049b      	lsls	r3, r3, #18
    4ca4:	0c9b      	lsrs	r3, r3, #18
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	1c1a      	adds	r2, r3, #0
    4caa:	4b93      	ldr	r3, [pc, #588]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4cac:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4cae:	4a93      	ldr	r2, [pc, #588]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4cb0:	687b      	ldr	r3, [r7, #4]
    4cb2:	015b      	lsls	r3, r3, #5
    4cb4:	18d3      	adds	r3, r2, r3
    4cb6:	685b      	ldr	r3, [r3, #4]
    4cb8:	0b9b      	lsrs	r3, r3, #14
    4cba:	049b      	lsls	r3, r3, #18
    4cbc:	0c9b      	lsrs	r3, r3, #18
    4cbe:	b29b      	uxth	r3, r3
    4cc0:	1c1a      	adds	r2, r3, #0
    4cc2:	4b8d      	ldr	r3, [pc, #564]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4cc4:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4cc6:	4a8d      	ldr	r2, [pc, #564]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	015b      	lsls	r3, r3, #5
    4ccc:	18d3      	adds	r3, r2, r3
    4cce:	685a      	ldr	r2, [r3, #4]
    4cd0:	0b92      	lsrs	r2, r2, #14
    4cd2:	0392      	lsls	r2, r2, #14
    4cd4:	605a      	str	r2, [r3, #4]
    4cd6:	e02d      	b.n	4d34 <_usb_host_interrupt_handler+0x13c>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4cd8:	4a88      	ldr	r2, [pc, #544]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	015b      	lsls	r3, r3, #5
    4cde:	18d3      	adds	r3, r2, r3
    4ce0:	685b      	ldr	r3, [r3, #4]
    4ce2:	0b9b      	lsrs	r3, r3, #14
    4ce4:	049b      	lsls	r3, r3, #18
    4ce6:	0c9b      	lsrs	r3, r3, #18
    4ce8:	b29b      	uxth	r3, r3
    4cea:	1c1a      	adds	r2, r3, #0
    4cec:	4b82      	ldr	r3, [pc, #520]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4cee:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4cf0:	4a82      	ldr	r2, [pc, #520]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	015b      	lsls	r3, r3, #5
    4cf6:	18d3      	adds	r3, r2, r3
    4cf8:	685b      	ldr	r3, [r3, #4]
    4cfa:	049b      	lsls	r3, r3, #18
    4cfc:	0c9b      	lsrs	r3, r3, #18
    4cfe:	b29b      	uxth	r3, r3
    4d00:	1c1a      	adds	r2, r3, #0
    4d02:	4b7d      	ldr	r3, [pc, #500]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4d04:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4d06:	4a7d      	ldr	r2, [pc, #500]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	015b      	lsls	r3, r3, #5
    4d0c:	18d3      	adds	r3, r2, r3
    4d0e:	685a      	ldr	r2, [r3, #4]
    4d10:	497b      	ldr	r1, [pc, #492]	; (4f00 <_usb_host_interrupt_handler+0x308>)
    4d12:	400a      	ands	r2, r1
    4d14:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4d16:	4b78      	ldr	r3, [pc, #480]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4d18:	885b      	ldrh	r3, [r3, #2]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d10a      	bne.n	4d34 <_usb_host_interrupt_handler+0x13c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4d1e:	4a77      	ldr	r2, [pc, #476]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	015b      	lsls	r3, r3, #5
    4d24:	18d3      	adds	r3, r2, r3
    4d26:	685b      	ldr	r3, [r3, #4]
    4d28:	049b      	lsls	r3, r3, #18
    4d2a:	0c9b      	lsrs	r3, r3, #18
    4d2c:	b29b      	uxth	r3, r3
    4d2e:	1c1a      	adds	r2, r3, #0
    4d30:	4b71      	ldr	r3, [pc, #452]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4d32:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    4d34:	4b6d      	ldr	r3, [pc, #436]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4d36:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	3302      	adds	r3, #2
    4d3c:	011b      	lsls	r3, r3, #4
    4d3e:	18d3      	adds	r3, r2, r3
    4d40:	685a      	ldr	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    4d42:	4b6a      	ldr	r3, [pc, #424]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4d44:	6819      	ldr	r1, [r3, #0]
    4d46:	4b6c      	ldr	r3, [pc, #432]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4d48:	1c08      	adds	r0, r1, #0
    4d4a:	1c19      	adds	r1, r3, #0
    4d4c:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    4d4e:	683b      	ldr	r3, [r7, #0]
    4d50:	2204      	movs	r2, #4
    4d52:	4013      	ands	r3, r2
    4d54:	d013      	beq.n	4d7e <_usb_host_interrupt_handler+0x186>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	2201      	movs	r2, #1
    4d5a:	409a      	lsls	r2, r3
    4d5c:	1c13      	adds	r3, r2, #0
    4d5e:	43db      	mvns	r3, r3
    4d60:	1c1a      	adds	r2, r3, #0
    4d62:	4b64      	ldr	r3, [pc, #400]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4d64:	681b      	ldr	r3, [r3, #0]
    4d66:	401a      	ands	r2, r3
    4d68:	4b62      	ldr	r3, [pc, #392]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4d6a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4d6c:	4b5f      	ldr	r3, [pc, #380]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4d6e:	681b      	ldr	r3, [r3, #0]
    4d70:	681a      	ldr	r2, [r3, #0]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	3308      	adds	r3, #8
    4d76:	015b      	lsls	r3, r3, #5
    4d78:	18d3      	adds	r3, r2, r3
    4d7a:	2204      	movs	r2, #4
    4d7c:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4d7e:	683b      	ldr	r3, [r7, #0]
    4d80:	2208      	movs	r2, #8
    4d82:	4013      	ands	r3, r2
    4d84:	d03c      	beq.n	4e00 <_usb_host_interrupt_handler+0x208>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	2201      	movs	r2, #1
    4d8a:	409a      	lsls	r2, r3
    4d8c:	1c13      	adds	r3, r2, #0
    4d8e:	43db      	mvns	r3, r3
    4d90:	1c1a      	adds	r2, r3, #0
    4d92:	4b58      	ldr	r3, [pc, #352]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	401a      	ands	r2, r3
    4d98:	4b56      	ldr	r3, [pc, #344]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4d9a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4d9c:	4b53      	ldr	r3, [pc, #332]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	681a      	ldr	r2, [r3, #0]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	3308      	adds	r3, #8
    4da6:	015b      	lsls	r3, r3, #5
    4da8:	18d3      	adds	r3, r2, r3
    4daa:	2208      	movs	r2, #8
    4dac:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4dae:	4b4f      	ldr	r3, [pc, #316]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4db0:	681a      	ldr	r2, [r3, #0]
    4db2:	21a8      	movs	r1, #168	; 0xa8
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	18d3      	adds	r3, r2, r3
    4db8:	185b      	adds	r3, r3, r1
    4dba:	799b      	ldrb	r3, [r3, #6]
    4dbc:	1c1a      	adds	r2, r3, #0
    4dbe:	2302      	movs	r3, #2
    4dc0:	4013      	ands	r3, r2
    4dc2:	d01d      	beq.n	4e00 <_usb_host_interrupt_handler+0x208>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	b2da      	uxtb	r2, r3
    4dc8:	4b4b      	ldr	r3, [pc, #300]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4dca:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4dcc:	4a4b      	ldr	r2, [pc, #300]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	015b      	lsls	r3, r3, #5
    4dd2:	18d3      	adds	r3, r2, r3
    4dd4:	3308      	adds	r3, #8
    4dd6:	88db      	ldrh	r3, [r3, #6]
    4dd8:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    4dda:	b2db      	uxtb	r3, r3
    4ddc:	221f      	movs	r2, #31
    4dde:	4013      	ands	r3, r2
    4de0:	b2da      	uxtb	r2, r3
    4de2:	4b45      	ldr	r3, [pc, #276]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4de4:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    4de6:	4b41      	ldr	r3, [pc, #260]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4de8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	011b      	lsls	r3, r3, #4
    4dee:	18d3      	adds	r3, r2, r3
    4df0:	3324      	adds	r3, #36	; 0x24
    4df2:	685a      	ldr	r2, [r3, #4]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    4df4:	4b3d      	ldr	r3, [pc, #244]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4df6:	6819      	ldr	r1, [r3, #0]
    4df8:	4b3f      	ldr	r3, [pc, #252]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4dfa:	1c08      	adds	r0, r1, #0
    4dfc:	1c19      	adds	r1, r3, #0
    4dfe:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	2210      	movs	r2, #16
    4e04:	4013      	ands	r3, r2
    4e06:	d03a      	beq.n	4e7e <_usb_host_interrupt_handler+0x286>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	2201      	movs	r2, #1
    4e0c:	409a      	lsls	r2, r3
    4e0e:	1c13      	adds	r3, r2, #0
    4e10:	43db      	mvns	r3, r3
    4e12:	1c1a      	adds	r2, r3, #0
    4e14:	4b37      	ldr	r3, [pc, #220]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	401a      	ands	r2, r3
    4e1a:	4b36      	ldr	r3, [pc, #216]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4e1c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4e1e:	4b33      	ldr	r3, [pc, #204]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	681a      	ldr	r2, [r3, #0]
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	3308      	adds	r3, #8
    4e28:	015b      	lsls	r3, r3, #5
    4e2a:	18d3      	adds	r3, r2, r3
    4e2c:	2210      	movs	r2, #16
    4e2e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4e30:	4b2e      	ldr	r3, [pc, #184]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4e32:	681a      	ldr	r2, [r3, #0]
    4e34:	21a8      	movs	r1, #168	; 0xa8
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	18d3      	adds	r3, r2, r3
    4e3a:	185b      	adds	r3, r3, r1
    4e3c:	799b      	ldrb	r3, [r3, #6]
    4e3e:	1c1a      	adds	r2, r3, #0
    4e40:	2304      	movs	r3, #4
    4e42:	4013      	ands	r3, r2
    4e44:	d01b      	beq.n	4e7e <_usb_host_interrupt_handler+0x286>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	b2da      	uxtb	r2, r3
    4e4a:	4b2b      	ldr	r3, [pc, #172]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4e4c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4e4e:	4a2b      	ldr	r2, [pc, #172]	; (4efc <_usb_host_interrupt_handler+0x304>)
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	015b      	lsls	r3, r3, #5
    4e54:	18d3      	adds	r3, r2, r3
    4e56:	685b      	ldr	r3, [r3, #4]
    4e58:	0b9b      	lsrs	r3, r3, #14
    4e5a:	049b      	lsls	r3, r3, #18
    4e5c:	0c9b      	lsrs	r3, r3, #18
    4e5e:	b29b      	uxth	r3, r3
    4e60:	1c1a      	adds	r2, r3, #0
    4e62:	4b25      	ldr	r3, [pc, #148]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4e64:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    4e66:	4b21      	ldr	r3, [pc, #132]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4e68:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	011b      	lsls	r3, r3, #4
    4e6e:	18d3      	adds	r3, r2, r3
    4e70:	3328      	adds	r3, #40	; 0x28
    4e72:	685a      	ldr	r2, [r3, #4]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    4e74:	4b1d      	ldr	r3, [pc, #116]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4e76:	681b      	ldr	r3, [r3, #0]
    4e78:	1c18      	adds	r0, r3, #0
    4e7a:	2100      	movs	r1, #0
    4e7c:	4790      	blx	r2
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	2220      	movs	r2, #32
    4e82:	4013      	ands	r3, r2
    4e84:	d100      	bne.n	4e88 <_usb_host_interrupt_handler+0x290>
    4e86:	e113      	b.n	50b0 <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	2201      	movs	r2, #1
    4e8c:	409a      	lsls	r2, r3
    4e8e:	1c13      	adds	r3, r2, #0
    4e90:	43db      	mvns	r3, r3
    4e92:	1c1a      	adds	r2, r3, #0
    4e94:	4b17      	ldr	r3, [pc, #92]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4e96:	681b      	ldr	r3, [r3, #0]
    4e98:	401a      	ands	r2, r3
    4e9a:	4b16      	ldr	r3, [pc, #88]	; (4ef4 <_usb_host_interrupt_handler+0x2fc>)
    4e9c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4e9e:	4b13      	ldr	r3, [pc, #76]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4ea0:	681b      	ldr	r3, [r3, #0]
    4ea2:	681a      	ldr	r2, [r3, #0]
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	3308      	adds	r3, #8
    4ea8:	015b      	lsls	r3, r3, #5
    4eaa:	18d3      	adds	r3, r2, r3
    4eac:	2220      	movs	r2, #32
    4eae:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4eb0:	4b0e      	ldr	r3, [pc, #56]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4eb2:	681a      	ldr	r2, [r3, #0]
    4eb4:	21a8      	movs	r1, #168	; 0xa8
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	18d3      	adds	r3, r2, r3
    4eba:	185b      	adds	r3, r3, r1
    4ebc:	799b      	ldrb	r3, [r3, #6]
    4ebe:	1c1a      	adds	r2, r3, #0
    4ec0:	2308      	movs	r3, #8
    4ec2:	4013      	ands	r3, r2
    4ec4:	d100      	bne.n	4ec8 <_usb_host_interrupt_handler+0x2d0>
    4ec6:	e0f3      	b.n	50b0 <_usb_host_interrupt_handler+0x4b8>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	b2da      	uxtb	r2, r3
    4ecc:	4b0a      	ldr	r3, [pc, #40]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4ece:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    4ed0:	4b06      	ldr	r3, [pc, #24]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4ed2:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	011b      	lsls	r3, r3, #4
    4ed8:	18d3      	adds	r3, r2, r3
    4eda:	332c      	adds	r3, #44	; 0x2c
    4edc:	685a      	ldr	r2, [r3, #4]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    4ede:	4b03      	ldr	r3, [pc, #12]	; (4eec <_usb_host_interrupt_handler+0x2f4>)
    4ee0:	6819      	ldr	r1, [r3, #0]
    4ee2:	4b05      	ldr	r3, [pc, #20]	; (4ef8 <_usb_host_interrupt_handler+0x300>)
    4ee4:	1c08      	adds	r0, r1, #0
    4ee6:	1c19      	adds	r1, r3, #0
    4ee8:	4790      	blx	r2
    4eea:	e0e1      	b.n	50b0 <_usb_host_interrupt_handler+0x4b8>
    4eec:	20000130 	.word	0x20000130
    4ef0:	00007931 	.word	0x00007931
    4ef4:	20000148 	.word	0x20000148
    4ef8:	20000134 	.word	0x20000134
    4efc:	20002f70 	.word	0x20002f70
    4f00:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4f04:	4b6c      	ldr	r3, [pc, #432]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	8b9b      	ldrh	r3, [r3, #28]
    4f0c:	b29b      	uxth	r3, r3
    4f0e:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4f10:	683b      	ldr	r3, [r7, #0]
    4f12:	2204      	movs	r2, #4
    4f14:	4013      	ands	r3, r2
    4f16:	d013      	beq.n	4f40 <_usb_host_interrupt_handler+0x348>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4f18:	4b67      	ldr	r3, [pc, #412]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f1a:	681b      	ldr	r3, [r3, #0]
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	2204      	movs	r2, #4
    4f20:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4f22:	4b65      	ldr	r3, [pc, #404]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	22a5      	movs	r2, #165	; 0xa5
    4f28:	5c9b      	ldrb	r3, [r3, r2]
    4f2a:	1c1a      	adds	r2, r3, #0
    4f2c:	2301      	movs	r3, #1
    4f2e:	4013      	ands	r3, r2
    4f30:	d006      	beq.n	4f40 <_usb_host_interrupt_handler+0x348>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4f32:	4b61      	ldr	r3, [pc, #388]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f34:	681b      	ldr	r3, [r3, #0]
    4f36:	685a      	ldr	r2, [r3, #4]
    4f38:	4b5f      	ldr	r3, [pc, #380]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	1c18      	adds	r0, r3, #0
    4f3e:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    4f40:	683b      	ldr	r3, [r7, #0]
    4f42:	2208      	movs	r2, #8
    4f44:	4013      	ands	r3, r2
    4f46:	d016      	beq.n	4f76 <_usb_host_interrupt_handler+0x37e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4f48:	4b5c      	ldr	r3, [pc, #368]	; (50bc <_usb_host_interrupt_handler+0x4c4>)
    4f4a:	2200      	movs	r2, #0
    4f4c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4f4e:	4b5a      	ldr	r3, [pc, #360]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	2208      	movs	r2, #8
    4f56:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4f58:	4b57      	ldr	r3, [pc, #348]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f5a:	681b      	ldr	r3, [r3, #0]
    4f5c:	22a5      	movs	r2, #165	; 0xa5
    4f5e:	5c9b      	ldrb	r3, [r3, r2]
    4f60:	1c1a      	adds	r2, r3, #0
    4f62:	2302      	movs	r3, #2
    4f64:	4013      	ands	r3, r2
    4f66:	d006      	beq.n	4f76 <_usb_host_interrupt_handler+0x37e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4f68:	4b53      	ldr	r3, [pc, #332]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	689a      	ldr	r2, [r3, #8]
    4f6e:	4b52      	ldr	r3, [pc, #328]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f70:	681b      	ldr	r3, [r3, #0]
    4f72:	1c18      	adds	r0, r3, #0
    4f74:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4f76:	683b      	ldr	r3, [r7, #0]
    4f78:	2240      	movs	r2, #64	; 0x40
    4f7a:	4013      	ands	r3, r2
    4f7c:	d013      	beq.n	4fa6 <_usb_host_interrupt_handler+0x3ae>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4f7e:	4b4e      	ldr	r3, [pc, #312]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	681b      	ldr	r3, [r3, #0]
    4f84:	2240      	movs	r2, #64	; 0x40
    4f86:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4f88:	4b4b      	ldr	r3, [pc, #300]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	22a5      	movs	r2, #165	; 0xa5
    4f8e:	5c9b      	ldrb	r3, [r3, r2]
    4f90:	1c1a      	adds	r2, r3, #0
    4f92:	2310      	movs	r3, #16
    4f94:	4013      	ands	r3, r2
    4f96:	d006      	beq.n	4fa6 <_usb_host_interrupt_handler+0x3ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4f98:	4b47      	ldr	r3, [pc, #284]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4f9a:	681b      	ldr	r3, [r3, #0]
    4f9c:	695a      	ldr	r2, [r3, #20]
    4f9e:	4b46      	ldr	r3, [pc, #280]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	1c18      	adds	r0, r3, #0
    4fa4:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4fa6:	683b      	ldr	r3, [r7, #0]
    4fa8:	2220      	movs	r2, #32
    4faa:	4013      	ands	r3, r2
    4fac:	d013      	beq.n	4fd6 <_usb_host_interrupt_handler+0x3de>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4fae:	4b42      	ldr	r3, [pc, #264]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	681b      	ldr	r3, [r3, #0]
    4fb4:	2220      	movs	r2, #32
    4fb6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4fb8:	4b3f      	ldr	r3, [pc, #252]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fba:	681b      	ldr	r3, [r3, #0]
    4fbc:	22a5      	movs	r2, #165	; 0xa5
    4fbe:	5c9b      	ldrb	r3, [r3, r2]
    4fc0:	1c1a      	adds	r2, r3, #0
    4fc2:	2308      	movs	r3, #8
    4fc4:	4013      	ands	r3, r2
    4fc6:	d006      	beq.n	4fd6 <_usb_host_interrupt_handler+0x3de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4fc8:	4b3b      	ldr	r3, [pc, #236]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	691a      	ldr	r2, [r3, #16]
    4fce:	4b3a      	ldr	r3, [pc, #232]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	1c18      	adds	r0, r3, #0
    4fd4:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4fd6:	683b      	ldr	r3, [r7, #0]
    4fd8:	2210      	movs	r2, #16
    4fda:	4013      	ands	r3, r2
    4fdc:	d013      	beq.n	5006 <_usb_host_interrupt_handler+0x40e>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4fde:	4b36      	ldr	r3, [pc, #216]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fe0:	681b      	ldr	r3, [r3, #0]
    4fe2:	681b      	ldr	r3, [r3, #0]
    4fe4:	2210      	movs	r2, #16
    4fe6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4fe8:	4b33      	ldr	r3, [pc, #204]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4fea:	681b      	ldr	r3, [r3, #0]
    4fec:	22a5      	movs	r2, #165	; 0xa5
    4fee:	5c9b      	ldrb	r3, [r3, r2]
    4ff0:	1c1a      	adds	r2, r3, #0
    4ff2:	2304      	movs	r3, #4
    4ff4:	4013      	ands	r3, r2
    4ff6:	d006      	beq.n	5006 <_usb_host_interrupt_handler+0x40e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4ff8:	4b2f      	ldr	r3, [pc, #188]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	68da      	ldr	r2, [r3, #12]
    4ffe:	4b2e      	ldr	r3, [pc, #184]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	1c18      	adds	r0, r3, #0
    5004:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    5006:	683b      	ldr	r3, [r7, #0]
    5008:	2280      	movs	r2, #128	; 0x80
    500a:	4013      	ands	r3, r2
    500c:	d016      	beq.n	503c <_usb_host_interrupt_handler+0x444>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    500e:	4b2b      	ldr	r3, [pc, #172]	; (50bc <_usb_host_interrupt_handler+0x4c4>)
    5010:	2200      	movs	r2, #0
    5012:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    5014:	4b28      	ldr	r3, [pc, #160]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5016:	681b      	ldr	r3, [r3, #0]
    5018:	681b      	ldr	r3, [r3, #0]
    501a:	2280      	movs	r2, #128	; 0x80
    501c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    501e:	4b26      	ldr	r3, [pc, #152]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5020:	681b      	ldr	r3, [r3, #0]
    5022:	22a5      	movs	r2, #165	; 0xa5
    5024:	5c9b      	ldrb	r3, [r3, r2]
    5026:	1c1a      	adds	r2, r3, #0
    5028:	2320      	movs	r3, #32
    502a:	4013      	ands	r3, r2
    502c:	d006      	beq.n	503c <_usb_host_interrupt_handler+0x444>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    502e:	4b22      	ldr	r3, [pc, #136]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5030:	681b      	ldr	r3, [r3, #0]
    5032:	699a      	ldr	r2, [r3, #24]
    5034:	4b20      	ldr	r3, [pc, #128]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	1c18      	adds	r0, r3, #0
    503a:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    503c:	683a      	ldr	r2, [r7, #0]
    503e:	2380      	movs	r3, #128	; 0x80
    5040:	005b      	lsls	r3, r3, #1
    5042:	4013      	ands	r3, r2
    5044:	d017      	beq.n	5076 <_usb_host_interrupt_handler+0x47e>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    5046:	4b1d      	ldr	r3, [pc, #116]	; (50bc <_usb_host_interrupt_handler+0x4c4>)
    5048:	2200      	movs	r2, #0
    504a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    504c:	4b1a      	ldr	r3, [pc, #104]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	2280      	movs	r2, #128	; 0x80
    5054:	0052      	lsls	r2, r2, #1
    5056:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    5058:	4b17      	ldr	r3, [pc, #92]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	22a5      	movs	r2, #165	; 0xa5
    505e:	5c9b      	ldrb	r3, [r3, r2]
    5060:	1c1a      	adds	r2, r3, #0
    5062:	2340      	movs	r3, #64	; 0x40
    5064:	4013      	ands	r3, r2
    5066:	d006      	beq.n	5076 <_usb_host_interrupt_handler+0x47e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    5068:	4b13      	ldr	r3, [pc, #76]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    506a:	681b      	ldr	r3, [r3, #0]
    506c:	69da      	ldr	r2, [r3, #28]
    506e:	4b12      	ldr	r3, [pc, #72]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	1c18      	adds	r0, r3, #0
    5074:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    5076:	683a      	ldr	r2, [r7, #0]
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	009b      	lsls	r3, r3, #2
    507c:	4013      	ands	r3, r2
    507e:	d017      	beq.n	50b0 <_usb_host_interrupt_handler+0x4b8>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    5080:	4b0e      	ldr	r3, [pc, #56]	; (50bc <_usb_host_interrupt_handler+0x4c4>)
    5082:	2200      	movs	r2, #0
    5084:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    5086:	4b0c      	ldr	r3, [pc, #48]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5088:	681b      	ldr	r3, [r3, #0]
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	2280      	movs	r2, #128	; 0x80
    508e:	0092      	lsls	r2, r2, #2
    5090:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    5092:	4b09      	ldr	r3, [pc, #36]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	22a5      	movs	r2, #165	; 0xa5
    5098:	5c9b      	ldrb	r3, [r3, r2]
    509a:	b2db      	uxtb	r3, r3
    509c:	b25b      	sxtb	r3, r3
    509e:	2b00      	cmp	r3, #0
    50a0:	da06      	bge.n	50b0 <_usb_host_interrupt_handler+0x4b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    50a2:	4b05      	ldr	r3, [pc, #20]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    50a4:	681b      	ldr	r3, [r3, #0]
    50a6:	6a1a      	ldr	r2, [r3, #32]
    50a8:	4b03      	ldr	r3, [pc, #12]	; (50b8 <_usb_host_interrupt_handler+0x4c0>)
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	1c18      	adds	r0, r3, #0
    50ae:	4790      	blx	r2
			}
		}

	}
}
    50b0:	46bd      	mov	sp, r7
    50b2:	b002      	add	sp, #8
    50b4:	bd80      	pop	{r7, pc}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	20000130 	.word	0x20000130
    50bc:	20000148 	.word	0x20000148

000050c0 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	b084      	sub	sp, #16
    50c4:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    50c6:	4bcd      	ldr	r3, [pc, #820]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	681a      	ldr	r2, [r3, #0]
    50cc:	2308      	movs	r3, #8
    50ce:	18fb      	adds	r3, r7, r3
    50d0:	8c12      	ldrh	r2, [r2, #32]
    50d2:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    50d4:	2308      	movs	r3, #8
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	881b      	ldrh	r3, [r3, #0]
    50da:	2b00      	cmp	r3, #0
    50dc:	d158      	bne.n	5190 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    50de:	4bc7      	ldr	r3, [pc, #796]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	681a      	ldr	r2, [r3, #0]
    50e4:	1dbb      	adds	r3, r7, #6
    50e6:	8b92      	ldrh	r2, [r2, #28]
    50e8:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    50ea:	4bc4      	ldr	r3, [pc, #784]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    50ec:	681a      	ldr	r2, [r3, #0]
    50ee:	23ab      	movs	r3, #171	; 0xab
    50f0:	005b      	lsls	r3, r3, #1
    50f2:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    50f4:	1dba      	adds	r2, r7, #6
    50f6:	8812      	ldrh	r2, [r2, #0]
    50f8:	4013      	ands	r3, r2
    50fa:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    50fc:	4bbf      	ldr	r3, [pc, #764]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    50fe:	6819      	ldr	r1, [r3, #0]
    5100:	23aa      	movs	r3, #170	; 0xaa
    5102:	005b      	lsls	r3, r3, #1
    5104:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    5106:	1d3b      	adds	r3, r7, #4
    5108:	400a      	ands	r2, r1
    510a:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    510c:	2300      	movs	r3, #0
    510e:	60fb      	str	r3, [r7, #12]
    5110:	e03a      	b.n	5188 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    5112:	4bbb      	ldr	r3, [pc, #748]	; (5400 <_usb_device_interrupt_handler+0x340>)
    5114:	68fa      	ldr	r2, [r7, #12]
    5116:	0052      	lsls	r2, r2, #1
    5118:	5ad3      	ldrh	r3, [r2, r3]
    511a:	1dba      	adds	r2, r7, #6
    511c:	8812      	ldrh	r2, [r2, #0]
    511e:	4013      	ands	r3, r2
    5120:	b29b      	uxth	r3, r3
    5122:	2b00      	cmp	r3, #0
    5124:	d007      	beq.n	5136 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    5126:	4bb5      	ldr	r3, [pc, #724]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    512c:	4ab4      	ldr	r2, [pc, #720]	; (5400 <_usb_device_interrupt_handler+0x340>)
    512e:	68f9      	ldr	r1, [r7, #12]
    5130:	0049      	lsls	r1, r1, #1
    5132:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    5134:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    5136:	4bb2      	ldr	r3, [pc, #712]	; (5400 <_usb_device_interrupt_handler+0x340>)
    5138:	68fa      	ldr	r2, [r7, #12]
    513a:	0052      	lsls	r2, r2, #1
    513c:	5ad3      	ldrh	r3, [r2, r3]
    513e:	1d3a      	adds	r2, r7, #4
    5140:	8812      	ldrh	r2, [r2, #0]
    5142:	4013      	ands	r3, r2
    5144:	b29b      	uxth	r3, r3
    5146:	2b00      	cmp	r3, #0
    5148:	d01b      	beq.n	5182 <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    514a:	68fb      	ldr	r3, [r7, #12]
    514c:	2b06      	cmp	r3, #6
    514e:	d10c      	bne.n	516a <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5150:	4bac      	ldr	r3, [pc, #688]	; (5404 <_usb_device_interrupt_handler+0x344>)
    5152:	891b      	ldrh	r3, [r3, #8]
    5154:	b29b      	uxth	r3, r3
    5156:	091b      	lsrs	r3, r3, #4
    5158:	055b      	lsls	r3, r3, #21
    515a:	0d5b      	lsrs	r3, r3, #21
    515c:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    515e:	1c1a      	adds	r2, r3, #0
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	005b      	lsls	r3, r3, #1
    5164:	401a      	ands	r2, r3
    5166:	4ba8      	ldr	r3, [pc, #672]	; (5408 <_usb_device_interrupt_handler+0x348>)
    5168:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    516a:	4ba4      	ldr	r3, [pc, #656]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	68fa      	ldr	r2, [r7, #12]
    5170:	322e      	adds	r2, #46	; 0x2e
    5172:	0092      	lsls	r2, r2, #2
    5174:	58d2      	ldr	r2, [r2, r3]
    5176:	4ba1      	ldr	r3, [pc, #644]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5178:	6819      	ldr	r1, [r3, #0]
    517a:	4ba3      	ldr	r3, [pc, #652]	; (5408 <_usb_device_interrupt_handler+0x348>)
    517c:	1c08      	adds	r0, r1, #0
    517e:	1c19      	adds	r1, r3, #0
    5180:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5182:	68fb      	ldr	r3, [r7, #12]
    5184:	3301      	adds	r3, #1
    5186:	60fb      	str	r3, [r7, #12]
    5188:	68fb      	ldr	r3, [r7, #12]
    518a:	2b06      	cmp	r3, #6
    518c:	ddc1      	ble.n	5112 <_usb_device_interrupt_handler+0x52>
    518e:	e23c      	b.n	560a <_usb_device_interrupt_handler+0x54a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    5190:	230b      	movs	r3, #11
    5192:	18fb      	adds	r3, r7, r3
    5194:	2200      	movs	r2, #0
    5196:	701a      	strb	r2, [r3, #0]
    5198:	e231      	b.n	55fe <_usb_device_interrupt_handler+0x53e>

			if (ep_inst & (1 << i)) {
    519a:	2308      	movs	r3, #8
    519c:	18fb      	adds	r3, r7, r3
    519e:	881a      	ldrh	r2, [r3, #0]
    51a0:	230b      	movs	r3, #11
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	781b      	ldrb	r3, [r3, #0]
    51a6:	411a      	asrs	r2, r3
    51a8:	1c13      	adds	r3, r2, #0
    51aa:	2201      	movs	r2, #1
    51ac:	4013      	ands	r3, r2
    51ae:	d100      	bne.n	51b2 <_usb_device_interrupt_handler+0xf2>
    51b0:	e21e      	b.n	55f0 <_usb_device_interrupt_handler+0x530>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    51b2:	4b92      	ldr	r3, [pc, #584]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	681a      	ldr	r2, [r3, #0]
    51b8:	230b      	movs	r3, #11
    51ba:	18fb      	adds	r3, r7, r3
    51bc:	781b      	ldrb	r3, [r3, #0]
    51be:	3308      	adds	r3, #8
    51c0:	015b      	lsls	r3, r3, #5
    51c2:	18d3      	adds	r3, r2, r3
    51c4:	79db      	ldrb	r3, [r3, #7]
    51c6:	b2da      	uxtb	r2, r3
    51c8:	1dbb      	adds	r3, r7, #6
    51ca:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    51cc:	4b8b      	ldr	r3, [pc, #556]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    51ce:	6819      	ldr	r1, [r3, #0]
    51d0:	230b      	movs	r3, #11
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	781a      	ldrb	r2, [r3, #0]
    51d6:	23b0      	movs	r3, #176	; 0xb0
    51d8:	005b      	lsls	r3, r3, #1
    51da:	188a      	adds	r2, r1, r2
    51dc:	18d3      	adds	r3, r2, r3
    51de:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    51e0:	b29b      	uxth	r3, r3
    51e2:	1dba      	adds	r2, r7, #6
    51e4:	8812      	ldrh	r2, [r2, #0]
    51e6:	4013      	ands	r3, r2
    51e8:	b29b      	uxth	r3, r3
    51ea:	b298      	uxth	r0, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    51ec:	4b83      	ldr	r3, [pc, #524]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    51ee:	6819      	ldr	r1, [r3, #0]
    51f0:	230b      	movs	r3, #11
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	781a      	ldrb	r2, [r3, #0]
    51f6:	23ac      	movs	r3, #172	; 0xac
    51f8:	005b      	lsls	r3, r3, #1
    51fa:	188a      	adds	r2, r1, r2
    51fc:	18d3      	adds	r3, r2, r3
    51fe:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    5200:	b29a      	uxth	r2, r3
    5202:	1c03      	adds	r3, r0, #0
    5204:	4013      	ands	r3, r2
    5206:	b29a      	uxth	r2, r3
    5208:	1d3b      	adds	r3, r7, #4
    520a:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    520c:	1dbb      	adds	r3, r7, #6
    520e:	881b      	ldrh	r3, [r3, #0]
    5210:	2260      	movs	r2, #96	; 0x60
    5212:	4013      	ands	r3, r2
    5214:	d059      	beq.n	52ca <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    5216:	4b79      	ldr	r3, [pc, #484]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5218:	681b      	ldr	r3, [r3, #0]
    521a:	681a      	ldr	r2, [r3, #0]
    521c:	230b      	movs	r3, #11
    521e:	18fb      	adds	r3, r7, r3
    5220:	781b      	ldrb	r3, [r3, #0]
    5222:	3308      	adds	r3, #8
    5224:	015b      	lsls	r3, r3, #5
    5226:	18d3      	adds	r3, r2, r3
    5228:	79db      	ldrb	r3, [r3, #7]
    522a:	b2db      	uxtb	r3, r3
    522c:	1c1a      	adds	r2, r3, #0
    522e:	2340      	movs	r3, #64	; 0x40
    5230:	4013      	ands	r3, r2
    5232:	d014      	beq.n	525e <_usb_device_interrupt_handler+0x19e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    5234:	4b71      	ldr	r3, [pc, #452]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	681a      	ldr	r2, [r3, #0]
    523a:	230b      	movs	r3, #11
    523c:	18fb      	adds	r3, r7, r3
    523e:	781b      	ldrb	r3, [r3, #0]
    5240:	3308      	adds	r3, #8
    5242:	015b      	lsls	r3, r3, #5
    5244:	18d3      	adds	r3, r2, r3
    5246:	2240      	movs	r2, #64	; 0x40
    5248:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    524a:	230b      	movs	r3, #11
    524c:	18fb      	adds	r3, r7, r3
    524e:	781b      	ldrb	r3, [r3, #0]
    5250:	2280      	movs	r2, #128	; 0x80
    5252:	4252      	negs	r2, r2
    5254:	4313      	orrs	r3, r2
    5256:	b2da      	uxtb	r2, r3
    5258:	4b6c      	ldr	r3, [pc, #432]	; (540c <_usb_device_interrupt_handler+0x34c>)
    525a:	719a      	strb	r2, [r3, #6]
    525c:	e01e      	b.n	529c <_usb_device_interrupt_handler+0x1dc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    525e:	4b67      	ldr	r3, [pc, #412]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	681a      	ldr	r2, [r3, #0]
    5264:	230b      	movs	r3, #11
    5266:	18fb      	adds	r3, r7, r3
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	3308      	adds	r3, #8
    526c:	015b      	lsls	r3, r3, #5
    526e:	18d3      	adds	r3, r2, r3
    5270:	79db      	ldrb	r3, [r3, #7]
    5272:	b2db      	uxtb	r3, r3
    5274:	1c1a      	adds	r2, r3, #0
    5276:	2320      	movs	r3, #32
    5278:	4013      	ands	r3, r2
    527a:	d00f      	beq.n	529c <_usb_device_interrupt_handler+0x1dc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    527c:	4b5f      	ldr	r3, [pc, #380]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	681a      	ldr	r2, [r3, #0]
    5282:	230b      	movs	r3, #11
    5284:	18fb      	adds	r3, r7, r3
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	3308      	adds	r3, #8
    528a:	015b      	lsls	r3, r3, #5
    528c:	18d3      	adds	r3, r2, r3
    528e:	2220      	movs	r2, #32
    5290:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5292:	4b5e      	ldr	r3, [pc, #376]	; (540c <_usb_device_interrupt_handler+0x34c>)
    5294:	220b      	movs	r2, #11
    5296:	18ba      	adds	r2, r7, r2
    5298:	7812      	ldrb	r2, [r2, #0]
    529a:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    529c:	1d3b      	adds	r3, r7, #4
    529e:	881b      	ldrh	r3, [r3, #0]
    52a0:	2260      	movs	r2, #96	; 0x60
    52a2:	4013      	ands	r3, r2
    52a4:	d010      	beq.n	52c8 <_usb_device_interrupt_handler+0x208>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    52a6:	4b55      	ldr	r3, [pc, #340]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    52a8:	681a      	ldr	r2, [r3, #0]
    52aa:	230b      	movs	r3, #11
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	781b      	ldrb	r3, [r3, #0]
    52b0:	21dc      	movs	r1, #220	; 0xdc
    52b2:	011b      	lsls	r3, r3, #4
    52b4:	18d3      	adds	r3, r2, r3
    52b6:	185b      	adds	r3, r3, r1
    52b8:	685a      	ldr	r2, [r3, #4]
    52ba:	4b50      	ldr	r3, [pc, #320]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    52bc:	6819      	ldr	r1, [r3, #0]
    52be:	4b53      	ldr	r3, [pc, #332]	; (540c <_usb_device_interrupt_handler+0x34c>)
    52c0:	1c08      	adds	r0, r1, #0
    52c2:	1c19      	adds	r1, r3, #0
    52c4:	4790      	blx	r2
					}
					return;
    52c6:	e1a0      	b.n	560a <_usb_device_interrupt_handler+0x54a>
    52c8:	e19f      	b.n	560a <_usb_device_interrupt_handler+0x54a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    52ca:	1dbb      	adds	r3, r7, #6
    52cc:	881b      	ldrh	r3, [r3, #0]
    52ce:	2210      	movs	r2, #16
    52d0:	4013      	ands	r3, r2
    52d2:	d038      	beq.n	5346 <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    52d4:	4b49      	ldr	r3, [pc, #292]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	681a      	ldr	r2, [r3, #0]
    52da:	230b      	movs	r3, #11
    52dc:	18fb      	adds	r3, r7, r3
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	3308      	adds	r3, #8
    52e2:	015b      	lsls	r3, r3, #5
    52e4:	18d3      	adds	r3, r2, r3
    52e6:	2210      	movs	r2, #16
    52e8:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    52ea:	4b44      	ldr	r3, [pc, #272]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    52ec:	6819      	ldr	r1, [r3, #0]
    52ee:	230b      	movs	r3, #11
    52f0:	18fb      	adds	r3, r7, r3
    52f2:	781a      	ldrb	r2, [r3, #0]
    52f4:	23b0      	movs	r3, #176	; 0xb0
    52f6:	005b      	lsls	r3, r3, #1
    52f8:	188a      	adds	r2, r1, r2
    52fa:	18d3      	adds	r3, r2, r3
    52fc:	781b      	ldrb	r3, [r3, #0]
    52fe:	2210      	movs	r2, #16
    5300:	4013      	ands	r3, r2
    5302:	b2db      	uxtb	r3, r3
    5304:	2b00      	cmp	r3, #0
    5306:	d01d      	beq.n	5344 <_usb_device_interrupt_handler+0x284>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5308:	230b      	movs	r3, #11
    530a:	18fb      	adds	r3, r7, r3
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	4a3d      	ldr	r2, [pc, #244]	; (5404 <_usb_device_interrupt_handler+0x344>)
    5310:	015b      	lsls	r3, r3, #5
    5312:	18d3      	adds	r3, r2, r3
    5314:	685b      	ldr	r3, [r3, #4]
    5316:	049b      	lsls	r3, r3, #18
    5318:	0c9b      	lsrs	r3, r3, #18
    531a:	b29b      	uxth	r3, r3
    531c:	1c1a      	adds	r2, r3, #0
    531e:	4b3b      	ldr	r3, [pc, #236]	; (540c <_usb_device_interrupt_handler+0x34c>)
    5320:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5322:	4b36      	ldr	r3, [pc, #216]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5324:	681a      	ldr	r2, [r3, #0]
    5326:	230b      	movs	r3, #11
    5328:	18fb      	adds	r3, r7, r3
    532a:	781b      	ldrb	r3, [r3, #0]
    532c:	21d8      	movs	r1, #216	; 0xd8
    532e:	011b      	lsls	r3, r3, #4
    5330:	18d3      	adds	r3, r2, r3
    5332:	185b      	adds	r3, r3, r1
    5334:	685a      	ldr	r2, [r3, #4]
    5336:	4b31      	ldr	r3, [pc, #196]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5338:	6819      	ldr	r1, [r3, #0]
    533a:	4b34      	ldr	r3, [pc, #208]	; (540c <_usb_device_interrupt_handler+0x34c>)
    533c:	1c08      	adds	r0, r1, #0
    533e:	1c19      	adds	r1, r3, #0
    5340:	4790      	blx	r2
					}
					return;
    5342:	e162      	b.n	560a <_usb_device_interrupt_handler+0x54a>
    5344:	e161      	b.n	560a <_usb_device_interrupt_handler+0x54a>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    5346:	1dbb      	adds	r3, r7, #6
    5348:	881b      	ldrh	r3, [r3, #0]
    534a:	220c      	movs	r2, #12
    534c:	4013      	ands	r3, r2
    534e:	d100      	bne.n	5352 <_usb_device_interrupt_handler+0x292>
    5350:	e0c6      	b.n	54e0 <_usb_device_interrupt_handler+0x420>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5352:	4b2a      	ldr	r3, [pc, #168]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	681a      	ldr	r2, [r3, #0]
    5358:	230b      	movs	r3, #11
    535a:	18fb      	adds	r3, r7, r3
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	3308      	adds	r3, #8
    5360:	015b      	lsls	r3, r3, #5
    5362:	18d3      	adds	r3, r2, r3
    5364:	79db      	ldrb	r3, [r3, #7]
    5366:	b2db      	uxtb	r3, r3
    5368:	1c1a      	adds	r2, r3, #0
    536a:	2308      	movs	r3, #8
    536c:	4013      	ands	r3, r2
    536e:	d04f      	beq.n	5410 <_usb_device_interrupt_handler+0x350>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    5370:	4b22      	ldr	r3, [pc, #136]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    5372:	681b      	ldr	r3, [r3, #0]
    5374:	681a      	ldr	r2, [r3, #0]
    5376:	230b      	movs	r3, #11
    5378:	18fb      	adds	r3, r7, r3
    537a:	781b      	ldrb	r3, [r3, #0]
    537c:	3308      	adds	r3, #8
    537e:	015b      	lsls	r3, r3, #5
    5380:	18d3      	adds	r3, r2, r3
    5382:	2208      	movs	r2, #8
    5384:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5386:	230b      	movs	r3, #11
    5388:	18fb      	adds	r3, r7, r3
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	4a1d      	ldr	r2, [pc, #116]	; (5404 <_usb_device_interrupt_handler+0x344>)
    538e:	015b      	lsls	r3, r3, #5
    5390:	18d3      	adds	r3, r2, r3
    5392:	3318      	adds	r3, #24
    5394:	789b      	ldrb	r3, [r3, #2]
    5396:	b2db      	uxtb	r3, r3
    5398:	1c1a      	adds	r2, r3, #0
    539a:	2302      	movs	r3, #2
    539c:	4013      	ands	r3, r2
    539e:	d014      	beq.n	53ca <_usb_device_interrupt_handler+0x30a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    53a0:	230b      	movs	r3, #11
    53a2:	18fb      	adds	r3, r7, r3
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	220b      	movs	r2, #11
    53a8:	18ba      	adds	r2, r7, r2
    53aa:	7812      	ldrb	r2, [r2, #0]
    53ac:	4915      	ldr	r1, [pc, #84]	; (5404 <_usb_device_interrupt_handler+0x344>)
    53ae:	0152      	lsls	r2, r2, #5
    53b0:	188a      	adds	r2, r1, r2
    53b2:	3218      	adds	r2, #24
    53b4:	7892      	ldrb	r2, [r2, #2]
    53b6:	b2d2      	uxtb	r2, r2
    53b8:	2102      	movs	r1, #2
    53ba:	438a      	bics	r2, r1
    53bc:	b2d1      	uxtb	r1, r2
    53be:	4a11      	ldr	r2, [pc, #68]	; (5404 <_usb_device_interrupt_handler+0x344>)
    53c0:	015b      	lsls	r3, r3, #5
    53c2:	18d3      	adds	r3, r2, r3
    53c4:	3318      	adds	r3, #24
    53c6:	1c0a      	adds	r2, r1, #0
    53c8:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    53ca:	230b      	movs	r3, #11
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	781b      	ldrb	r3, [r3, #0]
    53d0:	2280      	movs	r2, #128	; 0x80
    53d2:	4252      	negs	r2, r2
    53d4:	4313      	orrs	r3, r2
    53d6:	b2da      	uxtb	r2, r3
    53d8:	4b0c      	ldr	r3, [pc, #48]	; (540c <_usb_device_interrupt_handler+0x34c>)
    53da:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    53dc:	4b07      	ldr	r3, [pc, #28]	; (53fc <_usb_device_interrupt_handler+0x33c>)
    53de:	681b      	ldr	r3, [r3, #0]
    53e0:	681a      	ldr	r2, [r3, #0]
    53e2:	230b      	movs	r3, #11
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	781b      	ldrb	r3, [r3, #0]
    53e8:	3308      	adds	r3, #8
    53ea:	015b      	lsls	r3, r3, #5
    53ec:	18d3      	adds	r3, r2, r3
    53ee:	79db      	ldrb	r3, [r3, #7]
    53f0:	b2db      	uxtb	r3, r3
    53f2:	1c1a      	adds	r2, r3, #0
    53f4:	2302      	movs	r3, #2
    53f6:	4013      	ands	r3, r2
    53f8:	d05b      	beq.n	54b2 <_usb_device_interrupt_handler+0x3f2>
							return;
    53fa:	e106      	b.n	560a <_usb_device_interrupt_handler+0x54a>
    53fc:	20000130 	.word	0x20000130
    5400:	0000a9c0 	.word	0x0000a9c0
    5404:	20002f70 	.word	0x20002f70
    5408:	2000013c 	.word	0x2000013c
    540c:	20000140 	.word	0x20000140
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5410:	4b7f      	ldr	r3, [pc, #508]	; (5610 <_usb_device_interrupt_handler+0x550>)
    5412:	681b      	ldr	r3, [r3, #0]
    5414:	681a      	ldr	r2, [r3, #0]
    5416:	230b      	movs	r3, #11
    5418:	18fb      	adds	r3, r7, r3
    541a:	781b      	ldrb	r3, [r3, #0]
    541c:	3308      	adds	r3, #8
    541e:	015b      	lsls	r3, r3, #5
    5420:	18d3      	adds	r3, r2, r3
    5422:	79db      	ldrb	r3, [r3, #7]
    5424:	b2db      	uxtb	r3, r3
    5426:	1c1a      	adds	r2, r3, #0
    5428:	2304      	movs	r3, #4
    542a:	4013      	ands	r3, r2
    542c:	d041      	beq.n	54b2 <_usb_device_interrupt_handler+0x3f2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    542e:	4b78      	ldr	r3, [pc, #480]	; (5610 <_usb_device_interrupt_handler+0x550>)
    5430:	681b      	ldr	r3, [r3, #0]
    5432:	681a      	ldr	r2, [r3, #0]
    5434:	230b      	movs	r3, #11
    5436:	18fb      	adds	r3, r7, r3
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	3308      	adds	r3, #8
    543c:	015b      	lsls	r3, r3, #5
    543e:	18d3      	adds	r3, r2, r3
    5440:	2204      	movs	r2, #4
    5442:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    5444:	230b      	movs	r3, #11
    5446:	18fb      	adds	r3, r7, r3
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	4a72      	ldr	r2, [pc, #456]	; (5614 <_usb_device_interrupt_handler+0x554>)
    544c:	015b      	lsls	r3, r3, #5
    544e:	18d3      	adds	r3, r2, r3
    5450:	3308      	adds	r3, #8
    5452:	789b      	ldrb	r3, [r3, #2]
    5454:	b2db      	uxtb	r3, r3
    5456:	1c1a      	adds	r2, r3, #0
    5458:	2302      	movs	r3, #2
    545a:	4013      	ands	r3, r2
    545c:	d014      	beq.n	5488 <_usb_device_interrupt_handler+0x3c8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    545e:	230b      	movs	r3, #11
    5460:	18fb      	adds	r3, r7, r3
    5462:	781b      	ldrb	r3, [r3, #0]
    5464:	220b      	movs	r2, #11
    5466:	18ba      	adds	r2, r7, r2
    5468:	7812      	ldrb	r2, [r2, #0]
    546a:	496a      	ldr	r1, [pc, #424]	; (5614 <_usb_device_interrupt_handler+0x554>)
    546c:	0152      	lsls	r2, r2, #5
    546e:	188a      	adds	r2, r1, r2
    5470:	3208      	adds	r2, #8
    5472:	7892      	ldrb	r2, [r2, #2]
    5474:	b2d2      	uxtb	r2, r2
    5476:	2102      	movs	r1, #2
    5478:	438a      	bics	r2, r1
    547a:	b2d1      	uxtb	r1, r2
    547c:	4a65      	ldr	r2, [pc, #404]	; (5614 <_usb_device_interrupt_handler+0x554>)
    547e:	015b      	lsls	r3, r3, #5
    5480:	18d3      	adds	r3, r2, r3
    5482:	3308      	adds	r3, #8
    5484:	1c0a      	adds	r2, r1, #0
    5486:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5488:	4b63      	ldr	r3, [pc, #396]	; (5618 <_usb_device_interrupt_handler+0x558>)
    548a:	220b      	movs	r2, #11
    548c:	18ba      	adds	r2, r7, r2
    548e:	7812      	ldrb	r2, [r2, #0]
    5490:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5492:	4b5f      	ldr	r3, [pc, #380]	; (5610 <_usb_device_interrupt_handler+0x550>)
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	681a      	ldr	r2, [r3, #0]
    5498:	230b      	movs	r3, #11
    549a:	18fb      	adds	r3, r7, r3
    549c:	781b      	ldrb	r3, [r3, #0]
    549e:	3308      	adds	r3, #8
    54a0:	015b      	lsls	r3, r3, #5
    54a2:	18d3      	adds	r3, r2, r3
    54a4:	79db      	ldrb	r3, [r3, #7]
    54a6:	b2db      	uxtb	r3, r3
    54a8:	1c1a      	adds	r2, r3, #0
    54aa:	2301      	movs	r3, #1
    54ac:	4013      	ands	r3, r2
    54ae:	d000      	beq.n	54b2 <_usb_device_interrupt_handler+0x3f2>
							return;
    54b0:	e0ab      	b.n	560a <_usb_device_interrupt_handler+0x54a>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    54b2:	1d3b      	adds	r3, r7, #4
    54b4:	881b      	ldrh	r3, [r3, #0]
    54b6:	220c      	movs	r2, #12
    54b8:	4013      	ands	r3, r2
    54ba:	d010      	beq.n	54de <_usb_device_interrupt_handler+0x41e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    54bc:	4b54      	ldr	r3, [pc, #336]	; (5610 <_usb_device_interrupt_handler+0x550>)
    54be:	681a      	ldr	r2, [r3, #0]
    54c0:	230b      	movs	r3, #11
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	21d4      	movs	r1, #212	; 0xd4
    54c8:	011b      	lsls	r3, r3, #4
    54ca:	18d3      	adds	r3, r2, r3
    54cc:	185b      	adds	r3, r3, r1
    54ce:	685a      	ldr	r2, [r3, #4]
    54d0:	4b4f      	ldr	r3, [pc, #316]	; (5610 <_usb_device_interrupt_handler+0x550>)
    54d2:	6819      	ldr	r1, [r3, #0]
    54d4:	4b50      	ldr	r3, [pc, #320]	; (5618 <_usb_device_interrupt_handler+0x558>)
    54d6:	1c08      	adds	r0, r1, #0
    54d8:	1c19      	adds	r1, r3, #0
    54da:	4790      	blx	r2
					}
					return;
    54dc:	e095      	b.n	560a <_usb_device_interrupt_handler+0x54a>
    54de:	e094      	b.n	560a <_usb_device_interrupt_handler+0x54a>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    54e0:	1dbb      	adds	r3, r7, #6
    54e2:	881b      	ldrh	r3, [r3, #0]
    54e4:	2203      	movs	r2, #3
    54e6:	4013      	ands	r3, r2
    54e8:	d100      	bne.n	54ec <_usb_device_interrupt_handler+0x42c>
    54ea:	e081      	b.n	55f0 <_usb_device_interrupt_handler+0x530>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    54ec:	4b48      	ldr	r3, [pc, #288]	; (5610 <_usb_device_interrupt_handler+0x550>)
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	681a      	ldr	r2, [r3, #0]
    54f2:	230b      	movs	r3, #11
    54f4:	18fb      	adds	r3, r7, r3
    54f6:	781b      	ldrb	r3, [r3, #0]
    54f8:	3308      	adds	r3, #8
    54fa:	015b      	lsls	r3, r3, #5
    54fc:	18d3      	adds	r3, r2, r3
    54fe:	79db      	ldrb	r3, [r3, #7]
    5500:	b2db      	uxtb	r3, r3
    5502:	1c1a      	adds	r2, r3, #0
    5504:	2302      	movs	r3, #2
    5506:	4013      	ands	r3, r2
    5508:	d022      	beq.n	5550 <_usb_device_interrupt_handler+0x490>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    550a:	4b41      	ldr	r3, [pc, #260]	; (5610 <_usb_device_interrupt_handler+0x550>)
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	681a      	ldr	r2, [r3, #0]
    5510:	230b      	movs	r3, #11
    5512:	18fb      	adds	r3, r7, r3
    5514:	781b      	ldrb	r3, [r3, #0]
    5516:	3308      	adds	r3, #8
    5518:	015b      	lsls	r3, r3, #5
    551a:	18d3      	adds	r3, r2, r3
    551c:	2202      	movs	r2, #2
    551e:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5520:	230b      	movs	r3, #11
    5522:	18fb      	adds	r3, r7, r3
    5524:	781b      	ldrb	r3, [r3, #0]
    5526:	2280      	movs	r2, #128	; 0x80
    5528:	4252      	negs	r2, r2
    552a:	4313      	orrs	r3, r2
    552c:	b2da      	uxtb	r2, r3
    552e:	4b3a      	ldr	r3, [pc, #232]	; (5618 <_usb_device_interrupt_handler+0x558>)
    5530:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    5532:	230b      	movs	r3, #11
    5534:	18fb      	adds	r3, r7, r3
    5536:	781b      	ldrb	r3, [r3, #0]
    5538:	4a36      	ldr	r2, [pc, #216]	; (5614 <_usb_device_interrupt_handler+0x554>)
    553a:	015b      	lsls	r3, r3, #5
    553c:	18d3      	adds	r3, r2, r3
    553e:	3310      	adds	r3, #16
    5540:	685b      	ldr	r3, [r3, #4]
    5542:	049b      	lsls	r3, r3, #18
    5544:	0c9b      	lsrs	r3, r3, #18
    5546:	b29b      	uxth	r3, r3
    5548:	1c1a      	adds	r2, r3, #0
    554a:	4b33      	ldr	r3, [pc, #204]	; (5618 <_usb_device_interrupt_handler+0x558>)
    554c:	805a      	strh	r2, [r3, #2]
    554e:	e039      	b.n	55c4 <_usb_device_interrupt_handler+0x504>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5550:	4b2f      	ldr	r3, [pc, #188]	; (5610 <_usb_device_interrupt_handler+0x550>)
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	681a      	ldr	r2, [r3, #0]
    5556:	230b      	movs	r3, #11
    5558:	18fb      	adds	r3, r7, r3
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	3308      	adds	r3, #8
    555e:	015b      	lsls	r3, r3, #5
    5560:	18d3      	adds	r3, r2, r3
    5562:	79db      	ldrb	r3, [r3, #7]
    5564:	b2db      	uxtb	r3, r3
    5566:	1c1a      	adds	r2, r3, #0
    5568:	2301      	movs	r3, #1
    556a:	4013      	ands	r3, r2
    556c:	d02a      	beq.n	55c4 <_usb_device_interrupt_handler+0x504>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    556e:	4b28      	ldr	r3, [pc, #160]	; (5610 <_usb_device_interrupt_handler+0x550>)
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	681a      	ldr	r2, [r3, #0]
    5574:	230b      	movs	r3, #11
    5576:	18fb      	adds	r3, r7, r3
    5578:	781b      	ldrb	r3, [r3, #0]
    557a:	3308      	adds	r3, #8
    557c:	015b      	lsls	r3, r3, #5
    557e:	18d3      	adds	r3, r2, r3
    5580:	2201      	movs	r2, #1
    5582:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5584:	4b24      	ldr	r3, [pc, #144]	; (5618 <_usb_device_interrupt_handler+0x558>)
    5586:	220b      	movs	r2, #11
    5588:	18ba      	adds	r2, r7, r2
    558a:	7812      	ldrb	r2, [r2, #0]
    558c:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    558e:	230b      	movs	r3, #11
    5590:	18fb      	adds	r3, r7, r3
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	4a1f      	ldr	r2, [pc, #124]	; (5614 <_usb_device_interrupt_handler+0x554>)
    5596:	015b      	lsls	r3, r3, #5
    5598:	18d3      	adds	r3, r2, r3
    559a:	685b      	ldr	r3, [r3, #4]
    559c:	049b      	lsls	r3, r3, #18
    559e:	0c9b      	lsrs	r3, r3, #18
    55a0:	b29b      	uxth	r3, r3
    55a2:	1c1a      	adds	r2, r3, #0
    55a4:	4b1c      	ldr	r3, [pc, #112]	; (5618 <_usb_device_interrupt_handler+0x558>)
    55a6:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    55a8:	230b      	movs	r3, #11
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	4a19      	ldr	r2, [pc, #100]	; (5614 <_usb_device_interrupt_handler+0x554>)
    55b0:	015b      	lsls	r3, r3, #5
    55b2:	18d3      	adds	r3, r2, r3
    55b4:	685b      	ldr	r3, [r3, #4]
    55b6:	0b9b      	lsrs	r3, r3, #14
    55b8:	049b      	lsls	r3, r3, #18
    55ba:	0c9b      	lsrs	r3, r3, #18
    55bc:	b29b      	uxth	r3, r3
    55be:	1c1a      	adds	r2, r3, #0
    55c0:	4b15      	ldr	r3, [pc, #84]	; (5618 <_usb_device_interrupt_handler+0x558>)
    55c2:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    55c4:	1d3b      	adds	r3, r7, #4
    55c6:	881b      	ldrh	r3, [r3, #0]
    55c8:	2203      	movs	r2, #3
    55ca:	4013      	ands	r3, r2
    55cc:	d00f      	beq.n	55ee <_usb_device_interrupt_handler+0x52e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    55ce:	4b10      	ldr	r3, [pc, #64]	; (5610 <_usb_device_interrupt_handler+0x550>)
    55d0:	681a      	ldr	r2, [r3, #0]
    55d2:	230b      	movs	r3, #11
    55d4:	18fb      	adds	r3, r7, r3
    55d6:	781b      	ldrb	r3, [r3, #0]
    55d8:	330d      	adds	r3, #13
    55da:	011b      	lsls	r3, r3, #4
    55dc:	18d3      	adds	r3, r2, r3
    55de:	685a      	ldr	r2, [r3, #4]
    55e0:	4b0b      	ldr	r3, [pc, #44]	; (5610 <_usb_device_interrupt_handler+0x550>)
    55e2:	6819      	ldr	r1, [r3, #0]
    55e4:	4b0c      	ldr	r3, [pc, #48]	; (5618 <_usb_device_interrupt_handler+0x558>)
    55e6:	1c08      	adds	r0, r1, #0
    55e8:	1c19      	adds	r1, r3, #0
    55ea:	4790      	blx	r2
					}
					return;
    55ec:	e00d      	b.n	560a <_usb_device_interrupt_handler+0x54a>
    55ee:	e00c      	b.n	560a <_usb_device_interrupt_handler+0x54a>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    55f0:	230b      	movs	r3, #11
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	781a      	ldrb	r2, [r3, #0]
    55f6:	230b      	movs	r3, #11
    55f8:	18fb      	adds	r3, r7, r3
    55fa:	3201      	adds	r2, #1
    55fc:	701a      	strb	r2, [r3, #0]
    55fe:	230b      	movs	r3, #11
    5600:	18fb      	adds	r3, r7, r3
    5602:	781b      	ldrb	r3, [r3, #0]
    5604:	2b07      	cmp	r3, #7
    5606:	d800      	bhi.n	560a <_usb_device_interrupt_handler+0x54a>
    5608:	e5c7      	b.n	519a <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    560a:	46bd      	mov	sp, r7
    560c:	b004      	add	sp, #16
    560e:	bd80      	pop	{r7, pc}
    5610:	20000130 	.word	0x20000130
    5614:	20002f70 	.word	0x20002f70
    5618:	20000140 	.word	0x20000140

0000561c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    561c:	b580      	push	{r7, lr}
    561e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5620:	4b07      	ldr	r3, [pc, #28]	; (5640 <USB_Handler+0x24>)
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	781b      	ldrb	r3, [r3, #0]
    5628:	b2db      	uxtb	r3, r3
    562a:	09db      	lsrs	r3, r3, #7
    562c:	b2db      	uxtb	r3, r3
    562e:	2b00      	cmp	r3, #0
    5630:	d002      	beq.n	5638 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    5632:	4b04      	ldr	r3, [pc, #16]	; (5644 <USB_Handler+0x28>)
    5634:	4798      	blx	r3
    5636:	e001      	b.n	563c <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    5638:	4b03      	ldr	r3, [pc, #12]	; (5648 <USB_Handler+0x2c>)
    563a:	4798      	blx	r3
	}
}
    563c:	46bd      	mov	sp, r7
    563e:	bd80      	pop	{r7, pc}
    5640:	20000130 	.word	0x20000130
    5644:	00004bf9 	.word	0x00004bf9
    5648:	000050c1 	.word	0x000050c1

0000564c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    564c:	b580      	push	{r7, lr}
    564e:	b082      	sub	sp, #8
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	2280      	movs	r2, #128	; 0x80
    5658:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	2200      	movs	r2, #0
    565e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	2201      	movs	r2, #1
    5664:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	2200      	movs	r2, #0
    566a:	70da      	strb	r2, [r3, #3]
}
    566c:	46bd      	mov	sp, r7
    566e:	b002      	add	sp, #8
    5670:	bd80      	pop	{r7, pc}
    5672:	46c0      	nop			; (mov r8, r8)

00005674 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5674:	b580      	push	{r7, lr}
    5676:	b084      	sub	sp, #16
    5678:	af00      	add	r7, sp, #0
    567a:	1c02      	adds	r2, r0, #0
    567c:	1dfb      	adds	r3, r7, #7
    567e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5680:	230f      	movs	r3, #15
    5682:	18fb      	adds	r3, r7, r3
    5684:	1dfa      	adds	r2, r7, #7
    5686:	7812      	ldrb	r2, [r2, #0]
    5688:	09d2      	lsrs	r2, r2, #7
    568a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    568c:	230e      	movs	r3, #14
    568e:	18fb      	adds	r3, r7, r3
    5690:	1dfa      	adds	r2, r7, #7
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	0952      	lsrs	r2, r2, #5
    5696:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5698:	4b0d      	ldr	r3, [pc, #52]	; (56d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    569a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    569c:	230f      	movs	r3, #15
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781b      	ldrb	r3, [r3, #0]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d10f      	bne.n	56c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    56a6:	230f      	movs	r3, #15
    56a8:	18fb      	adds	r3, r7, r3
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	009b      	lsls	r3, r3, #2
    56ae:	2210      	movs	r2, #16
    56b0:	4694      	mov	ip, r2
    56b2:	44bc      	add	ip, r7
    56b4:	4463      	add	r3, ip
    56b6:	3b08      	subs	r3, #8
    56b8:	681a      	ldr	r2, [r3, #0]
    56ba:	230e      	movs	r3, #14
    56bc:	18fb      	adds	r3, r7, r3
    56be:	781b      	ldrb	r3, [r3, #0]
    56c0:	01db      	lsls	r3, r3, #7
    56c2:	18d3      	adds	r3, r2, r3
    56c4:	e000      	b.n	56c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    56c6:	2300      	movs	r3, #0
	}
}
    56c8:	1c18      	adds	r0, r3, #0
    56ca:	46bd      	mov	sp, r7
    56cc:	b004      	add	sp, #16
    56ce:	bd80      	pop	{r7, pc}
    56d0:	41004400 	.word	0x41004400

000056d4 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    56d4:	b580      	push	{r7, lr}
    56d6:	b086      	sub	sp, #24
    56d8:	af00      	add	r7, sp, #0
    56da:	1c02      	adds	r2, r0, #0
    56dc:	1dfb      	adds	r3, r7, #7
    56de:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    56e0:	1dfb      	adds	r3, r7, #7
    56e2:	781b      	ldrb	r3, [r3, #0]
    56e4:	1c18      	adds	r0, r3, #0
    56e6:	4b19      	ldr	r3, [pc, #100]	; (574c <system_pinmux_pin_get_mux_position+0x78>)
    56e8:	4798      	blx	r3
    56ea:	1c03      	adds	r3, r0, #0
    56ec:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    56ee:	1dfb      	adds	r3, r7, #7
    56f0:	781b      	ldrb	r3, [r3, #0]
    56f2:	221f      	movs	r2, #31
    56f4:	4013      	ands	r3, r2
    56f6:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    56f8:	697a      	ldr	r2, [r7, #20]
    56fa:	2140      	movs	r1, #64	; 0x40
    56fc:	693b      	ldr	r3, [r7, #16]
    56fe:	18d3      	adds	r3, r2, r3
    5700:	185b      	adds	r3, r3, r1
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	b2db      	uxtb	r3, r3
    5706:	1c1a      	adds	r2, r3, #0
    5708:	2301      	movs	r3, #1
    570a:	4013      	ands	r3, r2
    570c:	d101      	bne.n	5712 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    570e:	2380      	movs	r3, #128	; 0x80
    5710:	e017      	b.n	5742 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5712:	693b      	ldr	r3, [r7, #16]
    5714:	085b      	lsrs	r3, r3, #1
    5716:	697a      	ldr	r2, [r7, #20]
    5718:	2130      	movs	r1, #48	; 0x30
    571a:	18d3      	adds	r3, r2, r3
    571c:	185b      	adds	r3, r3, r1
    571e:	781b      	ldrb	r3, [r3, #0]
    5720:	b2db      	uxtb	r3, r3
    5722:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    5724:	693b      	ldr	r3, [r7, #16]
    5726:	2201      	movs	r2, #1
    5728:	4013      	ands	r3, r2
    572a:	d005      	beq.n	5738 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    572c:	68fb      	ldr	r3, [r7, #12]
    572e:	22f0      	movs	r2, #240	; 0xf0
    5730:	4013      	ands	r3, r2
    5732:	091b      	lsrs	r3, r3, #4
    5734:	b2db      	uxtb	r3, r3
    5736:	e004      	b.n	5742 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5738:	68fb      	ldr	r3, [r7, #12]
    573a:	b2db      	uxtb	r3, r3
    573c:	220f      	movs	r2, #15
    573e:	4013      	ands	r3, r2
    5740:	b2db      	uxtb	r3, r3
	}
}
    5742:	1c18      	adds	r0, r3, #0
    5744:	46bd      	mov	sp, r7
    5746:	b006      	add	sp, #24
    5748:	bd80      	pop	{r7, pc}
    574a:	46c0      	nop			; (mov r8, r8)
    574c:	00005675 	.word	0x00005675

00005750 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5750:	b580      	push	{r7, lr}
    5752:	b082      	sub	sp, #8
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	2200      	movs	r2, #0
    575c:	701a      	strb	r2, [r3, #0]
}
    575e:	46bd      	mov	sp, r7
    5760:	b002      	add	sp, #8
    5762:	bd80      	pop	{r7, pc}

00005764 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	1c02      	adds	r2, r0, #0
    576c:	6039      	str	r1, [r7, #0]
    576e:	1dfb      	adds	r3, r7, #7
    5770:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5772:	1dfb      	adds	r3, r7, #7
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	2b01      	cmp	r3, #1
    5778:	d00a      	beq.n	5790 <system_apb_clock_set_mask+0x2c>
    577a:	2b02      	cmp	r3, #2
    577c:	d00f      	beq.n	579e <system_apb_clock_set_mask+0x3a>
    577e:	2b00      	cmp	r3, #0
    5780:	d114      	bne.n	57ac <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5782:	4b0e      	ldr	r3, [pc, #56]	; (57bc <system_apb_clock_set_mask+0x58>)
    5784:	4a0d      	ldr	r2, [pc, #52]	; (57bc <system_apb_clock_set_mask+0x58>)
    5786:	6991      	ldr	r1, [r2, #24]
    5788:	683a      	ldr	r2, [r7, #0]
    578a:	430a      	orrs	r2, r1
    578c:	619a      	str	r2, [r3, #24]
			break;
    578e:	e00f      	b.n	57b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5790:	4b0a      	ldr	r3, [pc, #40]	; (57bc <system_apb_clock_set_mask+0x58>)
    5792:	4a0a      	ldr	r2, [pc, #40]	; (57bc <system_apb_clock_set_mask+0x58>)
    5794:	69d1      	ldr	r1, [r2, #28]
    5796:	683a      	ldr	r2, [r7, #0]
    5798:	430a      	orrs	r2, r1
    579a:	61da      	str	r2, [r3, #28]
			break;
    579c:	e008      	b.n	57b0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    579e:	4b07      	ldr	r3, [pc, #28]	; (57bc <system_apb_clock_set_mask+0x58>)
    57a0:	4a06      	ldr	r2, [pc, #24]	; (57bc <system_apb_clock_set_mask+0x58>)
    57a2:	6a11      	ldr	r1, [r2, #32]
    57a4:	683a      	ldr	r2, [r7, #0]
    57a6:	430a      	orrs	r2, r1
    57a8:	621a      	str	r2, [r3, #32]
			break;
    57aa:	e001      	b.n	57b0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    57ac:	2317      	movs	r3, #23
    57ae:	e000      	b.n	57b2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    57b0:	2300      	movs	r3, #0
}
    57b2:	1c18      	adds	r0, r3, #0
    57b4:	46bd      	mov	sp, r7
    57b6:	b002      	add	sp, #8
    57b8:	bd80      	pop	{r7, pc}
    57ba:	46c0      	nop			; (mov r8, r8)
    57bc:	40000400 	.word	0x40000400

000057c0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    57c0:	b580      	push	{r7, lr}
    57c2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    57c4:	4b05      	ldr	r3, [pc, #20]	; (57dc <system_is_debugger_present+0x1c>)
    57c6:	789b      	ldrb	r3, [r3, #2]
    57c8:	b2db      	uxtb	r3, r3
    57ca:	1c1a      	adds	r2, r3, #0
    57cc:	2302      	movs	r3, #2
    57ce:	4013      	ands	r3, r2
    57d0:	1e5a      	subs	r2, r3, #1
    57d2:	4193      	sbcs	r3, r2
    57d4:	b2db      	uxtb	r3, r3
}
    57d6:	1c18      	adds	r0, r3, #0
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}
    57dc:	41002000 	.word	0x41002000

000057e0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    57e0:	b580      	push	{r7, lr}
    57e2:	b084      	sub	sp, #16
    57e4:	af00      	add	r7, sp, #0
    57e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57ee:	68fb      	ldr	r3, [r7, #12]
    57f0:	7e1b      	ldrb	r3, [r3, #24]
    57f2:	b2db      	uxtb	r3, r3
    57f4:	1c1a      	adds	r2, r3, #0
    57f6:	2301      	movs	r3, #1
    57f8:	4013      	ands	r3, r2
    57fa:	1e5a      	subs	r2, r3, #1
    57fc:	4193      	sbcs	r3, r2
    57fe:	b2db      	uxtb	r3, r3
}
    5800:	1c18      	adds	r0, r3, #0
    5802:	46bd      	mov	sp, r7
    5804:	b004      	add	sp, #16
    5806:	bd80      	pop	{r7, pc}

00005808 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    5808:	b580      	push	{r7, lr}
    580a:	b084      	sub	sp, #16
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	681b      	ldr	r3, [r3, #0]
    5814:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5816:	68fb      	ldr	r3, [r7, #12]
    5818:	7e1b      	ldrb	r3, [r3, #24]
    581a:	b2db      	uxtb	r3, r3
    581c:	1c1a      	adds	r2, r3, #0
    581e:	2304      	movs	r3, #4
    5820:	4013      	ands	r3, r2
    5822:	1e5a      	subs	r2, r3, #1
    5824:	4193      	sbcs	r3, r2
    5826:	b2db      	uxtb	r3, r3
}
    5828:	1c18      	adds	r0, r3, #0
    582a:	46bd      	mov	sp, r7
    582c:	b004      	add	sp, #16
    582e:	bd80      	pop	{r7, pc}

00005830 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    5830:	b580      	push	{r7, lr}
    5832:	b084      	sub	sp, #16
    5834:	af00      	add	r7, sp, #0
    5836:	6078      	str	r0, [r7, #4]
    5838:	1c0a      	adds	r2, r1, #0
    583a:	1cbb      	adds	r3, r7, #2
    583c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	1c18      	adds	r0, r3, #0
    5848:	4b0a      	ldr	r3, [pc, #40]	; (5874 <spi_write+0x44>)
    584a:	4798      	blx	r3
    584c:	1c03      	adds	r3, r0, #0
    584e:	1c1a      	adds	r2, r3, #0
    5850:	2301      	movs	r3, #1
    5852:	4053      	eors	r3, r2
    5854:	b2db      	uxtb	r3, r3
    5856:	2b00      	cmp	r3, #0
    5858:	d001      	beq.n	585e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    585a:	2305      	movs	r3, #5
    585c:	e006      	b.n	586c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    585e:	1cbb      	adds	r3, r7, #2
    5860:	881b      	ldrh	r3, [r3, #0]
    5862:	05db      	lsls	r3, r3, #23
    5864:	0dda      	lsrs	r2, r3, #23
    5866:	68fb      	ldr	r3, [r7, #12]
    5868:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    586a:	2300      	movs	r3, #0
}
    586c:	1c18      	adds	r0, r3, #0
    586e:	46bd      	mov	sp, r7
    5870:	b004      	add	sp, #16
    5872:	bd80      	pop	{r7, pc}
    5874:	000057e1 	.word	0x000057e1

00005878 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    5878:	b580      	push	{r7, lr}
    587a:	b084      	sub	sp, #16
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
    5880:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	1c18      	adds	r0, r3, #0
    588c:	4b1d      	ldr	r3, [pc, #116]	; (5904 <spi_read+0x8c>)
    588e:	4798      	blx	r3
    5890:	1c03      	adds	r3, r0, #0
    5892:	1c1a      	adds	r2, r3, #0
    5894:	2301      	movs	r3, #1
    5896:	4053      	eors	r3, r2
    5898:	b2db      	uxtb	r3, r3
    589a:	2b00      	cmp	r3, #0
    589c:	d001      	beq.n	58a2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    589e:	2310      	movs	r3, #16
    58a0:	e02c      	b.n	58fc <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    58a2:	230f      	movs	r3, #15
    58a4:	18fb      	adds	r3, r7, r3
    58a6:	2200      	movs	r2, #0
    58a8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    58aa:	68bb      	ldr	r3, [r7, #8]
    58ac:	8b5b      	ldrh	r3, [r3, #26]
    58ae:	b29b      	uxth	r3, r3
    58b0:	1c1a      	adds	r2, r3, #0
    58b2:	2304      	movs	r3, #4
    58b4:	4013      	ands	r3, r2
    58b6:	d00b      	beq.n	58d0 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    58b8:	230f      	movs	r3, #15
    58ba:	18fb      	adds	r3, r7, r3
    58bc:	221e      	movs	r2, #30
    58be:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    58c0:	68bb      	ldr	r3, [r7, #8]
    58c2:	8b5b      	ldrh	r3, [r3, #26]
    58c4:	b29b      	uxth	r3, r3
    58c6:	2204      	movs	r2, #4
    58c8:	4313      	orrs	r3, r2
    58ca:	b29a      	uxth	r2, r3
    58cc:	68bb      	ldr	r3, [r7, #8]
    58ce:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	799b      	ldrb	r3, [r3, #6]
    58d4:	2b01      	cmp	r3, #1
    58d6:	d108      	bne.n	58ea <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    58d8:	68bb      	ldr	r3, [r7, #8]
    58da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58dc:	b29b      	uxth	r3, r3
    58de:	05db      	lsls	r3, r3, #23
    58e0:	0ddb      	lsrs	r3, r3, #23
    58e2:	b29a      	uxth	r2, r3
    58e4:	683b      	ldr	r3, [r7, #0]
    58e6:	801a      	strh	r2, [r3, #0]
    58e8:	e005      	b.n	58f6 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    58ea:	68bb      	ldr	r3, [r7, #8]
    58ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58ee:	b2db      	uxtb	r3, r3
    58f0:	b29a      	uxth	r2, r3
    58f2:	683b      	ldr	r3, [r7, #0]
    58f4:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    58f6:	230f      	movs	r3, #15
    58f8:	18fb      	adds	r3, r7, r3
    58fa:	781b      	ldrb	r3, [r3, #0]
}
    58fc:	1c18      	adds	r0, r3, #0
    58fe:	46bd      	mov	sp, r7
    5900:	b004      	add	sp, #16
    5902:	bd80      	pop	{r7, pc}
    5904:	00005809 	.word	0x00005809

00005908 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    5908:	b590      	push	{r4, r7, lr}
    590a:	b093      	sub	sp, #76	; 0x4c
    590c:	af00      	add	r7, sp, #0
    590e:	6078      	str	r0, [r7, #4]
    5910:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    591e:	231c      	movs	r3, #28
    5920:	18fb      	adds	r3, r7, r3
    5922:	1c18      	adds	r0, r3, #0
    5924:	4b86      	ldr	r3, [pc, #536]	; (5b40 <_spi_set_config+0x238>)
    5926:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5928:	231c      	movs	r3, #28
    592a:	18fb      	adds	r3, r7, r3
    592c:	2200      	movs	r2, #0
    592e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    5930:	683b      	ldr	r3, [r7, #0]
    5932:	781b      	ldrb	r3, [r3, #0]
    5934:	2b00      	cmp	r3, #0
    5936:	d103      	bne.n	5940 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5938:	231c      	movs	r3, #28
    593a:	18fb      	adds	r3, r7, r3
    593c:	2200      	movs	r2, #0
    593e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5940:	683b      	ldr	r3, [r7, #0]
    5942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    5944:	230c      	movs	r3, #12
    5946:	18fb      	adds	r3, r7, r3
    5948:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    594a:	683b      	ldr	r3, [r7, #0]
    594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    594e:	230c      	movs	r3, #12
    5950:	18fb      	adds	r3, r7, r3
    5952:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5954:	683b      	ldr	r3, [r7, #0]
    5956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    5958:	230c      	movs	r3, #12
    595a:	18fb      	adds	r3, r7, r3
    595c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    595e:	683b      	ldr	r3, [r7, #0]
    5960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    5962:	230c      	movs	r3, #12
    5964:	18fb      	adds	r3, r7, r3
    5966:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5968:	2347      	movs	r3, #71	; 0x47
    596a:	18fb      	adds	r3, r7, r3
    596c:	2200      	movs	r2, #0
    596e:	701a      	strb	r2, [r3, #0]
    5970:	e02c      	b.n	59cc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5972:	2347      	movs	r3, #71	; 0x47
    5974:	18fb      	adds	r3, r7, r3
    5976:	781a      	ldrb	r2, [r3, #0]
    5978:	230c      	movs	r3, #12
    597a:	18fb      	adds	r3, r7, r3
    597c:	0092      	lsls	r2, r2, #2
    597e:	58d3      	ldr	r3, [r2, r3]
    5980:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5984:	2b00      	cmp	r3, #0
    5986:	d109      	bne.n	599c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    598a:	2347      	movs	r3, #71	; 0x47
    598c:	18fb      	adds	r3, r7, r3
    598e:	781b      	ldrb	r3, [r3, #0]
    5990:	1c10      	adds	r0, r2, #0
    5992:	1c19      	adds	r1, r3, #0
    5994:	4b6b      	ldr	r3, [pc, #428]	; (5b44 <_spi_set_config+0x23c>)
    5996:	4798      	blx	r3
    5998:	1c03      	adds	r3, r0, #0
    599a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    599e:	3301      	adds	r3, #1
    59a0:	d00d      	beq.n	59be <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    59a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    59a4:	b2da      	uxtb	r2, r3
    59a6:	231c      	movs	r3, #28
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    59ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    59ae:	0c1b      	lsrs	r3, r3, #16
    59b0:	b2da      	uxtb	r2, r3
    59b2:	231c      	movs	r3, #28
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	1c10      	adds	r0, r2, #0
    59b8:	1c19      	adds	r1, r3, #0
    59ba:	4b63      	ldr	r3, [pc, #396]	; (5b48 <_spi_set_config+0x240>)
    59bc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    59be:	2347      	movs	r3, #71	; 0x47
    59c0:	18fb      	adds	r3, r7, r3
    59c2:	781a      	ldrb	r2, [r3, #0]
    59c4:	2347      	movs	r3, #71	; 0x47
    59c6:	18fb      	adds	r3, r7, r3
    59c8:	3201      	adds	r2, #1
    59ca:	701a      	strb	r2, [r3, #0]
    59cc:	2347      	movs	r3, #71	; 0x47
    59ce:	18fb      	adds	r3, r7, r3
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	2b03      	cmp	r3, #3
    59d4:	d9cd      	bls.n	5972 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    59d6:	683b      	ldr	r3, [r7, #0]
    59d8:	781a      	ldrb	r2, [r3, #0]
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    59de:	683b      	ldr	r3, [r7, #0]
    59e0:	7c1a      	ldrb	r2, [r3, #16]
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    59e6:	683b      	ldr	r3, [r7, #0]
    59e8:	7c9a      	ldrb	r2, [r3, #18]
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    59ee:	683b      	ldr	r3, [r7, #0]
    59f0:	7d1a      	ldrb	r2, [r3, #20]
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    59f6:	230a      	movs	r3, #10
    59f8:	18fb      	adds	r3, r7, r3
    59fa:	2200      	movs	r2, #0
    59fc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    59fe:	2300      	movs	r3, #0
    5a00:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    5a02:	2300      	movs	r3, #0
    5a04:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    5a06:	683b      	ldr	r3, [r7, #0]
    5a08:	781b      	ldrb	r3, [r3, #0]
    5a0a:	2b01      	cmp	r3, #1
    5a0c:	d12b      	bne.n	5a66 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	1c18      	adds	r0, r3, #0
    5a14:	4b4d      	ldr	r3, [pc, #308]	; (5b4c <_spi_set_config+0x244>)
    5a16:	4798      	blx	r3
    5a18:	1c03      	adds	r3, r0, #0
    5a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5a1e:	3314      	adds	r3, #20
    5a20:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a24:	b2db      	uxtb	r3, r3
    5a26:	1c18      	adds	r0, r3, #0
    5a28:	4b49      	ldr	r3, [pc, #292]	; (5b50 <_spi_set_config+0x248>)
    5a2a:	4798      	blx	r3
    5a2c:	1c03      	adds	r3, r0, #0
    5a2e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    5a30:	683b      	ldr	r3, [r7, #0]
    5a32:	6999      	ldr	r1, [r3, #24]
    5a34:	2323      	movs	r3, #35	; 0x23
    5a36:	18fc      	adds	r4, r7, r3
    5a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a3a:	230a      	movs	r3, #10
    5a3c:	18fb      	adds	r3, r7, r3
    5a3e:	1c08      	adds	r0, r1, #0
    5a40:	1c11      	adds	r1, r2, #0
    5a42:	1c1a      	adds	r2, r3, #0
    5a44:	4b43      	ldr	r3, [pc, #268]	; (5b54 <_spi_set_config+0x24c>)
    5a46:	4798      	blx	r3
    5a48:	1c03      	adds	r3, r0, #0
    5a4a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    5a4c:	2323      	movs	r3, #35	; 0x23
    5a4e:	18fb      	adds	r3, r7, r3
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d001      	beq.n	5a5a <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    5a56:	2317      	movs	r3, #23
    5a58:	e06d      	b.n	5b36 <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    5a5a:	230a      	movs	r3, #10
    5a5c:	18fb      	adds	r3, r7, r3
    5a5e:	881b      	ldrh	r3, [r3, #0]
    5a60:	b2da      	uxtb	r2, r3
    5a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a64:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    5a66:	683b      	ldr	r3, [r7, #0]
    5a68:	781b      	ldrb	r3, [r3, #0]
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	d11a      	bne.n	5aa4 <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    5a6e:	683b      	ldr	r3, [r7, #0]
    5a70:	699b      	ldr	r3, [r3, #24]
    5a72:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    5a74:	683b      	ldr	r3, [r7, #0]
    5a76:	8b9b      	ldrh	r3, [r3, #28]
    5a78:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    5a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5a7e:	683a      	ldr	r2, [r7, #0]
    5a80:	7f92      	ldrb	r2, [r2, #30]
    5a82:	1c11      	adds	r1, r2, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5a84:	683a      	ldr	r2, [r7, #0]
    5a86:	7fd2      	ldrb	r2, [r2, #31]
    5a88:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5a8a:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    5a8c:	431a      	orrs	r2, r3
    5a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a90:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    5a92:	683b      	ldr	r3, [r7, #0]
    5a94:	2220      	movs	r2, #32
    5a96:	5c9b      	ldrb	r3, [r3, r2]
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d003      	beq.n	5aa4 <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5a9e:	2240      	movs	r2, #64	; 0x40
    5aa0:	4313      	orrs	r3, r2
    5aa2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    5aa4:	683b      	ldr	r3, [r7, #0]
    5aa6:	685b      	ldr	r3, [r3, #4]
    5aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5aaa:	4313      	orrs	r3, r2
    5aac:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    5aae:	683b      	ldr	r3, [r7, #0]
    5ab0:	689b      	ldr	r3, [r3, #8]
    5ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5ab4:	4313      	orrs	r3, r2
    5ab6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    5ab8:	683b      	ldr	r3, [r7, #0]
    5aba:	68db      	ldr	r3, [r3, #12]
    5abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5abe:	4313      	orrs	r3, r2
    5ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    5ac2:	683b      	ldr	r3, [r7, #0]
    5ac4:	7c1b      	ldrb	r3, [r3, #16]
    5ac6:	1c1a      	adds	r2, r3, #0
    5ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5aca:	4313      	orrs	r3, r2
    5acc:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5ace:	683b      	ldr	r3, [r7, #0]
    5ad0:	7c5b      	ldrb	r3, [r3, #17]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d103      	bne.n	5ade <_spi_set_config+0x1d6>
    5ad6:	4b20      	ldr	r3, [pc, #128]	; (5b58 <_spi_set_config+0x250>)
    5ad8:	4798      	blx	r3
    5ada:	1e03      	subs	r3, r0, #0
    5adc:	d003      	beq.n	5ae6 <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5ae0:	2280      	movs	r2, #128	; 0x80
    5ae2:	4313      	orrs	r3, r2
    5ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    5ae6:	683b      	ldr	r3, [r7, #0]
    5ae8:	7c9b      	ldrb	r3, [r3, #18]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d004      	beq.n	5af8 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5af0:	2280      	movs	r2, #128	; 0x80
    5af2:	0292      	lsls	r2, r2, #10
    5af4:	4313      	orrs	r3, r2
    5af6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    5af8:	683b      	ldr	r3, [r7, #0]
    5afa:	7cdb      	ldrb	r3, [r3, #19]
    5afc:	2b00      	cmp	r3, #0
    5afe:	d004      	beq.n	5b0a <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5b02:	2280      	movs	r2, #128	; 0x80
    5b04:	0092      	lsls	r2, r2, #2
    5b06:	4313      	orrs	r3, r2
    5b08:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    5b0a:	683b      	ldr	r3, [r7, #0]
    5b0c:	7d1b      	ldrb	r3, [r3, #20]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d004      	beq.n	5b1c <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5b14:	2280      	movs	r2, #128	; 0x80
    5b16:	0192      	lsls	r2, r2, #6
    5b18:	4313      	orrs	r3, r2
    5b1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    5b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5b1e:	681a      	ldr	r2, [r3, #0]
    5b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b22:	431a      	orrs	r2, r3
    5b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5b26:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    5b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5b2a:	685a      	ldr	r2, [r3, #4]
    5b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5b2e:	431a      	orrs	r2, r3
    5b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5b32:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    5b34:	2300      	movs	r3, #0
}
    5b36:	1c18      	adds	r0, r3, #0
    5b38:	46bd      	mov	sp, r7
    5b3a:	b013      	add	sp, #76	; 0x4c
    5b3c:	bd90      	pop	{r4, r7, pc}
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	0000564d 	.word	0x0000564d
    5b44:	00001701 	.word	0x00001701
    5b48:	00007189 	.word	0x00007189
    5b4c:	000018bd 	.word	0x000018bd
    5b50:	00006fc1 	.word	0x00006fc1
    5b54:	000015f9 	.word	0x000015f9
    5b58:	000057c1 	.word	0x000057c1

00005b5c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    5b5c:	b590      	push	{r4, r7, lr}
    5b5e:	b091      	sub	sp, #68	; 0x44
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
    5b64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	681b      	ldr	r3, [r3, #0]
    5b70:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    5b72:	683b      	ldr	r3, [r7, #0]
    5b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    5b76:	230c      	movs	r3, #12
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    5b7c:	683b      	ldr	r3, [r7, #0]
    5b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    5b80:	230c      	movs	r3, #12
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    5b86:	683b      	ldr	r3, [r7, #0]
    5b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    5b8a:	230c      	movs	r3, #12
    5b8c:	18fb      	adds	r3, r7, r3
    5b8e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    5b90:	683b      	ldr	r3, [r7, #0]
    5b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    5b94:	230c      	movs	r3, #12
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5b9a:	233f      	movs	r3, #63	; 0x3f
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	2200      	movs	r2, #0
    5ba0:	701a      	strb	r2, [r3, #0]
    5ba2:	e030      	b.n	5c06 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5ba4:	233f      	movs	r3, #63	; 0x3f
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	781a      	ldrb	r2, [r3, #0]
    5baa:	230c      	movs	r3, #12
    5bac:	18fb      	adds	r3, r7, r3
    5bae:	0092      	lsls	r2, r2, #2
    5bb0:	58d3      	ldr	r3, [r2, r3]
    5bb2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    5bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d109      	bne.n	5bce <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5bbc:	233f      	movs	r3, #63	; 0x3f
    5bbe:	18fb      	adds	r3, r7, r3
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	1c10      	adds	r0, r2, #0
    5bc4:	1c19      	adds	r1, r3, #0
    5bc6:	4b6f      	ldr	r3, [pc, #444]	; (5d84 <_spi_check_config+0x228>)
    5bc8:	4798      	blx	r3
    5bca:	1c03      	adds	r3, r0, #0
    5bcc:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    5bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bd0:	3301      	adds	r3, #1
    5bd2:	d100      	bne.n	5bd6 <_spi_check_config+0x7a>
			continue;
    5bd4:	e010      	b.n	5bf8 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
    5bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bd8:	041b      	lsls	r3, r3, #16
    5bda:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bde:	0c1b      	lsrs	r3, r3, #16
    5be0:	b2db      	uxtb	r3, r3
    5be2:	1c18      	adds	r0, r3, #0
    5be4:	4b68      	ldr	r3, [pc, #416]	; (5d88 <_spi_check_config+0x22c>)
    5be6:	4798      	blx	r3
    5be8:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    5bea:	429c      	cmp	r4, r3
    5bec:	d004      	beq.n	5bf8 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	2200      	movs	r2, #0
    5bf2:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    5bf4:	231c      	movs	r3, #28
    5bf6:	e0c0      	b.n	5d7a <_spi_check_config+0x21e>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5bf8:	233f      	movs	r3, #63	; 0x3f
    5bfa:	18fb      	adds	r3, r7, r3
    5bfc:	781a      	ldrb	r2, [r3, #0]
    5bfe:	233f      	movs	r3, #63	; 0x3f
    5c00:	18fb      	adds	r3, r7, r3
    5c02:	3201      	adds	r2, #1
    5c04:	701a      	strb	r2, [r3, #0]
    5c06:	233f      	movs	r3, #63	; 0x3f
    5c08:	18fb      	adds	r3, r7, r3
    5c0a:	781b      	ldrb	r3, [r3, #0]
    5c0c:	2b03      	cmp	r3, #3
    5c0e:	d9c9      	bls.n	5ba4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5c10:	2013      	movs	r0, #19
    5c12:	4b5e      	ldr	r3, [pc, #376]	; (5d8c <_spi_check_config+0x230>)
    5c14:	4798      	blx	r3
    5c16:	1c03      	adds	r3, r0, #0
    5c18:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    5c1a:	2300      	movs	r3, #0
    5c1c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    5c1e:	2300      	movs	r3, #0
    5c20:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    5c22:	2300      	movs	r3, #0
    5c24:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    5c26:	683b      	ldr	r3, [r7, #0]
    5c28:	781b      	ldrb	r3, [r3, #0]
    5c2a:	2b01      	cmp	r3, #1
    5c2c:	d123      	bne.n	5c76 <_spi_check_config+0x11a>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5c2e:	683b      	ldr	r3, [r7, #0]
    5c30:	6999      	ldr	r1, [r3, #24]
    5c32:	231f      	movs	r3, #31
    5c34:	18fc      	adds	r4, r7, r3
    5c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c38:	230a      	movs	r3, #10
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	1c08      	adds	r0, r1, #0
    5c3e:	1c11      	adds	r1, r2, #0
    5c40:	1c1a      	adds	r2, r3, #0
    5c42:	4b53      	ldr	r3, [pc, #332]	; (5d90 <_spi_check_config+0x234>)
    5c44:	4798      	blx	r3
    5c46:	1c03      	adds	r3, r0, #0
    5c48:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    5c4a:	231f      	movs	r3, #31
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	2b00      	cmp	r3, #0
    5c52:	d001      	beq.n	5c58 <_spi_check_config+0xfc>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    5c54:	2317      	movs	r3, #23
    5c56:	e090      	b.n	5d7a <_spi_check_config+0x21e>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5c5a:	7b1b      	ldrb	r3, [r3, #12]
    5c5c:	b2da      	uxtb	r2, r3
    5c5e:	230a      	movs	r3, #10
    5c60:	18fb      	adds	r3, r7, r3
    5c62:	881b      	ldrh	r3, [r3, #0]
    5c64:	b2db      	uxtb	r3, r3
    5c66:	429a      	cmp	r2, r3
    5c68:	d001      	beq.n	5c6e <_spi_check_config+0x112>
			return STATUS_ERR_DENIED;
    5c6a:	231c      	movs	r3, #28
    5c6c:	e085      	b.n	5d7a <_spi_check_config+0x21e>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5c70:	220c      	movs	r2, #12
    5c72:	4313      	orrs	r3, r2
    5c74:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    5c76:	683b      	ldr	r3, [r7, #0]
    5c78:	781b      	ldrb	r3, [r3, #0]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d129      	bne.n	5cd2 <_spi_check_config+0x176>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	699b      	ldr	r3, [r3, #24]
    5c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5c84:	4313      	orrs	r3, r2
    5c86:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    5c88:	683b      	ldr	r3, [r7, #0]
    5c8a:	8b9b      	ldrh	r3, [r3, #28]
    5c8c:	1c1a      	adds	r2, r3, #0
    5c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c90:	4313      	orrs	r3, r2
    5c92:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5c94:	683b      	ldr	r3, [r7, #0]
    5c96:	7f9b      	ldrb	r3, [r3, #30]
    5c98:	1c1a      	adds	r2, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5c9a:	683b      	ldr	r3, [r7, #0]
    5c9c:	7fdb      	ldrb	r3, [r3, #31]
    5c9e:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5ca0:	4313      	orrs	r3, r2
    5ca2:	1c1a      	adds	r2, r3, #0
    5ca4:	6a3b      	ldr	r3, [r7, #32]
    5ca6:	4313      	orrs	r3, r2
    5ca8:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    5caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5cac:	681a      	ldr	r2, [r3, #0]
    5cae:	6a3b      	ldr	r3, [r7, #32]
    5cb0:	429a      	cmp	r2, r3
    5cb2:	d001      	beq.n	5cb8 <_spi_check_config+0x15c>
			return STATUS_ERR_DENIED;
    5cb4:	231c      	movs	r3, #28
    5cb6:	e060      	b.n	5d7a <_spi_check_config+0x21e>
		}

		if (config->mode_specific.slave.preload_enable) {
    5cb8:	683b      	ldr	r3, [r7, #0]
    5cba:	2220      	movs	r2, #32
    5cbc:	5c9b      	ldrb	r3, [r3, r2]
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d003      	beq.n	5cca <_spi_check_config+0x16e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cc4:	2240      	movs	r2, #64	; 0x40
    5cc6:	4313      	orrs	r3, r2
    5cc8:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5ccc:	2208      	movs	r2, #8
    5cce:	4313      	orrs	r3, r2
    5cd0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    5cd2:	683b      	ldr	r3, [r7, #0]
    5cd4:	685b      	ldr	r3, [r3, #4]
    5cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5cd8:	4313      	orrs	r3, r2
    5cda:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    5cdc:	683b      	ldr	r3, [r7, #0]
    5cde:	689b      	ldr	r3, [r3, #8]
    5ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5ce2:	4313      	orrs	r3, r2
    5ce4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    5ce6:	683b      	ldr	r3, [r7, #0]
    5ce8:	68db      	ldr	r3, [r3, #12]
    5cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5cec:	4313      	orrs	r3, r2
    5cee:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    5cf0:	683b      	ldr	r3, [r7, #0]
    5cf2:	7c1b      	ldrb	r3, [r3, #16]
    5cf4:	1c1a      	adds	r2, r3, #0
    5cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cf8:	4313      	orrs	r3, r2
    5cfa:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    5cfc:	683b      	ldr	r3, [r7, #0]
    5cfe:	7c5b      	ldrb	r3, [r3, #17]
    5d00:	2b00      	cmp	r3, #0
    5d02:	d003      	beq.n	5d0c <_spi_check_config+0x1b0>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d06:	2280      	movs	r2, #128	; 0x80
    5d08:	4313      	orrs	r3, r2
    5d0a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    5d0c:	683b      	ldr	r3, [r7, #0]
    5d0e:	7c9b      	ldrb	r3, [r3, #18]
    5d10:	2b00      	cmp	r3, #0
    5d12:	d004      	beq.n	5d1e <_spi_check_config+0x1c2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d16:	2280      	movs	r2, #128	; 0x80
    5d18:	0292      	lsls	r2, r2, #10
    5d1a:	4313      	orrs	r3, r2
    5d1c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    5d1e:	683b      	ldr	r3, [r7, #0]
    5d20:	7cdb      	ldrb	r3, [r3, #19]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d004      	beq.n	5d30 <_spi_check_config+0x1d4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d28:	2280      	movs	r2, #128	; 0x80
    5d2a:	0092      	lsls	r2, r2, #2
    5d2c:	4313      	orrs	r3, r2
    5d2e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    5d30:	683b      	ldr	r3, [r7, #0]
    5d32:	7d1b      	ldrb	r3, [r3, #20]
    5d34:	2b00      	cmp	r3, #0
    5d36:	d004      	beq.n	5d42 <_spi_check_config+0x1e6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d3a:	2280      	movs	r2, #128	; 0x80
    5d3c:	0192      	lsls	r2, r2, #6
    5d3e:	4313      	orrs	r3, r2
    5d40:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d44:	2202      	movs	r2, #2
    5d46:	4313      	orrs	r3, r2
    5d48:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    5d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d4c:	681a      	ldr	r2, [r3, #0]
    5d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d50:	429a      	cmp	r2, r3
    5d52:	d10e      	bne.n	5d72 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
    5d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d56:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    5d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d109      	bne.n	5d72 <_spi_check_config+0x216>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	781a      	ldrb	r2, [r3, #0]
    5d62:	687b      	ldr	r3, [r7, #4]
    5d64:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    5d66:	683b      	ldr	r3, [r7, #0]
    5d68:	7c1a      	ldrb	r2, [r3, #16]
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    5d6e:	2300      	movs	r3, #0
    5d70:	e003      	b.n	5d7a <_spi_check_config+0x21e>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	2200      	movs	r2, #0
    5d76:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    5d78:	231c      	movs	r3, #28
}
    5d7a:	1c18      	adds	r0, r3, #0
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b011      	add	sp, #68	; 0x44
    5d80:	bd90      	pop	{r4, r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	00001701 	.word	0x00001701
    5d88:	000056d5 	.word	0x000056d5
    5d8c:	00006fc1 	.word	0x00006fc1
    5d90:	000015f9 	.word	0x000015f9

00005d94 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	b08a      	sub	sp, #40	; 0x28
    5d98:	af00      	add	r7, sp, #0
    5d9a:	60f8      	str	r0, [r7, #12]
    5d9c:	60b9      	str	r1, [r7, #8]
    5d9e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5da0:	68fb      	ldr	r3, [r7, #12]
    5da2:	68ba      	ldr	r2, [r7, #8]
    5da4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    5da6:	68fb      	ldr	r3, [r7, #12]
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	2202      	movs	r2, #2
    5db2:	4013      	ands	r3, r2
    5db4:	d007      	beq.n	5dc6 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    5db6:	68fa      	ldr	r2, [r7, #12]
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	1c10      	adds	r0, r2, #0
    5dbc:	1c19      	adds	r1, r3, #0
    5dbe:	4b2f      	ldr	r3, [pc, #188]	; (5e7c <spi_init+0xe8>)
    5dc0:	4798      	blx	r3
    5dc2:	1c03      	adds	r3, r0, #0
    5dc4:	e055      	b.n	5e72 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dc8:	681b      	ldr	r3, [r3, #0]
    5dca:	2201      	movs	r2, #1
    5dcc:	4013      	ands	r3, r2
    5dce:	d001      	beq.n	5dd4 <spi_init+0x40>
		return STATUS_BUSY;
    5dd0:	2305      	movs	r3, #5
    5dd2:	e04e      	b.n	5e72 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5dd4:	68fb      	ldr	r3, [r7, #12]
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	1c18      	adds	r0, r3, #0
    5dda:	4b29      	ldr	r3, [pc, #164]	; (5e80 <spi_init+0xec>)
    5ddc:	4798      	blx	r3
    5dde:	1c03      	adds	r3, r0, #0
    5de0:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5de2:	6a3b      	ldr	r3, [r7, #32]
    5de4:	3302      	adds	r3, #2
    5de6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5de8:	6a3b      	ldr	r3, [r7, #32]
    5dea:	3314      	adds	r3, #20
    5dec:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5dee:	69fb      	ldr	r3, [r7, #28]
    5df0:	2201      	movs	r2, #1
    5df2:	409a      	lsls	r2, r3
    5df4:	1c13      	adds	r3, r2, #0
    5df6:	2002      	movs	r0, #2
    5df8:	1c19      	adds	r1, r3, #0
    5dfa:	4b22      	ldr	r3, [pc, #136]	; (5e84 <spi_init+0xf0>)
    5dfc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5dfe:	2314      	movs	r3, #20
    5e00:	18fb      	adds	r3, r7, r3
    5e02:	1c18      	adds	r0, r3, #0
    5e04:	4b20      	ldr	r3, [pc, #128]	; (5e88 <spi_init+0xf4>)
    5e06:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	2224      	movs	r2, #36	; 0x24
    5e0c:	5c9a      	ldrb	r2, [r3, r2]
    5e0e:	2314      	movs	r3, #20
    5e10:	18fb      	adds	r3, r7, r3
    5e12:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5e14:	69bb      	ldr	r3, [r7, #24]
    5e16:	b2da      	uxtb	r2, r3
    5e18:	2314      	movs	r3, #20
    5e1a:	18fb      	adds	r3, r7, r3
    5e1c:	1c10      	adds	r0, r2, #0
    5e1e:	1c19      	adds	r1, r3, #0
    5e20:	4b1a      	ldr	r3, [pc, #104]	; (5e8c <spi_init+0xf8>)
    5e22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5e24:	69bb      	ldr	r3, [r7, #24]
    5e26:	b2db      	uxtb	r3, r3
    5e28:	1c18      	adds	r0, r3, #0
    5e2a:	4b19      	ldr	r3, [pc, #100]	; (5e90 <spi_init+0xfc>)
    5e2c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	2224      	movs	r2, #36	; 0x24
    5e32:	5c9b      	ldrb	r3, [r3, r2]
    5e34:	1c18      	adds	r0, r3, #0
    5e36:	2100      	movs	r1, #0
    5e38:	4b16      	ldr	r3, [pc, #88]	; (5e94 <spi_init+0x100>)
    5e3a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	781b      	ldrb	r3, [r3, #0]
    5e40:	2b01      	cmp	r3, #1
    5e42:	d105      	bne.n	5e50 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e46:	681b      	ldr	r3, [r3, #0]
    5e48:	220c      	movs	r2, #12
    5e4a:	431a      	orrs	r2, r3
    5e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e4e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	2b00      	cmp	r3, #0
    5e56:	d105      	bne.n	5e64 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e5a:	681b      	ldr	r3, [r3, #0]
    5e5c:	2208      	movs	r2, #8
    5e5e:	431a      	orrs	r2, r3
    5e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e62:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    5e64:	68fa      	ldr	r2, [r7, #12]
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	1c10      	adds	r0, r2, #0
    5e6a:	1c19      	adds	r1, r3, #0
    5e6c:	4b0a      	ldr	r3, [pc, #40]	; (5e98 <spi_init+0x104>)
    5e6e:	4798      	blx	r3
    5e70:	1c03      	adds	r3, r0, #0
}
    5e72:	1c18      	adds	r0, r3, #0
    5e74:	46bd      	mov	sp, r7
    5e76:	b00a      	add	sp, #40	; 0x28
    5e78:	bd80      	pop	{r7, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	00005b5d 	.word	0x00005b5d
    5e80:	000018bd 	.word	0x000018bd
    5e84:	00005765 	.word	0x00005765
    5e88:	00005751 	.word	0x00005751
    5e8c:	00006e9d 	.word	0x00006e9d
    5e90:	00006ee1 	.word	0x00006ee1
    5e94:	00001675 	.word	0x00001675
    5e98:	00005909 	.word	0x00005909

00005e9c <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    5e9c:	b590      	push	{r4, r7, lr}
    5e9e:	b087      	sub	sp, #28
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	60f8      	str	r0, [r7, #12]
    5ea4:	607a      	str	r2, [r7, #4]
    5ea6:	230a      	movs	r3, #10
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	1c0a      	adds	r2, r1, #0
    5eac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    5eae:	68fb      	ldr	r3, [r7, #12]
    5eb0:	79db      	ldrb	r3, [r3, #7]
    5eb2:	2201      	movs	r2, #1
    5eb4:	4053      	eors	r3, r2
    5eb6:	b2db      	uxtb	r3, r3
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d001      	beq.n	5ec0 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    5ebc:	231c      	movs	r3, #28
    5ebe:	e07a      	b.n	5fb6 <spi_transceive_wait+0x11a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    5ec0:	2315      	movs	r3, #21
    5ec2:	18fb      	adds	r3, r7, r3
    5ec4:	2200      	movs	r2, #0
    5ec6:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    5ec8:	68fb      	ldr	r3, [r7, #12]
    5eca:	795b      	ldrb	r3, [r3, #5]
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d120      	bne.n	5f12 <spi_transceive_wait+0x76>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    5ed0:	2316      	movs	r3, #22
    5ed2:	18fb      	adds	r3, r7, r3
    5ed4:	2200      	movs	r2, #0
    5ed6:	801a      	strh	r2, [r3, #0]
    5ed8:	e015      	b.n	5f06 <spi_transceive_wait+0x6a>
			if (spi_is_ready_to_write(module)) {
    5eda:	68fb      	ldr	r3, [r7, #12]
    5edc:	1c18      	adds	r0, r3, #0
    5ede:	4b38      	ldr	r3, [pc, #224]	; (5fc0 <spi_transceive_wait+0x124>)
    5ee0:	4798      	blx	r3
    5ee2:	1e03      	subs	r3, r0, #0
    5ee4:	d000      	beq.n	5ee8 <spi_transceive_wait+0x4c>
				break;
    5ee6:	e014      	b.n	5f12 <spi_transceive_wait+0x76>
			} else if (j == SPI_TIMEOUT) {
    5ee8:	2316      	movs	r3, #22
    5eea:	18fb      	adds	r3, r7, r3
    5eec:	881b      	ldrh	r3, [r3, #0]
    5eee:	4a35      	ldr	r2, [pc, #212]	; (5fc4 <spi_transceive_wait+0x128>)
    5ef0:	4293      	cmp	r3, r2
    5ef2:	d101      	bne.n	5ef8 <spi_transceive_wait+0x5c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    5ef4:	2312      	movs	r3, #18
    5ef6:	e05e      	b.n	5fb6 <spi_transceive_wait+0x11a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    5ef8:	2316      	movs	r3, #22
    5efa:	18fb      	adds	r3, r7, r3
    5efc:	881a      	ldrh	r2, [r3, #0]
    5efe:	2316      	movs	r3, #22
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	3201      	adds	r2, #1
    5f04:	801a      	strh	r2, [r3, #0]
    5f06:	2316      	movs	r3, #22
    5f08:	18fb      	adds	r3, r7, r3
    5f0a:	881b      	ldrh	r3, [r3, #0]
    5f0c:	4a2d      	ldr	r2, [pc, #180]	; (5fc4 <spi_transceive_wait+0x128>)
    5f0e:	4293      	cmp	r3, r2
    5f10:	d9e3      	bls.n	5eda <spi_transceive_wait+0x3e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	68fb      	ldr	r3, [r7, #12]
    5f16:	1c18      	adds	r0, r3, #0
    5f18:	4b29      	ldr	r3, [pc, #164]	; (5fc0 <spi_transceive_wait+0x124>)
    5f1a:	4798      	blx	r3
    5f1c:	1c03      	adds	r3, r0, #0
    5f1e:	1c1a      	adds	r2, r3, #0
    5f20:	2301      	movs	r3, #1
    5f22:	4053      	eors	r3, r2
    5f24:	b2db      	uxtb	r3, r3
    5f26:	2b00      	cmp	r3, #0
    5f28:	d1f4      	bne.n	5f14 <spi_transceive_wait+0x78>
	}

	/* Write data */
	spi_write(module, tx_data);
    5f2a:	68fa      	ldr	r2, [r7, #12]
    5f2c:	230a      	movs	r3, #10
    5f2e:	18fb      	adds	r3, r7, r3
    5f30:	881b      	ldrh	r3, [r3, #0]
    5f32:	1c10      	adds	r0, r2, #0
    5f34:	1c19      	adds	r1, r3, #0
    5f36:	4b24      	ldr	r3, [pc, #144]	; (5fc8 <spi_transceive_wait+0x12c>)
    5f38:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    5f3a:	68fb      	ldr	r3, [r7, #12]
    5f3c:	795b      	ldrb	r3, [r3, #5]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d120      	bne.n	5f84 <spi_transceive_wait+0xe8>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    5f42:	2316      	movs	r3, #22
    5f44:	18fb      	adds	r3, r7, r3
    5f46:	2200      	movs	r2, #0
    5f48:	801a      	strh	r2, [r3, #0]
    5f4a:	e015      	b.n	5f78 <spi_transceive_wait+0xdc>
			if (spi_is_ready_to_read(module)) {
    5f4c:	68fb      	ldr	r3, [r7, #12]
    5f4e:	1c18      	adds	r0, r3, #0
    5f50:	4b1e      	ldr	r3, [pc, #120]	; (5fcc <spi_transceive_wait+0x130>)
    5f52:	4798      	blx	r3
    5f54:	1e03      	subs	r3, r0, #0
    5f56:	d000      	beq.n	5f5a <spi_transceive_wait+0xbe>
				break;
    5f58:	e014      	b.n	5f84 <spi_transceive_wait+0xe8>
			} else if (j == SPI_TIMEOUT) {
    5f5a:	2316      	movs	r3, #22
    5f5c:	18fb      	adds	r3, r7, r3
    5f5e:	881b      	ldrh	r3, [r3, #0]
    5f60:	4a18      	ldr	r2, [pc, #96]	; (5fc4 <spi_transceive_wait+0x128>)
    5f62:	4293      	cmp	r3, r2
    5f64:	d101      	bne.n	5f6a <spi_transceive_wait+0xce>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    5f66:	2312      	movs	r3, #18
    5f68:	e025      	b.n	5fb6 <spi_transceive_wait+0x11a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    5f6a:	2316      	movs	r3, #22
    5f6c:	18fb      	adds	r3, r7, r3
    5f6e:	881a      	ldrh	r2, [r3, #0]
    5f70:	2316      	movs	r3, #22
    5f72:	18fb      	adds	r3, r7, r3
    5f74:	3201      	adds	r2, #1
    5f76:	801a      	strh	r2, [r3, #0]
    5f78:	2316      	movs	r3, #22
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	881b      	ldrh	r3, [r3, #0]
    5f7e:	4a11      	ldr	r2, [pc, #68]	; (5fc4 <spi_transceive_wait+0x128>)
    5f80:	4293      	cmp	r3, r2
    5f82:	d9e3      	bls.n	5f4c <spi_transceive_wait+0xb0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    5f84:	46c0      	nop			; (mov r8, r8)
    5f86:	68fb      	ldr	r3, [r7, #12]
    5f88:	1c18      	adds	r0, r3, #0
    5f8a:	4b10      	ldr	r3, [pc, #64]	; (5fcc <spi_transceive_wait+0x130>)
    5f8c:	4798      	blx	r3
    5f8e:	1c03      	adds	r3, r0, #0
    5f90:	1c1a      	adds	r2, r3, #0
    5f92:	2301      	movs	r3, #1
    5f94:	4053      	eors	r3, r2
    5f96:	b2db      	uxtb	r3, r3
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d1f4      	bne.n	5f86 <spi_transceive_wait+0xea>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    5f9c:	2315      	movs	r3, #21
    5f9e:	18fc      	adds	r4, r7, r3
    5fa0:	68fa      	ldr	r2, [r7, #12]
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	1c10      	adds	r0, r2, #0
    5fa6:	1c19      	adds	r1, r3, #0
    5fa8:	4b09      	ldr	r3, [pc, #36]	; (5fd0 <spi_transceive_wait+0x134>)
    5faa:	4798      	blx	r3
    5fac:	1c03      	adds	r3, r0, #0
    5fae:	7023      	strb	r3, [r4, #0]

	return retval;
    5fb0:	2315      	movs	r3, #21
    5fb2:	18fb      	adds	r3, r7, r3
    5fb4:	781b      	ldrb	r3, [r3, #0]
}
    5fb6:	1c18      	adds	r0, r3, #0
    5fb8:	46bd      	mov	sp, r7
    5fba:	b007      	add	sp, #28
    5fbc:	bd90      	pop	{r4, r7, pc}
    5fbe:	46c0      	nop			; (mov r8, r8)
    5fc0:	000057e1 	.word	0x000057e1
    5fc4:	00002710 	.word	0x00002710
    5fc8:	00005831 	.word	0x00005831
    5fcc:	00005809 	.word	0x00005809
    5fd0:	00005879 	.word	0x00005879

00005fd4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b084      	sub	sp, #16
    5fd8:	af00      	add	r7, sp, #0
    5fda:	1c02      	adds	r2, r0, #0
    5fdc:	1dfb      	adds	r3, r7, #7
    5fde:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5fe0:	230f      	movs	r3, #15
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	1dfa      	adds	r2, r7, #7
    5fe6:	7812      	ldrb	r2, [r2, #0]
    5fe8:	0952      	lsrs	r2, r2, #5
    5fea:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5fec:	230f      	movs	r3, #15
    5fee:	18fb      	adds	r3, r7, r3
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d10c      	bne.n	6010 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5ff6:	4b09      	ldr	r3, [pc, #36]	; (601c <_extint_get_eic_from_channel+0x48>)
    5ff8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5ffa:	230f      	movs	r3, #15
    5ffc:	18fb      	adds	r3, r7, r3
    5ffe:	781b      	ldrb	r3, [r3, #0]
    6000:	009b      	lsls	r3, r3, #2
    6002:	2210      	movs	r2, #16
    6004:	4694      	mov	ip, r2
    6006:	44bc      	add	ip, r7
    6008:	4463      	add	r3, ip
    600a:	3b08      	subs	r3, #8
    600c:	681b      	ldr	r3, [r3, #0]
    600e:	e000      	b.n	6012 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6010:	2300      	movs	r3, #0
	}
}
    6012:	1c18      	adds	r0, r3, #0
    6014:	46bd      	mov	sp, r7
    6016:	b004      	add	sp, #16
    6018:	bd80      	pop	{r7, pc}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	40001800 	.word	0x40001800

00006020 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6020:	b580      	push	{r7, lr}
    6022:	b084      	sub	sp, #16
    6024:	af00      	add	r7, sp, #0
    6026:	1c02      	adds	r2, r0, #0
    6028:	1dfb      	adds	r3, r7, #7
    602a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    602c:	1dfb      	adds	r3, r7, #7
    602e:	781b      	ldrb	r3, [r3, #0]
    6030:	1c18      	adds	r0, r3, #0
    6032:	4b0b      	ldr	r3, [pc, #44]	; (6060 <extint_chan_is_detected+0x40>)
    6034:	4798      	blx	r3
    6036:	1c03      	adds	r3, r0, #0
    6038:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    603a:	1dfb      	adds	r3, r7, #7
    603c:	781b      	ldrb	r3, [r3, #0]
    603e:	221f      	movs	r2, #31
    6040:	4013      	ands	r3, r2
    6042:	2201      	movs	r2, #1
    6044:	409a      	lsls	r2, r3
    6046:	1c13      	adds	r3, r2, #0
    6048:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    604a:	68fb      	ldr	r3, [r7, #12]
    604c:	691b      	ldr	r3, [r3, #16]
    604e:	68ba      	ldr	r2, [r7, #8]
    6050:	4013      	ands	r3, r2
    6052:	1e5a      	subs	r2, r3, #1
    6054:	4193      	sbcs	r3, r2
    6056:	b2db      	uxtb	r3, r3
}
    6058:	1c18      	adds	r0, r3, #0
    605a:	46bd      	mov	sp, r7
    605c:	b004      	add	sp, #16
    605e:	bd80      	pop	{r7, pc}
    6060:	00005fd5 	.word	0x00005fd5

00006064 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6064:	b580      	push	{r7, lr}
    6066:	b084      	sub	sp, #16
    6068:	af00      	add	r7, sp, #0
    606a:	1c02      	adds	r2, r0, #0
    606c:	1dfb      	adds	r3, r7, #7
    606e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6070:	1dfb      	adds	r3, r7, #7
    6072:	781b      	ldrb	r3, [r3, #0]
    6074:	1c18      	adds	r0, r3, #0
    6076:	4b09      	ldr	r3, [pc, #36]	; (609c <extint_chan_clear_detected+0x38>)
    6078:	4798      	blx	r3
    607a:	1c03      	adds	r3, r0, #0
    607c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    607e:	1dfb      	adds	r3, r7, #7
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	221f      	movs	r2, #31
    6084:	4013      	ands	r3, r2
    6086:	2201      	movs	r2, #1
    6088:	409a      	lsls	r2, r3
    608a:	1c13      	adds	r3, r2, #0
    608c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    608e:	68fb      	ldr	r3, [r7, #12]
    6090:	68ba      	ldr	r2, [r7, #8]
    6092:	611a      	str	r2, [r3, #16]
}
    6094:	46bd      	mov	sp, r7
    6096:	b004      	add	sp, #16
    6098:	bd80      	pop	{r7, pc}
    609a:	46c0      	nop			; (mov r8, r8)
    609c:	00005fd5 	.word	0x00005fd5

000060a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    60a0:	b580      	push	{r7, lr}
    60a2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    60a4:	4b15      	ldr	r3, [pc, #84]	; (60fc <EIC_Handler+0x5c>)
    60a6:	2200      	movs	r2, #0
    60a8:	701a      	strb	r2, [r3, #0]
    60aa:	e020      	b.n	60ee <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    60ac:	4b13      	ldr	r3, [pc, #76]	; (60fc <EIC_Handler+0x5c>)
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	1c18      	adds	r0, r3, #0
    60b2:	4b13      	ldr	r3, [pc, #76]	; (6100 <EIC_Handler+0x60>)
    60b4:	4798      	blx	r3
    60b6:	1e03      	subs	r3, r0, #0
    60b8:	d013      	beq.n	60e2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    60ba:	4b10      	ldr	r3, [pc, #64]	; (60fc <EIC_Handler+0x5c>)
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	1c18      	adds	r0, r3, #0
    60c0:	4b10      	ldr	r3, [pc, #64]	; (6104 <EIC_Handler+0x64>)
    60c2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    60c4:	4b0d      	ldr	r3, [pc, #52]	; (60fc <EIC_Handler+0x5c>)
    60c6:	781b      	ldrb	r3, [r3, #0]
    60c8:	1c1a      	adds	r2, r3, #0
    60ca:	4b0f      	ldr	r3, [pc, #60]	; (6108 <EIC_Handler+0x68>)
    60cc:	0092      	lsls	r2, r2, #2
    60ce:	58d3      	ldr	r3, [r2, r3]
    60d0:	2b00      	cmp	r3, #0
    60d2:	d006      	beq.n	60e2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    60d4:	4b09      	ldr	r3, [pc, #36]	; (60fc <EIC_Handler+0x5c>)
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	1c1a      	adds	r2, r3, #0
    60da:	4b0b      	ldr	r3, [pc, #44]	; (6108 <EIC_Handler+0x68>)
    60dc:	0092      	lsls	r2, r2, #2
    60de:	58d3      	ldr	r3, [r2, r3]
    60e0:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    60e2:	4b06      	ldr	r3, [pc, #24]	; (60fc <EIC_Handler+0x5c>)
    60e4:	781b      	ldrb	r3, [r3, #0]
    60e6:	3301      	adds	r3, #1
    60e8:	b2da      	uxtb	r2, r3
    60ea:	4b04      	ldr	r3, [pc, #16]	; (60fc <EIC_Handler+0x5c>)
    60ec:	701a      	strb	r2, [r3, #0]
    60ee:	4b03      	ldr	r3, [pc, #12]	; (60fc <EIC_Handler+0x5c>)
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	2b0f      	cmp	r3, #15
    60f4:	d9da      	bls.n	60ac <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    60f6:	46bd      	mov	sp, r7
    60f8:	bd80      	pop	{r7, pc}
    60fa:	46c0      	nop			; (mov r8, r8)
    60fc:	20003070 	.word	0x20003070
    6100:	00006021 	.word	0x00006021
    6104:	00006065 	.word	0x00006065
    6108:	20000184 	.word	0x20000184

0000610c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    610c:	b580      	push	{r7, lr}
    610e:	b082      	sub	sp, #8
    6110:	af00      	add	r7, sp, #0
    6112:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    6114:	687b      	ldr	r3, [r7, #4]
    6116:	2b00      	cmp	r3, #0
    6118:	d00c      	beq.n	6134 <delay_cycles+0x28>
		SysTick->LOAD = n;
    611a:	4b08      	ldr	r3, [pc, #32]	; (613c <delay_cycles+0x30>)
    611c:	687a      	ldr	r2, [r7, #4]
    611e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    6120:	4b06      	ldr	r3, [pc, #24]	; (613c <delay_cycles+0x30>)
    6122:	2200      	movs	r2, #0
    6124:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	4b04      	ldr	r3, [pc, #16]	; (613c <delay_cycles+0x30>)
    612a:	681a      	ldr	r2, [r3, #0]
    612c:	2380      	movs	r3, #128	; 0x80
    612e:	025b      	lsls	r3, r3, #9
    6130:	4013      	ands	r3, r2
    6132:	d0f9      	beq.n	6128 <delay_cycles+0x1c>
		};
	}
}
    6134:	46bd      	mov	sp, r7
    6136:	b002      	add	sp, #8
    6138:	bd80      	pop	{r7, pc}
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	e000e010 	.word	0xe000e010

00006140 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    6140:	b580      	push	{r7, lr}
    6142:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    6144:	2000      	movs	r0, #0
    6146:	4b10      	ldr	r3, [pc, #64]	; (6188 <delay_init+0x48>)
    6148:	4798      	blx	r3
    614a:	1c02      	adds	r2, r0, #0
    614c:	4b0f      	ldr	r3, [pc, #60]	; (618c <delay_init+0x4c>)
    614e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    6150:	4b0e      	ldr	r3, [pc, #56]	; (618c <delay_init+0x4c>)
    6152:	681a      	ldr	r2, [r3, #0]
    6154:	4b0e      	ldr	r3, [pc, #56]	; (6190 <delay_init+0x50>)
    6156:	1c10      	adds	r0, r2, #0
    6158:	22fa      	movs	r2, #250	; 0xfa
    615a:	0091      	lsls	r1, r2, #2
    615c:	4798      	blx	r3
    615e:	1c03      	adds	r3, r0, #0
    6160:	1c1a      	adds	r2, r3, #0
    6162:	4b0a      	ldr	r3, [pc, #40]	; (618c <delay_init+0x4c>)
    6164:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    6166:	4b09      	ldr	r3, [pc, #36]	; (618c <delay_init+0x4c>)
    6168:	681a      	ldr	r2, [r3, #0]
    616a:	4b09      	ldr	r3, [pc, #36]	; (6190 <delay_init+0x50>)
    616c:	1c10      	adds	r0, r2, #0
    616e:	22fa      	movs	r2, #250	; 0xfa
    6170:	0091      	lsls	r1, r2, #2
    6172:	4798      	blx	r3
    6174:	1c03      	adds	r3, r0, #0
    6176:	1c1a      	adds	r2, r3, #0
    6178:	4b06      	ldr	r3, [pc, #24]	; (6194 <delay_init+0x54>)
    617a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    617c:	4b06      	ldr	r3, [pc, #24]	; (6198 <delay_init+0x58>)
    617e:	2205      	movs	r2, #5
    6180:	601a      	str	r2, [r3, #0]
}
    6182:	46bd      	mov	sp, r7
    6184:	bd80      	pop	{r7, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	00006db5 	.word	0x00006db5
    618c:	20000000 	.word	0x20000000
    6190:	00007755 	.word	0x00007755
    6194:	20000004 	.word	0x20000004
    6198:	e000e010 	.word	0xe000e010

0000619c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    619c:	b580      	push	{r7, lr}
    619e:	b082      	sub	sp, #8
    61a0:	af00      	add	r7, sp, #0
    61a2:	6078      	str	r0, [r7, #4]
	while (n--) {
    61a4:	e004      	b.n	61b0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    61a6:	4b06      	ldr	r3, [pc, #24]	; (61c0 <delay_cycles_ms+0x24>)
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	1c18      	adds	r0, r3, #0
    61ac:	4b05      	ldr	r3, [pc, #20]	; (61c4 <delay_cycles_ms+0x28>)
    61ae:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	1e5a      	subs	r2, r3, #1
    61b4:	607a      	str	r2, [r7, #4]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d1f5      	bne.n	61a6 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    61ba:	46bd      	mov	sp, r7
    61bc:	b002      	add	sp, #8
    61be:	bd80      	pop	{r7, pc}
    61c0:	20000000 	.word	0x20000000
    61c4:	0000610d 	.word	0x0000610d

000061c8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	b082      	sub	sp, #8
    61cc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    61ce:	4b0f      	ldr	r3, [pc, #60]	; (620c <cpu_irq_enter_critical+0x44>)
    61d0:	681b      	ldr	r3, [r3, #0]
    61d2:	2b00      	cmp	r3, #0
    61d4:	d112      	bne.n	61fc <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    61d6:	f3ef 8310 	mrs	r3, PRIMASK
    61da:	607b      	str	r3, [r7, #4]
  return(result);
    61dc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    61de:	2b00      	cmp	r3, #0
    61e0:	d109      	bne.n	61f6 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    61e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    61e4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    61e8:	4b09      	ldr	r3, [pc, #36]	; (6210 <cpu_irq_enter_critical+0x48>)
    61ea:	2200      	movs	r2, #0
    61ec:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    61ee:	4b09      	ldr	r3, [pc, #36]	; (6214 <cpu_irq_enter_critical+0x4c>)
    61f0:	2201      	movs	r2, #1
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	e002      	b.n	61fc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    61f6:	4b07      	ldr	r3, [pc, #28]	; (6214 <cpu_irq_enter_critical+0x4c>)
    61f8:	2200      	movs	r2, #0
    61fa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    61fc:	4b03      	ldr	r3, [pc, #12]	; (620c <cpu_irq_enter_critical+0x44>)
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	1c5a      	adds	r2, r3, #1
    6202:	4b02      	ldr	r3, [pc, #8]	; (620c <cpu_irq_enter_critical+0x44>)
    6204:	601a      	str	r2, [r3, #0]
}
    6206:	46bd      	mov	sp, r7
    6208:	b002      	add	sp, #8
    620a:	bd80      	pop	{r7, pc}
    620c:	2000014c 	.word	0x2000014c
    6210:	20000008 	.word	0x20000008
    6214:	20000150 	.word	0x20000150

00006218 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    6218:	b580      	push	{r7, lr}
    621a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    621c:	4b0a      	ldr	r3, [pc, #40]	; (6248 <cpu_irq_leave_critical+0x30>)
    621e:	681b      	ldr	r3, [r3, #0]
    6220:	1e5a      	subs	r2, r3, #1
    6222:	4b09      	ldr	r3, [pc, #36]	; (6248 <cpu_irq_leave_critical+0x30>)
    6224:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6226:	4b08      	ldr	r3, [pc, #32]	; (6248 <cpu_irq_leave_critical+0x30>)
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	2b00      	cmp	r3, #0
    622c:	d10a      	bne.n	6244 <cpu_irq_leave_critical+0x2c>
    622e:	4b07      	ldr	r3, [pc, #28]	; (624c <cpu_irq_leave_critical+0x34>)
    6230:	781b      	ldrb	r3, [r3, #0]
    6232:	b2db      	uxtb	r3, r3
    6234:	2b00      	cmp	r3, #0
    6236:	d005      	beq.n	6244 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    6238:	4b05      	ldr	r3, [pc, #20]	; (6250 <cpu_irq_leave_critical+0x38>)
    623a:	2201      	movs	r2, #1
    623c:	701a      	strb	r2, [r3, #0]
    623e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6242:	b662      	cpsie	i
	}
}
    6244:	46bd      	mov	sp, r7
    6246:	bd80      	pop	{r7, pc}
    6248:	2000014c 	.word	0x2000014c
    624c:	20000150 	.word	0x20000150
    6250:	20000008 	.word	0x20000008

00006254 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6254:	b580      	push	{r7, lr}
    6256:	b084      	sub	sp, #16
    6258:	af00      	add	r7, sp, #0
    625a:	1c02      	adds	r2, r0, #0
    625c:	1dfb      	adds	r3, r7, #7
    625e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6260:	230f      	movs	r3, #15
    6262:	18fb      	adds	r3, r7, r3
    6264:	1dfa      	adds	r2, r7, #7
    6266:	7812      	ldrb	r2, [r2, #0]
    6268:	09d2      	lsrs	r2, r2, #7
    626a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    626c:	230e      	movs	r3, #14
    626e:	18fb      	adds	r3, r7, r3
    6270:	1dfa      	adds	r2, r7, #7
    6272:	7812      	ldrb	r2, [r2, #0]
    6274:	0952      	lsrs	r2, r2, #5
    6276:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6278:	4b0d      	ldr	r3, [pc, #52]	; (62b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    627a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    627c:	230f      	movs	r3, #15
    627e:	18fb      	adds	r3, r7, r3
    6280:	781b      	ldrb	r3, [r3, #0]
    6282:	2b00      	cmp	r3, #0
    6284:	d10f      	bne.n	62a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6286:	230f      	movs	r3, #15
    6288:	18fb      	adds	r3, r7, r3
    628a:	781b      	ldrb	r3, [r3, #0]
    628c:	009b      	lsls	r3, r3, #2
    628e:	2210      	movs	r2, #16
    6290:	4694      	mov	ip, r2
    6292:	44bc      	add	ip, r7
    6294:	4463      	add	r3, ip
    6296:	3b08      	subs	r3, #8
    6298:	681a      	ldr	r2, [r3, #0]
    629a:	230e      	movs	r3, #14
    629c:	18fb      	adds	r3, r7, r3
    629e:	781b      	ldrb	r3, [r3, #0]
    62a0:	01db      	lsls	r3, r3, #7
    62a2:	18d3      	adds	r3, r2, r3
    62a4:	e000      	b.n	62a8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    62a6:	2300      	movs	r3, #0
	}
}
    62a8:	1c18      	adds	r0, r3, #0
    62aa:	46bd      	mov	sp, r7
    62ac:	b004      	add	sp, #16
    62ae:	bd80      	pop	{r7, pc}
    62b0:	41004400 	.word	0x41004400

000062b4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c02      	adds	r2, r0, #0
    62bc:	1dfb      	adds	r3, r7, #7
    62be:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    62c0:	1dfb      	adds	r3, r7, #7
    62c2:	781b      	ldrb	r3, [r3, #0]
    62c4:	1c18      	adds	r0, r3, #0
    62c6:	4b03      	ldr	r3, [pc, #12]	; (62d4 <port_get_group_from_gpio_pin+0x20>)
    62c8:	4798      	blx	r3
    62ca:	1c03      	adds	r3, r0, #0
}
    62cc:	1c18      	adds	r0, r3, #0
    62ce:	46bd      	mov	sp, r7
    62d0:	b002      	add	sp, #8
    62d2:	bd80      	pop	{r7, pc}
    62d4:	00006255 	.word	0x00006255

000062d8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    62d8:	b580      	push	{r7, lr}
    62da:	b082      	sub	sp, #8
    62dc:	af00      	add	r7, sp, #0
    62de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    62e0:	687b      	ldr	r3, [r7, #4]
    62e2:	2200      	movs	r2, #0
    62e4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	2201      	movs	r2, #1
    62ea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    62ec:	687b      	ldr	r3, [r7, #4]
    62ee:	2200      	movs	r2, #0
    62f0:	709a      	strb	r2, [r3, #2]
}
    62f2:	46bd      	mov	sp, r7
    62f4:	b002      	add	sp, #8
    62f6:	bd80      	pop	{r7, pc}

000062f8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    62f8:	b580      	push	{r7, lr}
    62fa:	b084      	sub	sp, #16
    62fc:	af00      	add	r7, sp, #0
    62fe:	1c02      	adds	r2, r0, #0
    6300:	1dfb      	adds	r3, r7, #7
    6302:	701a      	strb	r2, [r3, #0]
    6304:	1dbb      	adds	r3, r7, #6
    6306:	1c0a      	adds	r2, r1, #0
    6308:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    630a:	1dfb      	adds	r3, r7, #7
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	1c18      	adds	r0, r3, #0
    6310:	4b0c      	ldr	r3, [pc, #48]	; (6344 <port_pin_set_output_level+0x4c>)
    6312:	4798      	blx	r3
    6314:	1c03      	adds	r3, r0, #0
    6316:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6318:	1dfb      	adds	r3, r7, #7
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	221f      	movs	r2, #31
    631e:	4013      	ands	r3, r2
    6320:	2201      	movs	r2, #1
    6322:	409a      	lsls	r2, r3
    6324:	1c13      	adds	r3, r2, #0
    6326:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6328:	1dbb      	adds	r3, r7, #6
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	2b00      	cmp	r3, #0
    632e:	d003      	beq.n	6338 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6330:	68fb      	ldr	r3, [r7, #12]
    6332:	68ba      	ldr	r2, [r7, #8]
    6334:	619a      	str	r2, [r3, #24]
    6336:	e002      	b.n	633e <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	68ba      	ldr	r2, [r7, #8]
    633c:	615a      	str	r2, [r3, #20]
	}
}
    633e:	46bd      	mov	sp, r7
    6340:	b004      	add	sp, #16
    6342:	bd80      	pop	{r7, pc}
    6344:	000062b5 	.word	0x000062b5

00006348 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6348:	b580      	push	{r7, lr}
    634a:	b082      	sub	sp, #8
    634c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    634e:	1d3b      	adds	r3, r7, #4
    6350:	1c18      	adds	r0, r3, #0
    6352:	4b0e      	ldr	r3, [pc, #56]	; (638c <system_board_init+0x44>)
    6354:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6356:	1d3b      	adds	r3, r7, #4
    6358:	2201      	movs	r2, #1
    635a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    635c:	1d3b      	adds	r3, r7, #4
    635e:	203e      	movs	r0, #62	; 0x3e
    6360:	1c19      	adds	r1, r3, #0
    6362:	4b0b      	ldr	r3, [pc, #44]	; (6390 <system_board_init+0x48>)
    6364:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    6366:	203e      	movs	r0, #62	; 0x3e
    6368:	2101      	movs	r1, #1
    636a:	4b0a      	ldr	r3, [pc, #40]	; (6394 <system_board_init+0x4c>)
    636c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    636e:	1d3b      	adds	r3, r7, #4
    6370:	2200      	movs	r2, #0
    6372:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6374:	1d3b      	adds	r3, r7, #4
    6376:	2201      	movs	r2, #1
    6378:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    637a:	1d3b      	adds	r3, r7, #4
    637c:	200f      	movs	r0, #15
    637e:	1c19      	adds	r1, r3, #0
    6380:	4b03      	ldr	r3, [pc, #12]	; (6390 <system_board_init+0x48>)
    6382:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    6384:	46bd      	mov	sp, r7
    6386:	b002      	add	sp, #8
    6388:	bd80      	pop	{r7, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	000062d9 	.word	0x000062d9
    6390:	000063c1 	.word	0x000063c1
    6394:	000062f9 	.word	0x000062f9

00006398 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6398:	b580      	push	{r7, lr}
    639a:	b082      	sub	sp, #8
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	2280      	movs	r2, #128	; 0x80
    63a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	2200      	movs	r2, #0
    63aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	2201      	movs	r2, #1
    63b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	2200      	movs	r2, #0
    63b6:	70da      	strb	r2, [r3, #3]
}
    63b8:	46bd      	mov	sp, r7
    63ba:	b002      	add	sp, #8
    63bc:	bd80      	pop	{r7, pc}
    63be:	46c0      	nop			; (mov r8, r8)

000063c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    63c0:	b580      	push	{r7, lr}
    63c2:	b084      	sub	sp, #16
    63c4:	af00      	add	r7, sp, #0
    63c6:	1c02      	adds	r2, r0, #0
    63c8:	6039      	str	r1, [r7, #0]
    63ca:	1dfb      	adds	r3, r7, #7
    63cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    63ce:	230c      	movs	r3, #12
    63d0:	18fb      	adds	r3, r7, r3
    63d2:	1c18      	adds	r0, r3, #0
    63d4:	4b0f      	ldr	r3, [pc, #60]	; (6414 <port_pin_set_config+0x54>)
    63d6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    63d8:	230c      	movs	r3, #12
    63da:	18fb      	adds	r3, r7, r3
    63dc:	2280      	movs	r2, #128	; 0x80
    63de:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    63e0:	683b      	ldr	r3, [r7, #0]
    63e2:	781a      	ldrb	r2, [r3, #0]
    63e4:	230c      	movs	r3, #12
    63e6:	18fb      	adds	r3, r7, r3
    63e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    63ea:	683b      	ldr	r3, [r7, #0]
    63ec:	785a      	ldrb	r2, [r3, #1]
    63ee:	230c      	movs	r3, #12
    63f0:	18fb      	adds	r3, r7, r3
    63f2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    63f4:	683b      	ldr	r3, [r7, #0]
    63f6:	789a      	ldrb	r2, [r3, #2]
    63f8:	230c      	movs	r3, #12
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    63fe:	1dfb      	adds	r3, r7, #7
    6400:	781a      	ldrb	r2, [r3, #0]
    6402:	230c      	movs	r3, #12
    6404:	18fb      	adds	r3, r7, r3
    6406:	1c10      	adds	r0, r2, #0
    6408:	1c19      	adds	r1, r3, #0
    640a:	4b03      	ldr	r3, [pc, #12]	; (6418 <port_pin_set_config+0x58>)
    640c:	4798      	blx	r3
}
    640e:	46bd      	mov	sp, r7
    6410:	b004      	add	sp, #16
    6412:	bd80      	pop	{r7, pc}
    6414:	00006399 	.word	0x00006399
    6418:	00007189 	.word	0x00007189

0000641c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    641c:	b580      	push	{r7, lr}
    641e:	b082      	sub	sp, #8
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	2201      	movs	r2, #1
    6428:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	2200      	movs	r2, #0
    642e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	2206      	movs	r2, #6
    6434:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	2200      	movs	r2, #0
    643a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	2200      	movs	r2, #0
    6440:	725a      	strb	r2, [r3, #9]
}
    6442:	46bd      	mov	sp, r7
    6444:	b002      	add	sp, #8
    6446:	bd80      	pop	{r7, pc}

00006448 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6448:	b580      	push	{r7, lr}
    644a:	b082      	sub	sp, #8
    644c:	af00      	add	r7, sp, #0
    644e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	2200      	movs	r2, #0
    6454:	701a      	strb	r2, [r3, #0]
}
    6456:	46bd      	mov	sp, r7
    6458:	b002      	add	sp, #8
    645a:	bd80      	pop	{r7, pc}

0000645c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    645c:	b580      	push	{r7, lr}
    645e:	b082      	sub	sp, #8
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	2203      	movs	r2, #3
    6468:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    646a:	687b      	ldr	r3, [r7, #4]
    646c:	2200      	movs	r2, #0
    646e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	2201      	movs	r2, #1
    6474:	709a      	strb	r2, [r3, #2]
}
    6476:	46bd      	mov	sp, r7
    6478:	b002      	add	sp, #8
    647a:	bd80      	pop	{r7, pc}

0000647c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    647c:	b580      	push	{r7, lr}
    647e:	b082      	sub	sp, #8
    6480:	af00      	add	r7, sp, #0
    6482:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    6484:	687b      	ldr	r3, [r7, #4]
    6486:	2200      	movs	r2, #0
    6488:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	2200      	movs	r2, #0
    648e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	2200      	movs	r2, #0
    6494:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	2200      	movs	r2, #0
    649a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	2200      	movs	r2, #0
    64a0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	2201      	movs	r2, #1
    64a6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	2207      	movs	r2, #7
    64ac:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	223f      	movs	r2, #63	; 0x3f
    64b2:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	2201      	movs	r2, #1
    64b8:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	2201      	movs	r2, #1
    64be:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	2206      	movs	r2, #6
    64c4:	821a      	strh	r2, [r3, #16]
}
    64c6:	46bd      	mov	sp, r7
    64c8:	b002      	add	sp, #8
    64ca:	bd80      	pop	{r7, pc}

000064cc <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b082      	sub	sp, #8
    64d0:	af00      	add	r7, sp, #0
    64d2:	1c02      	adds	r2, r0, #0
    64d4:	1dfb      	adds	r3, r7, #7
    64d6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    64d8:	4a03      	ldr	r2, [pc, #12]	; (64e8 <system_cpu_clock_set_divider+0x1c>)
    64da:	1dfb      	adds	r3, r7, #7
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	7213      	strb	r3, [r2, #8]
}
    64e0:	46bd      	mov	sp, r7
    64e2:	b002      	add	sp, #8
    64e4:	bd80      	pop	{r7, pc}
    64e6:	46c0      	nop			; (mov r8, r8)
    64e8:	40000400 	.word	0x40000400

000064ec <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    64ec:	b580      	push	{r7, lr}
    64ee:	b082      	sub	sp, #8
    64f0:	af00      	add	r7, sp, #0
    64f2:	1c02      	adds	r2, r0, #0
    64f4:	1dfb      	adds	r3, r7, #7
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	1dbb      	adds	r3, r7, #6
    64fa:	1c0a      	adds	r2, r1, #0
    64fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    64fe:	1dfb      	adds	r3, r7, #7
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	2b01      	cmp	r3, #1
    6504:	d008      	beq.n	6518 <system_apb_clock_set_divider+0x2c>
    6506:	2b02      	cmp	r3, #2
    6508:	d00b      	beq.n	6522 <system_apb_clock_set_divider+0x36>
    650a:	2b00      	cmp	r3, #0
    650c:	d10e      	bne.n	652c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    650e:	4a0b      	ldr	r2, [pc, #44]	; (653c <system_apb_clock_set_divider+0x50>)
    6510:	1dbb      	adds	r3, r7, #6
    6512:	781b      	ldrb	r3, [r3, #0]
    6514:	7253      	strb	r3, [r2, #9]
			break;
    6516:	e00b      	b.n	6530 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    6518:	4a08      	ldr	r2, [pc, #32]	; (653c <system_apb_clock_set_divider+0x50>)
    651a:	1dbb      	adds	r3, r7, #6
    651c:	781b      	ldrb	r3, [r3, #0]
    651e:	7293      	strb	r3, [r2, #10]
			break;
    6520:	e006      	b.n	6530 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    6522:	4a06      	ldr	r2, [pc, #24]	; (653c <system_apb_clock_set_divider+0x50>)
    6524:	1dbb      	adds	r3, r7, #6
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	72d3      	strb	r3, [r2, #11]
			break;
    652a:	e001      	b.n	6530 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    652c:	2317      	movs	r3, #23
    652e:	e000      	b.n	6532 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    6530:	2300      	movs	r3, #0
}
    6532:	1c18      	adds	r0, r3, #0
    6534:	46bd      	mov	sp, r7
    6536:	b002      	add	sp, #8
    6538:	bd80      	pop	{r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	40000400 	.word	0x40000400

00006540 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6540:	b580      	push	{r7, lr}
    6542:	b082      	sub	sp, #8
    6544:	af00      	add	r7, sp, #0
    6546:	1c02      	adds	r2, r0, #0
    6548:	1dfb      	adds	r3, r7, #7
    654a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    654c:	4b08      	ldr	r3, [pc, #32]	; (6570 <system_flash_set_waitstates+0x30>)
    654e:	1dfa      	adds	r2, r7, #7
    6550:	7812      	ldrb	r2, [r2, #0]
    6552:	210f      	movs	r1, #15
    6554:	400a      	ands	r2, r1
    6556:	b2d2      	uxtb	r2, r2
    6558:	210f      	movs	r1, #15
    655a:	400a      	ands	r2, r1
    655c:	0052      	lsls	r2, r2, #1
    655e:	6859      	ldr	r1, [r3, #4]
    6560:	201e      	movs	r0, #30
    6562:	4381      	bics	r1, r0
    6564:	430a      	orrs	r2, r1
    6566:	605a      	str	r2, [r3, #4]
}
    6568:	46bd      	mov	sp, r7
    656a:	b002      	add	sp, #8
    656c:	bd80      	pop	{r7, pc}
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	41004000 	.word	0x41004000

00006574 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6574:	b580      	push	{r7, lr}
    6576:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6578:	46c0      	nop			; (mov r8, r8)
    657a:	4b03      	ldr	r3, [pc, #12]	; (6588 <_system_dfll_wait_for_sync+0x14>)
    657c:	68db      	ldr	r3, [r3, #12]
    657e:	2210      	movs	r2, #16
    6580:	4013      	ands	r3, r2
    6582:	d0fa      	beq.n	657a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6584:	46bd      	mov	sp, r7
    6586:	bd80      	pop	{r7, pc}
    6588:	40000800 	.word	0x40000800

0000658c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    658c:	b580      	push	{r7, lr}
    658e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6590:	4b0c      	ldr	r3, [pc, #48]	; (65c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6592:	2202      	movs	r2, #2
    6594:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6596:	4b0c      	ldr	r3, [pc, #48]	; (65c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6598:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    659a:	4a0a      	ldr	r2, [pc, #40]	; (65c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    659c:	4b0b      	ldr	r3, [pc, #44]	; (65cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    659e:	689b      	ldr	r3, [r3, #8]
    65a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    65a2:	4a08      	ldr	r2, [pc, #32]	; (65c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    65a4:	4b09      	ldr	r3, [pc, #36]	; (65cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    65a6:	685b      	ldr	r3, [r3, #4]
    65a8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    65aa:	4b06      	ldr	r3, [pc, #24]	; (65c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    65ac:	2200      	movs	r2, #0
    65ae:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    65b0:	4b05      	ldr	r3, [pc, #20]	; (65c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    65b2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    65b4:	4a03      	ldr	r2, [pc, #12]	; (65c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    65b6:	4b05      	ldr	r3, [pc, #20]	; (65cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    65b8:	681b      	ldr	r3, [r3, #0]
    65ba:	b29b      	uxth	r3, r3
    65bc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    65be:	46bd      	mov	sp, r7
    65c0:	bd80      	pop	{r7, pc}
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	40000800 	.word	0x40000800
    65c8:	00006575 	.word	0x00006575
    65cc:	20000154 	.word	0x20000154

000065d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	b082      	sub	sp, #8
    65d4:	af00      	add	r7, sp, #0
    65d6:	1c02      	adds	r2, r0, #0
    65d8:	1dfb      	adds	r3, r7, #7
    65da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    65dc:	1dfb      	adds	r3, r7, #7
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	2b08      	cmp	r3, #8
    65e2:	d842      	bhi.n	666a <system_clock_source_get_hz+0x9a>
    65e4:	009a      	lsls	r2, r3, #2
    65e6:	4b23      	ldr	r3, [pc, #140]	; (6674 <system_clock_source_get_hz+0xa4>)
    65e8:	18d3      	adds	r3, r2, r3
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    65ee:	4b22      	ldr	r3, [pc, #136]	; (6678 <system_clock_source_get_hz+0xa8>)
    65f0:	691b      	ldr	r3, [r3, #16]
    65f2:	e03b      	b.n	666c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    65f4:	4b21      	ldr	r3, [pc, #132]	; (667c <system_clock_source_get_hz+0xac>)
    65f6:	6a1b      	ldr	r3, [r3, #32]
    65f8:	0a1b      	lsrs	r3, r3, #8
    65fa:	1c1a      	adds	r2, r3, #0
    65fc:	2303      	movs	r3, #3
    65fe:	4013      	ands	r3, r2
    6600:	b2db      	uxtb	r3, r3
    6602:	1c1a      	adds	r2, r3, #0
    6604:	4b1e      	ldr	r3, [pc, #120]	; (6680 <system_clock_source_get_hz+0xb0>)
    6606:	40d3      	lsrs	r3, r2
    6608:	e030      	b.n	666c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    660a:	2380      	movs	r3, #128	; 0x80
    660c:	021b      	lsls	r3, r3, #8
    660e:	e02d      	b.n	666c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6610:	2380      	movs	r3, #128	; 0x80
    6612:	021b      	lsls	r3, r3, #8
    6614:	e02a      	b.n	666c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6616:	4b18      	ldr	r3, [pc, #96]	; (6678 <system_clock_source_get_hz+0xa8>)
    6618:	695b      	ldr	r3, [r3, #20]
    661a:	e027      	b.n	666c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    661c:	4b16      	ldr	r3, [pc, #88]	; (6678 <system_clock_source_get_hz+0xa8>)
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	2202      	movs	r2, #2
    6622:	4013      	ands	r3, r2
    6624:	d101      	bne.n	662a <system_clock_source_get_hz+0x5a>
			return 0;
    6626:	2300      	movs	r3, #0
    6628:	e020      	b.n	666c <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    662a:	4b16      	ldr	r3, [pc, #88]	; (6684 <system_clock_source_get_hz+0xb4>)
    662c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    662e:	4b12      	ldr	r3, [pc, #72]	; (6678 <system_clock_source_get_hz+0xa8>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	2204      	movs	r2, #4
    6634:	4013      	ands	r3, r2
    6636:	d009      	beq.n	664c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6638:	2000      	movs	r0, #0
    663a:	4b13      	ldr	r3, [pc, #76]	; (6688 <system_clock_source_get_hz+0xb8>)
    663c:	4798      	blx	r3
    663e:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    6640:	4b0d      	ldr	r3, [pc, #52]	; (6678 <system_clock_source_get_hz+0xa8>)
    6642:	689b      	ldr	r3, [r3, #8]
    6644:	041b      	lsls	r3, r3, #16
    6646:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6648:	4353      	muls	r3, r2
    664a:	e00f      	b.n	666c <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    664c:	4b0f      	ldr	r3, [pc, #60]	; (668c <system_clock_source_get_hz+0xbc>)
    664e:	e00d      	b.n	666c <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6650:	4a0a      	ldr	r2, [pc, #40]	; (667c <system_clock_source_get_hz+0xac>)
    6652:	2350      	movs	r3, #80	; 0x50
    6654:	5cd3      	ldrb	r3, [r2, r3]
    6656:	b2db      	uxtb	r3, r3
    6658:	1c1a      	adds	r2, r3, #0
    665a:	2304      	movs	r3, #4
    665c:	4013      	ands	r3, r2
    665e:	d101      	bne.n	6664 <system_clock_source_get_hz+0x94>
			return 0;
    6660:	2300      	movs	r3, #0
    6662:	e003      	b.n	666c <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    6664:	4b04      	ldr	r3, [pc, #16]	; (6678 <system_clock_source_get_hz+0xa8>)
    6666:	68db      	ldr	r3, [r3, #12]
    6668:	e000      	b.n	666c <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    666a:	2300      	movs	r3, #0
	}
}
    666c:	1c18      	adds	r0, r3, #0
    666e:	46bd      	mov	sp, r7
    6670:	b002      	add	sp, #8
    6672:	bd80      	pop	{r7, pc}
    6674:	0000a9d0 	.word	0x0000a9d0
    6678:	20000154 	.word	0x20000154
    667c:	40000800 	.word	0x40000800
    6680:	007a1200 	.word	0x007a1200
    6684:	00006575 	.word	0x00006575
    6688:	00006fc1 	.word	0x00006fc1
    668c:	02dc6c00 	.word	0x02dc6c00

00006690 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6690:	b580      	push	{r7, lr}
    6692:	b084      	sub	sp, #16
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6698:	4b1a      	ldr	r3, [pc, #104]	; (6704 <system_clock_source_osc8m_set_config+0x74>)
    669a:	6a1b      	ldr	r3, [r3, #32]
    669c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    669e:	687b      	ldr	r3, [r7, #4]
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	1c1a      	adds	r2, r3, #0
    66a4:	2303      	movs	r3, #3
    66a6:	4013      	ands	r3, r2
    66a8:	b2da      	uxtb	r2, r3
    66aa:	230d      	movs	r3, #13
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	2103      	movs	r1, #3
    66b0:	400a      	ands	r2, r1
    66b2:	1c10      	adds	r0, r2, #0
    66b4:	781a      	ldrb	r2, [r3, #0]
    66b6:	2103      	movs	r1, #3
    66b8:	438a      	bics	r2, r1
    66ba:	1c11      	adds	r1, r2, #0
    66bc:	1c02      	adds	r2, r0, #0
    66be:	430a      	orrs	r2, r1
    66c0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	789a      	ldrb	r2, [r3, #2]
    66c6:	230c      	movs	r3, #12
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	01d0      	lsls	r0, r2, #7
    66cc:	781a      	ldrb	r2, [r3, #0]
    66ce:	217f      	movs	r1, #127	; 0x7f
    66d0:	400a      	ands	r2, r1
    66d2:	1c11      	adds	r1, r2, #0
    66d4:	1c02      	adds	r2, r0, #0
    66d6:	430a      	orrs	r2, r1
    66d8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	785a      	ldrb	r2, [r3, #1]
    66de:	230c      	movs	r3, #12
    66e0:	18fb      	adds	r3, r7, r3
    66e2:	2101      	movs	r1, #1
    66e4:	400a      	ands	r2, r1
    66e6:	0190      	lsls	r0, r2, #6
    66e8:	781a      	ldrb	r2, [r3, #0]
    66ea:	2140      	movs	r1, #64	; 0x40
    66ec:	438a      	bics	r2, r1
    66ee:	1c11      	adds	r1, r2, #0
    66f0:	1c02      	adds	r2, r0, #0
    66f2:	430a      	orrs	r2, r1
    66f4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    66f6:	4b03      	ldr	r3, [pc, #12]	; (6704 <system_clock_source_osc8m_set_config+0x74>)
    66f8:	68fa      	ldr	r2, [r7, #12]
    66fa:	621a      	str	r2, [r3, #32]
}
    66fc:	46bd      	mov	sp, r7
    66fe:	b004      	add	sp, #16
    6700:	bd80      	pop	{r7, pc}
    6702:	46c0      	nop			; (mov r8, r8)
    6704:	40000800 	.word	0x40000800

00006708 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6708:	b580      	push	{r7, lr}
    670a:	b082      	sub	sp, #8
    670c:	af00      	add	r7, sp, #0
    670e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	7a1b      	ldrb	r3, [r3, #8]
    6714:	029b      	lsls	r3, r3, #10
    6716:	041b      	lsls	r3, r3, #16
    6718:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	895b      	ldrh	r3, [r3, #10]
    671e:	059b      	lsls	r3, r3, #22
    6720:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6722:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    6724:	4b29      	ldr	r3, [pc, #164]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    6726:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6730:	4313      	orrs	r3, r2
    6732:	b2db      	uxtb	r3, r3
    6734:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6736:	687b      	ldr	r3, [r7, #4]
    6738:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    673a:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    673c:	687a      	ldr	r2, [r7, #4]
    673e:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6740:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	785b      	ldrb	r3, [r3, #1]
    6746:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    6748:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    674a:	4b20      	ldr	r3, [pc, #128]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    674c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	781b      	ldrb	r3, [r3, #0]
    6752:	2b04      	cmp	r3, #4
    6754:	d116      	bne.n	6784 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6756:	687b      	ldr	r3, [r7, #4]
    6758:	7b1b      	ldrb	r3, [r3, #12]
    675a:	069b      	lsls	r3, r3, #26
    675c:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	89db      	ldrh	r3, [r3, #14]
    6762:	041b      	lsls	r3, r3, #16
    6764:	1c19      	adds	r1, r3, #0
    6766:	4b1a      	ldr	r3, [pc, #104]	; (67d0 <system_clock_source_dfll_set_config+0xc8>)
    6768:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    676a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    676c:	687a      	ldr	r2, [r7, #4]
    676e:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6770:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    6772:	4b16      	ldr	r3, [pc, #88]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    6774:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6776:	4b15      	ldr	r3, [pc, #84]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	687a      	ldr	r2, [r7, #4]
    677c:	7812      	ldrb	r2, [r2, #0]
    677e:	431a      	orrs	r2, r3
    6780:	4b12      	ldr	r3, [pc, #72]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    6782:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	2b20      	cmp	r3, #32
    678a:	d11c      	bne.n	67c6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	7b1b      	ldrb	r3, [r3, #12]
    6790:	069b      	lsls	r3, r3, #26
    6792:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	89db      	ldrh	r3, [r3, #14]
    6798:	041b      	lsls	r3, r3, #16
    679a:	1c19      	adds	r1, r3, #0
    679c:	4b0c      	ldr	r3, [pc, #48]	; (67d0 <system_clock_source_dfll_set_config+0xc8>)
    679e:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    67a0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    67a2:	687a      	ldr	r2, [r7, #4]
    67a4:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    67a6:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    67a8:	4b08      	ldr	r3, [pc, #32]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    67aa:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    67ac:	4b07      	ldr	r3, [pc, #28]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    67ae:	681b      	ldr	r3, [r3, #0]
    67b0:	687a      	ldr	r2, [r7, #4]
    67b2:	7812      	ldrb	r2, [r2, #0]
    67b4:	2104      	movs	r1, #4
    67b6:	430a      	orrs	r2, r1
    67b8:	b2d2      	uxtb	r2, r2
    67ba:	4313      	orrs	r3, r2
    67bc:	2280      	movs	r2, #128	; 0x80
    67be:	00d2      	lsls	r2, r2, #3
    67c0:	431a      	orrs	r2, r3
    67c2:	4b02      	ldr	r3, [pc, #8]	; (67cc <system_clock_source_dfll_set_config+0xc4>)
    67c4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    67c6:	46bd      	mov	sp, r7
    67c8:	b002      	add	sp, #8
    67ca:	bd80      	pop	{r7, pc}
    67cc:	20000154 	.word	0x20000154
    67d0:	03ff0000 	.word	0x03ff0000

000067d4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b082      	sub	sp, #8
    67d8:	af00      	add	r7, sp, #0
    67da:	1c02      	adds	r2, r0, #0
    67dc:	1dfb      	adds	r3, r7, #7
    67de:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    67e0:	1dfb      	adds	r3, r7, #7
    67e2:	781b      	ldrb	r3, [r3, #0]
    67e4:	2b08      	cmp	r3, #8
    67e6:	d83b      	bhi.n	6860 <system_clock_source_enable+0x8c>
    67e8:	009a      	lsls	r2, r3, #2
    67ea:	4b21      	ldr	r3, [pc, #132]	; (6870 <system_clock_source_enable+0x9c>)
    67ec:	18d3      	adds	r3, r2, r3
    67ee:	681b      	ldr	r3, [r3, #0]
    67f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    67f2:	4b20      	ldr	r3, [pc, #128]	; (6874 <system_clock_source_enable+0xa0>)
    67f4:	4a1f      	ldr	r2, [pc, #124]	; (6874 <system_clock_source_enable+0xa0>)
    67f6:	6a12      	ldr	r2, [r2, #32]
    67f8:	2102      	movs	r1, #2
    67fa:	430a      	orrs	r2, r1
    67fc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    67fe:	2300      	movs	r3, #0
    6800:	e031      	b.n	6866 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6802:	4b1c      	ldr	r3, [pc, #112]	; (6874 <system_clock_source_enable+0xa0>)
    6804:	4a1b      	ldr	r2, [pc, #108]	; (6874 <system_clock_source_enable+0xa0>)
    6806:	6992      	ldr	r2, [r2, #24]
    6808:	2102      	movs	r1, #2
    680a:	430a      	orrs	r2, r1
    680c:	619a      	str	r2, [r3, #24]
		break;
    680e:	e029      	b.n	6864 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6810:	4a18      	ldr	r2, [pc, #96]	; (6874 <system_clock_source_enable+0xa0>)
    6812:	4b18      	ldr	r3, [pc, #96]	; (6874 <system_clock_source_enable+0xa0>)
    6814:	8a1b      	ldrh	r3, [r3, #16]
    6816:	b29b      	uxth	r3, r3
    6818:	2102      	movs	r1, #2
    681a:	430b      	orrs	r3, r1
    681c:	b29b      	uxth	r3, r3
    681e:	8213      	strh	r3, [r2, #16]
		break;
    6820:	e020      	b.n	6864 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6822:	4a14      	ldr	r2, [pc, #80]	; (6874 <system_clock_source_enable+0xa0>)
    6824:	4b13      	ldr	r3, [pc, #76]	; (6874 <system_clock_source_enable+0xa0>)
    6826:	8a9b      	ldrh	r3, [r3, #20]
    6828:	b29b      	uxth	r3, r3
    682a:	2102      	movs	r1, #2
    682c:	430b      	orrs	r3, r1
    682e:	b29b      	uxth	r3, r3
    6830:	8293      	strh	r3, [r2, #20]
		break;
    6832:	e017      	b.n	6864 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6834:	4b10      	ldr	r3, [pc, #64]	; (6878 <system_clock_source_enable+0xa4>)
    6836:	681b      	ldr	r3, [r3, #0]
    6838:	2202      	movs	r2, #2
    683a:	431a      	orrs	r2, r3
    683c:	4b0e      	ldr	r3, [pc, #56]	; (6878 <system_clock_source_enable+0xa4>)
    683e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6840:	4b0e      	ldr	r3, [pc, #56]	; (687c <system_clock_source_enable+0xa8>)
    6842:	4798      	blx	r3
		break;
    6844:	e00e      	b.n	6864 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6846:	4a0b      	ldr	r2, [pc, #44]	; (6874 <system_clock_source_enable+0xa0>)
    6848:	490a      	ldr	r1, [pc, #40]	; (6874 <system_clock_source_enable+0xa0>)
    684a:	2344      	movs	r3, #68	; 0x44
    684c:	5ccb      	ldrb	r3, [r1, r3]
    684e:	b2db      	uxtb	r3, r3
    6850:	2102      	movs	r1, #2
    6852:	430b      	orrs	r3, r1
    6854:	b2d9      	uxtb	r1, r3
    6856:	2344      	movs	r3, #68	; 0x44
    6858:	54d1      	strb	r1, [r2, r3]
		break;
    685a:	e003      	b.n	6864 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    685c:	2300      	movs	r3, #0
    685e:	e002      	b.n	6866 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6860:	2317      	movs	r3, #23
    6862:	e000      	b.n	6866 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6864:	2300      	movs	r3, #0
}
    6866:	1c18      	adds	r0, r3, #0
    6868:	46bd      	mov	sp, r7
    686a:	b002      	add	sp, #8
    686c:	bd80      	pop	{r7, pc}
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	0000a9f4 	.word	0x0000a9f4
    6874:	40000800 	.word	0x40000800
    6878:	20000154 	.word	0x20000154
    687c:	0000658d 	.word	0x0000658d

00006880 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6880:	b580      	push	{r7, lr}
    6882:	b084      	sub	sp, #16
    6884:	af00      	add	r7, sp, #0
    6886:	1c02      	adds	r2, r0, #0
    6888:	1dfb      	adds	r3, r7, #7
    688a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    688c:	2300      	movs	r3, #0
    688e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6890:	1dfb      	adds	r3, r7, #7
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	2b08      	cmp	r3, #8
    6896:	d821      	bhi.n	68dc <system_clock_source_is_ready+0x5c>
    6898:	009a      	lsls	r2, r3, #2
    689a:	4b18      	ldr	r3, [pc, #96]	; (68fc <system_clock_source_is_ready+0x7c>)
    689c:	18d3      	adds	r3, r2, r3
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    68a2:	2308      	movs	r3, #8
    68a4:	60fb      	str	r3, [r7, #12]
		break;
    68a6:	e01b      	b.n	68e0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    68a8:	2304      	movs	r3, #4
    68aa:	60fb      	str	r3, [r7, #12]
		break;
    68ac:	e018      	b.n	68e0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    68ae:	2301      	movs	r3, #1
    68b0:	60fb      	str	r3, [r7, #12]
		break;
    68b2:	e015      	b.n	68e0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    68b4:	2302      	movs	r3, #2
    68b6:	60fb      	str	r3, [r7, #12]
		break;
    68b8:	e012      	b.n	68e0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    68ba:	23d0      	movs	r3, #208	; 0xd0
    68bc:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    68be:	e00f      	b.n	68e0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    68c0:	4a0f      	ldr	r2, [pc, #60]	; (6900 <system_clock_source_is_ready+0x80>)
    68c2:	2350      	movs	r3, #80	; 0x50
    68c4:	5cd3      	ldrb	r3, [r2, r3]
    68c6:	b2db      	uxtb	r3, r3
    68c8:	1c1a      	adds	r2, r3, #0
    68ca:	2303      	movs	r3, #3
    68cc:	4013      	ands	r3, r2
    68ce:	3b03      	subs	r3, #3
    68d0:	425a      	negs	r2, r3
    68d2:	4153      	adcs	r3, r2
    68d4:	b2db      	uxtb	r3, r3
    68d6:	e00c      	b.n	68f2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    68d8:	2301      	movs	r3, #1
    68da:	e00a      	b.n	68f2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    68dc:	2300      	movs	r3, #0
    68de:	e008      	b.n	68f2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    68e0:	4b07      	ldr	r3, [pc, #28]	; (6900 <system_clock_source_is_ready+0x80>)
    68e2:	68db      	ldr	r3, [r3, #12]
    68e4:	68fa      	ldr	r2, [r7, #12]
    68e6:	401a      	ands	r2, r3
    68e8:	68fb      	ldr	r3, [r7, #12]
    68ea:	1ad3      	subs	r3, r2, r3
    68ec:	425a      	negs	r2, r3
    68ee:	4153      	adcs	r3, r2
    68f0:	b2db      	uxtb	r3, r3
}
    68f2:	1c18      	adds	r0, r3, #0
    68f4:	46bd      	mov	sp, r7
    68f6:	b004      	add	sp, #16
    68f8:	bd80      	pop	{r7, pc}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	0000aa18 	.word	0x0000aa18
    6900:	40000800 	.word	0x40000800

00006904 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6904:	b580      	push	{r7, lr}
    6906:	b082      	sub	sp, #8
    6908:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    690a:	1c3b      	adds	r3, r7, #0
    690c:	2201      	movs	r2, #1
    690e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6910:	2300      	movs	r3, #0
    6912:	607b      	str	r3, [r7, #4]
    6914:	e009      	b.n	692a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	b2da      	uxtb	r2, r3
    691a:	1c3b      	adds	r3, r7, #0
    691c:	1c10      	adds	r0, r2, #0
    691e:	1c19      	adds	r1, r3, #0
    6920:	4b05      	ldr	r3, [pc, #20]	; (6938 <_switch_peripheral_gclk+0x34>)
    6922:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	3301      	adds	r3, #1
    6928:	607b      	str	r3, [r7, #4]
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	2b24      	cmp	r3, #36	; 0x24
    692e:	d9f2      	bls.n	6916 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    6930:	46bd      	mov	sp, r7
    6932:	b002      	add	sp, #8
    6934:	bd80      	pop	{r7, pc}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	00006e9d 	.word	0x00006e9d

0000693c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    693c:	b580      	push	{r7, lr}
    693e:	b0a6      	sub	sp, #152	; 0x98
    6940:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6942:	4b77      	ldr	r3, [pc, #476]	; (6b20 <system_clock_init+0x1e4>)
    6944:	22c2      	movs	r2, #194	; 0xc2
    6946:	00d2      	lsls	r2, r2, #3
    6948:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    694a:	2002      	movs	r0, #2
    694c:	4b75      	ldr	r3, [pc, #468]	; (6b24 <system_clock_init+0x1e8>)
    694e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6950:	4b75      	ldr	r3, [pc, #468]	; (6b28 <system_clock_init+0x1ec>)
    6952:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6954:	2380      	movs	r3, #128	; 0x80
    6956:	18fb      	adds	r3, r7, r3
    6958:	1c18      	adds	r0, r3, #0
    695a:	4b74      	ldr	r3, [pc, #464]	; (6b2c <system_clock_init+0x1f0>)
    695c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    695e:	2380      	movs	r3, #128	; 0x80
    6960:	18fb      	adds	r3, r7, r3
    6962:	2204      	movs	r2, #4
    6964:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6966:	2380      	movs	r3, #128	; 0x80
    6968:	18fb      	adds	r3, r7, r3
    696a:	2200      	movs	r2, #0
    696c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    696e:	4b70      	ldr	r3, [pc, #448]	; (6b30 <system_clock_init+0x1f4>)
    6970:	681b      	ldr	r3, [r3, #0]
    6972:	0e9b      	lsrs	r3, r3, #26
    6974:	2294      	movs	r2, #148	; 0x94
    6976:	18ba      	adds	r2, r7, r2
    6978:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    697a:	2394      	movs	r3, #148	; 0x94
    697c:	18fb      	adds	r3, r7, r3
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	2b3f      	cmp	r3, #63	; 0x3f
    6982:	d103      	bne.n	698c <system_clock_init+0x50>
		coarse = 0x1f;
    6984:	231f      	movs	r3, #31
    6986:	2294      	movs	r2, #148	; 0x94
    6988:	18ba      	adds	r2, r7, r2
    698a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    698c:	2394      	movs	r3, #148	; 0x94
    698e:	18fb      	adds	r3, r7, r3
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	b2da      	uxtb	r2, r3
    6994:	2380      	movs	r3, #128	; 0x80
    6996:	18fb      	adds	r3, r7, r3
    6998:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    699a:	2380      	movs	r3, #128	; 0x80
    699c:	18fb      	adds	r3, r7, r3
    699e:	2200      	movs	r2, #0
    69a0:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    69a2:	2380      	movs	r3, #128	; 0x80
    69a4:	18fb      	adds	r3, r7, r3
    69a6:	2200      	movs	r2, #0
    69a8:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    69aa:	2380      	movs	r3, #128	; 0x80
    69ac:	18fb      	adds	r3, r7, r3
    69ae:	2200      	movs	r2, #0
    69b0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    69b2:	2380      	movs	r3, #128	; 0x80
    69b4:	18fb      	adds	r3, r7, r3
    69b6:	2200      	movs	r2, #0
    69b8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    69ba:	2380      	movs	r3, #128	; 0x80
    69bc:	18fb      	adds	r3, r7, r3
    69be:	2206      	movs	r2, #6
    69c0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    69c2:	2380      	movs	r3, #128	; 0x80
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	2207      	movs	r2, #7
    69c8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    69ca:	2380      	movs	r3, #128	; 0x80
    69cc:	18fb      	adds	r3, r7, r3
    69ce:	223f      	movs	r2, #63	; 0x3f
    69d0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    69d2:	2380      	movs	r3, #128	; 0x80
    69d4:	18fb      	adds	r3, r7, r3
    69d6:	1c18      	adds	r0, r3, #0
    69d8:	4b56      	ldr	r3, [pc, #344]	; (6b34 <system_clock_init+0x1f8>)
    69da:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    69dc:	237c      	movs	r3, #124	; 0x7c
    69de:	18fb      	adds	r3, r7, r3
    69e0:	1c18      	adds	r0, r3, #0
    69e2:	4b55      	ldr	r3, [pc, #340]	; (6b38 <system_clock_init+0x1fc>)
    69e4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    69e6:	237c      	movs	r3, #124	; 0x7c
    69e8:	18fb      	adds	r3, r7, r3
    69ea:	2200      	movs	r2, #0
    69ec:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    69ee:	237c      	movs	r3, #124	; 0x7c
    69f0:	18fb      	adds	r3, r7, r3
    69f2:	2201      	movs	r2, #1
    69f4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    69f6:	237c      	movs	r3, #124	; 0x7c
    69f8:	18fb      	adds	r3, r7, r3
    69fa:	2200      	movs	r2, #0
    69fc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    69fe:	237c      	movs	r3, #124	; 0x7c
    6a00:	18fb      	adds	r3, r7, r3
    6a02:	1c18      	adds	r0, r3, #0
    6a04:	4b4d      	ldr	r3, [pc, #308]	; (6b3c <system_clock_init+0x200>)
    6a06:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6a08:	2006      	movs	r0, #6
    6a0a:	4b4d      	ldr	r3, [pc, #308]	; (6b40 <system_clock_init+0x204>)
    6a0c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6a0e:	4b4d      	ldr	r3, [pc, #308]	; (6b44 <system_clock_init+0x208>)
    6a10:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6a12:	234c      	movs	r3, #76	; 0x4c
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	1c18      	adds	r0, r3, #0
    6a18:	4b4b      	ldr	r3, [pc, #300]	; (6b48 <system_clock_init+0x20c>)
    6a1a:	4798      	blx	r3
    6a1c:	234c      	movs	r3, #76	; 0x4c
    6a1e:	18fb      	adds	r3, r7, r3
    6a20:	2206      	movs	r2, #6
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	234c      	movs	r3, #76	; 0x4c
    6a26:	18fb      	adds	r3, r7, r3
    6a28:	2201      	movs	r2, #1
    6a2a:	605a      	str	r2, [r3, #4]
    6a2c:	234c      	movs	r3, #76	; 0x4c
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	2200      	movs	r2, #0
    6a32:	721a      	strb	r2, [r3, #8]
    6a34:	234c      	movs	r3, #76	; 0x4c
    6a36:	18fb      	adds	r3, r7, r3
    6a38:	2200      	movs	r2, #0
    6a3a:	725a      	strb	r2, [r3, #9]
    6a3c:	234c      	movs	r3, #76	; 0x4c
    6a3e:	18fb      	adds	r3, r7, r3
    6a40:	2003      	movs	r0, #3
    6a42:	1c19      	adds	r1, r3, #0
    6a44:	4b41      	ldr	r3, [pc, #260]	; (6b4c <system_clock_init+0x210>)
    6a46:	4798      	blx	r3
    6a48:	2003      	movs	r0, #3
    6a4a:	4b41      	ldr	r3, [pc, #260]	; (6b50 <system_clock_init+0x214>)
    6a4c:	4798      	blx	r3
    6a4e:	2340      	movs	r3, #64	; 0x40
    6a50:	18fb      	adds	r3, r7, r3
    6a52:	1c18      	adds	r0, r3, #0
    6a54:	4b3c      	ldr	r3, [pc, #240]	; (6b48 <system_clock_init+0x20c>)
    6a56:	4798      	blx	r3
    6a58:	2340      	movs	r3, #64	; 0x40
    6a5a:	18fb      	adds	r3, r7, r3
    6a5c:	2200      	movs	r2, #0
    6a5e:	701a      	strb	r2, [r3, #0]
    6a60:	2340      	movs	r3, #64	; 0x40
    6a62:	18fb      	adds	r3, r7, r3
    6a64:	2202      	movs	r2, #2
    6a66:	605a      	str	r2, [r3, #4]
    6a68:	2340      	movs	r3, #64	; 0x40
    6a6a:	18fb      	adds	r3, r7, r3
    6a6c:	2200      	movs	r2, #0
    6a6e:	721a      	strb	r2, [r3, #8]
    6a70:	2340      	movs	r3, #64	; 0x40
    6a72:	18fb      	adds	r3, r7, r3
    6a74:	2200      	movs	r2, #0
    6a76:	725a      	strb	r2, [r3, #9]
    6a78:	2340      	movs	r3, #64	; 0x40
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	2004      	movs	r0, #4
    6a7e:	1c19      	adds	r1, r3, #0
    6a80:	4b32      	ldr	r3, [pc, #200]	; (6b4c <system_clock_init+0x210>)
    6a82:	4798      	blx	r3
    6a84:	2004      	movs	r0, #4
    6a86:	4b32      	ldr	r3, [pc, #200]	; (6b50 <system_clock_init+0x214>)
    6a88:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6a8a:	230c      	movs	r3, #12
    6a8c:	18fb      	adds	r3, r7, r3
    6a8e:	1c18      	adds	r0, r3, #0
    6a90:	4b30      	ldr	r3, [pc, #192]	; (6b54 <system_clock_init+0x218>)
    6a92:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6a94:	230c      	movs	r3, #12
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	2203      	movs	r2, #3
    6a9a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6a9c:	230c      	movs	r3, #12
    6a9e:	18fb      	adds	r3, r7, r3
    6aa0:	2000      	movs	r0, #0
    6aa2:	1c19      	adds	r1, r3, #0
    6aa4:	4b2c      	ldr	r3, [pc, #176]	; (6b58 <system_clock_init+0x21c>)
    6aa6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6aa8:	2000      	movs	r0, #0
    6aaa:	4b2c      	ldr	r3, [pc, #176]	; (6b5c <system_clock_init+0x220>)
    6aac:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6aae:	2007      	movs	r0, #7
    6ab0:	4b23      	ldr	r3, [pc, #140]	; (6b40 <system_clock_init+0x204>)
    6ab2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6ab4:	46c0      	nop			; (mov r8, r8)
    6ab6:	2007      	movs	r0, #7
    6ab8:	4b29      	ldr	r3, [pc, #164]	; (6b60 <system_clock_init+0x224>)
    6aba:	4798      	blx	r3
    6abc:	1c03      	adds	r3, r0, #0
    6abe:	1c1a      	adds	r2, r3, #0
    6ac0:	2301      	movs	r3, #1
    6ac2:	4053      	eors	r3, r2
    6ac4:	b2db      	uxtb	r3, r3
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d1f5      	bne.n	6ab6 <system_clock_init+0x17a>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6aca:	2000      	movs	r0, #0
    6acc:	4b25      	ldr	r3, [pc, #148]	; (6b64 <system_clock_init+0x228>)
    6ace:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6ad0:	2000      	movs	r0, #0
    6ad2:	2100      	movs	r1, #0
    6ad4:	4b24      	ldr	r3, [pc, #144]	; (6b68 <system_clock_init+0x22c>)
    6ad6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6ad8:	2001      	movs	r0, #1
    6ada:	2100      	movs	r1, #0
    6adc:	4b22      	ldr	r3, [pc, #136]	; (6b68 <system_clock_init+0x22c>)
    6ade:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6ae0:	2002      	movs	r0, #2
    6ae2:	2100      	movs	r1, #0
    6ae4:	4b20      	ldr	r3, [pc, #128]	; (6b68 <system_clock_init+0x22c>)
    6ae6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6ae8:	1c3b      	adds	r3, r7, #0
    6aea:	1c18      	adds	r0, r3, #0
    6aec:	4b16      	ldr	r3, [pc, #88]	; (6b48 <system_clock_init+0x20c>)
    6aee:	4798      	blx	r3
    6af0:	1c3b      	adds	r3, r7, #0
    6af2:	2207      	movs	r2, #7
    6af4:	701a      	strb	r2, [r3, #0]
    6af6:	1c3b      	adds	r3, r7, #0
    6af8:	2201      	movs	r2, #1
    6afa:	605a      	str	r2, [r3, #4]
    6afc:	1c3b      	adds	r3, r7, #0
    6afe:	2200      	movs	r2, #0
    6b00:	721a      	strb	r2, [r3, #8]
    6b02:	1c3b      	adds	r3, r7, #0
    6b04:	2200      	movs	r2, #0
    6b06:	725a      	strb	r2, [r3, #9]
    6b08:	1c3b      	adds	r3, r7, #0
    6b0a:	2000      	movs	r0, #0
    6b0c:	1c19      	adds	r1, r3, #0
    6b0e:	4b0f      	ldr	r3, [pc, #60]	; (6b4c <system_clock_init+0x210>)
    6b10:	4798      	blx	r3
    6b12:	2000      	movs	r0, #0
    6b14:	4b0e      	ldr	r3, [pc, #56]	; (6b50 <system_clock_init+0x214>)
    6b16:	4798      	blx	r3
#endif
}
    6b18:	46bd      	mov	sp, r7
    6b1a:	b026      	add	sp, #152	; 0x98
    6b1c:	bd80      	pop	{r7, pc}
    6b1e:	46c0      	nop			; (mov r8, r8)
    6b20:	40000800 	.word	0x40000800
    6b24:	00006541 	.word	0x00006541
    6b28:	00006905 	.word	0x00006905
    6b2c:	0000647d 	.word	0x0000647d
    6b30:	00806024 	.word	0x00806024
    6b34:	00006709 	.word	0x00006709
    6b38:	0000645d 	.word	0x0000645d
    6b3c:	00006691 	.word	0x00006691
    6b40:	000067d5 	.word	0x000067d5
    6b44:	00006c0d 	.word	0x00006c0d
    6b48:	0000641d 	.word	0x0000641d
    6b4c:	00006c3d 	.word	0x00006c3d
    6b50:	00006d5d 	.word	0x00006d5d
    6b54:	00006449 	.word	0x00006449
    6b58:	00006e9d 	.word	0x00006e9d
    6b5c:	00006ee1 	.word	0x00006ee1
    6b60:	00006881 	.word	0x00006881
    6b64:	000064cd 	.word	0x000064cd
    6b68:	000064ed 	.word	0x000064ed

00006b6c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6b6c:	b580      	push	{r7, lr}
    6b6e:	b082      	sub	sp, #8
    6b70:	af00      	add	r7, sp, #0
    6b72:	1c02      	adds	r2, r0, #0
    6b74:	6039      	str	r1, [r7, #0]
    6b76:	1dfb      	adds	r3, r7, #7
    6b78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6b7a:	1dfb      	adds	r3, r7, #7
    6b7c:	781b      	ldrb	r3, [r3, #0]
    6b7e:	2b01      	cmp	r3, #1
    6b80:	d00a      	beq.n	6b98 <system_apb_clock_set_mask+0x2c>
    6b82:	2b02      	cmp	r3, #2
    6b84:	d00f      	beq.n	6ba6 <system_apb_clock_set_mask+0x3a>
    6b86:	2b00      	cmp	r3, #0
    6b88:	d114      	bne.n	6bb4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6b8a:	4b0e      	ldr	r3, [pc, #56]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6b8c:	4a0d      	ldr	r2, [pc, #52]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6b8e:	6991      	ldr	r1, [r2, #24]
    6b90:	683a      	ldr	r2, [r7, #0]
    6b92:	430a      	orrs	r2, r1
    6b94:	619a      	str	r2, [r3, #24]
			break;
    6b96:	e00f      	b.n	6bb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6b98:	4b0a      	ldr	r3, [pc, #40]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6b9a:	4a0a      	ldr	r2, [pc, #40]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6b9c:	69d1      	ldr	r1, [r2, #28]
    6b9e:	683a      	ldr	r2, [r7, #0]
    6ba0:	430a      	orrs	r2, r1
    6ba2:	61da      	str	r2, [r3, #28]
			break;
    6ba4:	e008      	b.n	6bb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6ba6:	4b07      	ldr	r3, [pc, #28]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6ba8:	4a06      	ldr	r2, [pc, #24]	; (6bc4 <system_apb_clock_set_mask+0x58>)
    6baa:	6a11      	ldr	r1, [r2, #32]
    6bac:	683a      	ldr	r2, [r7, #0]
    6bae:	430a      	orrs	r2, r1
    6bb0:	621a      	str	r2, [r3, #32]
			break;
    6bb2:	e001      	b.n	6bb8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6bb4:	2317      	movs	r3, #23
    6bb6:	e000      	b.n	6bba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6bb8:	2300      	movs	r3, #0
}
    6bba:	1c18      	adds	r0, r3, #0
    6bbc:	46bd      	mov	sp, r7
    6bbe:	b002      	add	sp, #8
    6bc0:	bd80      	pop	{r7, pc}
    6bc2:	46c0      	nop			; (mov r8, r8)
    6bc4:	40000400 	.word	0x40000400

00006bc8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6bcc:	4b01      	ldr	r3, [pc, #4]	; (6bd4 <system_interrupt_enter_critical_section+0xc>)
    6bce:	4798      	blx	r3
}
    6bd0:	46bd      	mov	sp, r7
    6bd2:	bd80      	pop	{r7, pc}
    6bd4:	000061c9 	.word	0x000061c9

00006bd8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6bd8:	b580      	push	{r7, lr}
    6bda:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6bdc:	4b01      	ldr	r3, [pc, #4]	; (6be4 <system_interrupt_leave_critical_section+0xc>)
    6bde:	4798      	blx	r3
}
    6be0:	46bd      	mov	sp, r7
    6be2:	bd80      	pop	{r7, pc}
    6be4:	00006219 	.word	0x00006219

00006be8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6bec:	4b06      	ldr	r3, [pc, #24]	; (6c08 <system_gclk_is_syncing+0x20>)
    6bee:	785b      	ldrb	r3, [r3, #1]
    6bf0:	b2db      	uxtb	r3, r3
    6bf2:	b2db      	uxtb	r3, r3
    6bf4:	b25b      	sxtb	r3, r3
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	da01      	bge.n	6bfe <system_gclk_is_syncing+0x16>
		return true;
    6bfa:	2301      	movs	r3, #1
    6bfc:	e000      	b.n	6c00 <system_gclk_is_syncing+0x18>
	}

	return false;
    6bfe:	2300      	movs	r3, #0
}
    6c00:	1c18      	adds	r0, r3, #0
    6c02:	46bd      	mov	sp, r7
    6c04:	bd80      	pop	{r7, pc}
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	40000c00 	.word	0x40000c00

00006c0c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6c0c:	b580      	push	{r7, lr}
    6c0e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6c10:	2000      	movs	r0, #0
    6c12:	2108      	movs	r1, #8
    6c14:	4b07      	ldr	r3, [pc, #28]	; (6c34 <system_gclk_init+0x28>)
    6c16:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6c18:	4b07      	ldr	r3, [pc, #28]	; (6c38 <system_gclk_init+0x2c>)
    6c1a:	2201      	movs	r2, #1
    6c1c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6c1e:	46c0      	nop			; (mov r8, r8)
    6c20:	4b05      	ldr	r3, [pc, #20]	; (6c38 <system_gclk_init+0x2c>)
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	b2db      	uxtb	r3, r3
    6c26:	1c1a      	adds	r2, r3, #0
    6c28:	2301      	movs	r3, #1
    6c2a:	4013      	ands	r3, r2
    6c2c:	d1f8      	bne.n	6c20 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6c2e:	46bd      	mov	sp, r7
    6c30:	bd80      	pop	{r7, pc}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	00006b6d 	.word	0x00006b6d
    6c38:	40000c00 	.word	0x40000c00

00006c3c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b086      	sub	sp, #24
    6c40:	af00      	add	r7, sp, #0
    6c42:	1c02      	adds	r2, r0, #0
    6c44:	6039      	str	r1, [r7, #0]
    6c46:	1dfb      	adds	r3, r7, #7
    6c48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6c4a:	1dfb      	adds	r3, r7, #7
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6c50:	1dfb      	adds	r3, r7, #7
    6c52:	781b      	ldrb	r3, [r3, #0]
    6c54:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6c56:	683b      	ldr	r3, [r7, #0]
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	021b      	lsls	r3, r3, #8
    6c5c:	1c1a      	adds	r2, r3, #0
    6c5e:	697b      	ldr	r3, [r7, #20]
    6c60:	4313      	orrs	r3, r2
    6c62:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6c64:	683b      	ldr	r3, [r7, #0]
    6c66:	785b      	ldrb	r3, [r3, #1]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d004      	beq.n	6c76 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6c6c:	697b      	ldr	r3, [r7, #20]
    6c6e:	2280      	movs	r2, #128	; 0x80
    6c70:	02d2      	lsls	r2, r2, #11
    6c72:	4313      	orrs	r3, r2
    6c74:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6c76:	683b      	ldr	r3, [r7, #0]
    6c78:	7a5b      	ldrb	r3, [r3, #9]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d004      	beq.n	6c88 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6c7e:	697b      	ldr	r3, [r7, #20]
    6c80:	2280      	movs	r2, #128	; 0x80
    6c82:	0312      	lsls	r2, r2, #12
    6c84:	4313      	orrs	r3, r2
    6c86:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6c88:	683b      	ldr	r3, [r7, #0]
    6c8a:	685b      	ldr	r3, [r3, #4]
    6c8c:	2b01      	cmp	r3, #1
    6c8e:	d92c      	bls.n	6cea <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6c90:	683b      	ldr	r3, [r7, #0]
    6c92:	685a      	ldr	r2, [r3, #4]
    6c94:	683b      	ldr	r3, [r7, #0]
    6c96:	685b      	ldr	r3, [r3, #4]
    6c98:	3b01      	subs	r3, #1
    6c9a:	4013      	ands	r3, r2
    6c9c:	d11a      	bne.n	6cd4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6c9e:	2300      	movs	r3, #0
    6ca0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6ca2:	2302      	movs	r3, #2
    6ca4:	60bb      	str	r3, [r7, #8]
    6ca6:	e005      	b.n	6cb4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6ca8:	68fb      	ldr	r3, [r7, #12]
    6caa:	3301      	adds	r3, #1
    6cac:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    6cae:	68bb      	ldr	r3, [r7, #8]
    6cb0:	005b      	lsls	r3, r3, #1
    6cb2:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6cb4:	683b      	ldr	r3, [r7, #0]
    6cb6:	685a      	ldr	r2, [r3, #4]
    6cb8:	68bb      	ldr	r3, [r7, #8]
    6cba:	429a      	cmp	r2, r3
    6cbc:	d8f4      	bhi.n	6ca8 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	021b      	lsls	r3, r3, #8
    6cc2:	693a      	ldr	r2, [r7, #16]
    6cc4:	4313      	orrs	r3, r2
    6cc6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6cc8:	697b      	ldr	r3, [r7, #20]
    6cca:	2280      	movs	r2, #128	; 0x80
    6ccc:	0352      	lsls	r2, r2, #13
    6cce:	4313      	orrs	r3, r2
    6cd0:	617b      	str	r3, [r7, #20]
    6cd2:	e00a      	b.n	6cea <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6cd4:	683b      	ldr	r3, [r7, #0]
    6cd6:	685b      	ldr	r3, [r3, #4]
    6cd8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6cda:	693a      	ldr	r2, [r7, #16]
    6cdc:	4313      	orrs	r3, r2
    6cde:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6ce0:	697b      	ldr	r3, [r7, #20]
    6ce2:	2280      	movs	r2, #128	; 0x80
    6ce4:	0292      	lsls	r2, r2, #10
    6ce6:	4313      	orrs	r3, r2
    6ce8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6cea:	683b      	ldr	r3, [r7, #0]
    6cec:	7a1b      	ldrb	r3, [r3, #8]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d004      	beq.n	6cfc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6cf2:	697b      	ldr	r3, [r7, #20]
    6cf4:	2280      	movs	r2, #128	; 0x80
    6cf6:	0392      	lsls	r2, r2, #14
    6cf8:	4313      	orrs	r3, r2
    6cfa:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6cfc:	46c0      	nop			; (mov r8, r8)
    6cfe:	4b12      	ldr	r3, [pc, #72]	; (6d48 <system_gclk_gen_set_config+0x10c>)
    6d00:	4798      	blx	r3
    6d02:	1e03      	subs	r3, r0, #0
    6d04:	d1fb      	bne.n	6cfe <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6d06:	4b11      	ldr	r3, [pc, #68]	; (6d4c <system_gclk_gen_set_config+0x110>)
    6d08:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6d0a:	4a11      	ldr	r2, [pc, #68]	; (6d50 <system_gclk_gen_set_config+0x114>)
    6d0c:	1dfb      	adds	r3, r7, #7
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	4b0c      	ldr	r3, [pc, #48]	; (6d48 <system_gclk_gen_set_config+0x10c>)
    6d16:	4798      	blx	r3
    6d18:	1e03      	subs	r3, r0, #0
    6d1a:	d1fb      	bne.n	6d14 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6d1c:	4b0d      	ldr	r3, [pc, #52]	; (6d54 <system_gclk_gen_set_config+0x118>)
    6d1e:	693a      	ldr	r2, [r7, #16]
    6d20:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6d22:	46c0      	nop			; (mov r8, r8)
    6d24:	4b08      	ldr	r3, [pc, #32]	; (6d48 <system_gclk_gen_set_config+0x10c>)
    6d26:	4798      	blx	r3
    6d28:	1e03      	subs	r3, r0, #0
    6d2a:	d1fb      	bne.n	6d24 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6d2c:	4b09      	ldr	r3, [pc, #36]	; (6d54 <system_gclk_gen_set_config+0x118>)
    6d2e:	4a09      	ldr	r2, [pc, #36]	; (6d54 <system_gclk_gen_set_config+0x118>)
    6d30:	6851      	ldr	r1, [r2, #4]
    6d32:	2280      	movs	r2, #128	; 0x80
    6d34:	0252      	lsls	r2, r2, #9
    6d36:	4011      	ands	r1, r2
    6d38:	697a      	ldr	r2, [r7, #20]
    6d3a:	430a      	orrs	r2, r1
    6d3c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6d3e:	4b06      	ldr	r3, [pc, #24]	; (6d58 <system_gclk_gen_set_config+0x11c>)
    6d40:	4798      	blx	r3
}
    6d42:	46bd      	mov	sp, r7
    6d44:	b006      	add	sp, #24
    6d46:	bd80      	pop	{r7, pc}
    6d48:	00006be9 	.word	0x00006be9
    6d4c:	00006bc9 	.word	0x00006bc9
    6d50:	40000c08 	.word	0x40000c08
    6d54:	40000c00 	.word	0x40000c00
    6d58:	00006bd9 	.word	0x00006bd9

00006d5c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6d5c:	b580      	push	{r7, lr}
    6d5e:	b082      	sub	sp, #8
    6d60:	af00      	add	r7, sp, #0
    6d62:	1c02      	adds	r2, r0, #0
    6d64:	1dfb      	adds	r3, r7, #7
    6d66:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6d68:	46c0      	nop			; (mov r8, r8)
    6d6a:	4b0d      	ldr	r3, [pc, #52]	; (6da0 <system_gclk_gen_enable+0x44>)
    6d6c:	4798      	blx	r3
    6d6e:	1e03      	subs	r3, r0, #0
    6d70:	d1fb      	bne.n	6d6a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6d72:	4b0c      	ldr	r3, [pc, #48]	; (6da4 <system_gclk_gen_enable+0x48>)
    6d74:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6d76:	4a0c      	ldr	r2, [pc, #48]	; (6da8 <system_gclk_gen_enable+0x4c>)
    6d78:	1dfb      	adds	r3, r7, #7
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	4b07      	ldr	r3, [pc, #28]	; (6da0 <system_gclk_gen_enable+0x44>)
    6d82:	4798      	blx	r3
    6d84:	1e03      	subs	r3, r0, #0
    6d86:	d1fb      	bne.n	6d80 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6d88:	4b08      	ldr	r3, [pc, #32]	; (6dac <system_gclk_gen_enable+0x50>)
    6d8a:	4a08      	ldr	r2, [pc, #32]	; (6dac <system_gclk_gen_enable+0x50>)
    6d8c:	6852      	ldr	r2, [r2, #4]
    6d8e:	2180      	movs	r1, #128	; 0x80
    6d90:	0249      	lsls	r1, r1, #9
    6d92:	430a      	orrs	r2, r1
    6d94:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6d96:	4b06      	ldr	r3, [pc, #24]	; (6db0 <system_gclk_gen_enable+0x54>)
    6d98:	4798      	blx	r3
}
    6d9a:	46bd      	mov	sp, r7
    6d9c:	b002      	add	sp, #8
    6d9e:	bd80      	pop	{r7, pc}
    6da0:	00006be9 	.word	0x00006be9
    6da4:	00006bc9 	.word	0x00006bc9
    6da8:	40000c04 	.word	0x40000c04
    6dac:	40000c00 	.word	0x40000c00
    6db0:	00006bd9 	.word	0x00006bd9

00006db4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	b086      	sub	sp, #24
    6db8:	af00      	add	r7, sp, #0
    6dba:	1c02      	adds	r2, r0, #0
    6dbc:	1dfb      	adds	r3, r7, #7
    6dbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6dc0:	46c0      	nop			; (mov r8, r8)
    6dc2:	4b2e      	ldr	r3, [pc, #184]	; (6e7c <system_gclk_gen_get_hz+0xc8>)
    6dc4:	4798      	blx	r3
    6dc6:	1e03      	subs	r3, r0, #0
    6dc8:	d1fb      	bne.n	6dc2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6dca:	4b2d      	ldr	r3, [pc, #180]	; (6e80 <system_gclk_gen_get_hz+0xcc>)
    6dcc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6dce:	4a2d      	ldr	r2, [pc, #180]	; (6e84 <system_gclk_gen_get_hz+0xd0>)
    6dd0:	1dfb      	adds	r3, r7, #7
    6dd2:	781b      	ldrb	r3, [r3, #0]
    6dd4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6dd6:	46c0      	nop			; (mov r8, r8)
    6dd8:	4b28      	ldr	r3, [pc, #160]	; (6e7c <system_gclk_gen_get_hz+0xc8>)
    6dda:	4798      	blx	r3
    6ddc:	1e03      	subs	r3, r0, #0
    6dde:	d1fb      	bne.n	6dd8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6de0:	4b29      	ldr	r3, [pc, #164]	; (6e88 <system_gclk_gen_get_hz+0xd4>)
    6de2:	685b      	ldr	r3, [r3, #4]
    6de4:	0a1b      	lsrs	r3, r3, #8
    6de6:	1c1a      	adds	r2, r3, #0
    6de8:	231f      	movs	r3, #31
    6dea:	4013      	ands	r3, r2
    6dec:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6dee:	1c18      	adds	r0, r3, #0
    6df0:	4b26      	ldr	r3, [pc, #152]	; (6e8c <system_gclk_gen_get_hz+0xd8>)
    6df2:	4798      	blx	r3
    6df4:	1c03      	adds	r3, r0, #0
    6df6:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6df8:	4a22      	ldr	r2, [pc, #136]	; (6e84 <system_gclk_gen_get_hz+0xd0>)
    6dfa:	1dfb      	adds	r3, r7, #7
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6e00:	4b21      	ldr	r3, [pc, #132]	; (6e88 <system_gclk_gen_get_hz+0xd4>)
    6e02:	685b      	ldr	r3, [r3, #4]
    6e04:	0d1b      	lsrs	r3, r3, #20
    6e06:	1c1a      	adds	r2, r3, #0
    6e08:	2301      	movs	r3, #1
    6e0a:	4013      	ands	r3, r2
    6e0c:	b2da      	uxtb	r2, r3
    6e0e:	2313      	movs	r3, #19
    6e10:	18fb      	adds	r3, r7, r3
    6e12:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6e14:	4a1e      	ldr	r2, [pc, #120]	; (6e90 <system_gclk_gen_get_hz+0xdc>)
    6e16:	1dfb      	adds	r3, r7, #7
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6e1c:	46c0      	nop			; (mov r8, r8)
    6e1e:	4b17      	ldr	r3, [pc, #92]	; (6e7c <system_gclk_gen_get_hz+0xc8>)
    6e20:	4798      	blx	r3
    6e22:	1e03      	subs	r3, r0, #0
    6e24:	d1fb      	bne.n	6e1e <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6e26:	4b18      	ldr	r3, [pc, #96]	; (6e88 <system_gclk_gen_get_hz+0xd4>)
    6e28:	689b      	ldr	r3, [r3, #8]
    6e2a:	0a1b      	lsrs	r3, r3, #8
    6e2c:	1c1a      	adds	r2, r3, #0
    6e2e:	2300      	movs	r3, #0
    6e30:	439a      	bics	r2, r3
    6e32:	1c13      	adds	r3, r2, #0
    6e34:	b29b      	uxth	r3, r3
    6e36:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6e38:	4b16      	ldr	r3, [pc, #88]	; (6e94 <system_gclk_gen_get_hz+0xe0>)
    6e3a:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6e3c:	2313      	movs	r3, #19
    6e3e:	18fb      	adds	r3, r7, r3
    6e40:	781b      	ldrb	r3, [r3, #0]
    6e42:	2b00      	cmp	r3, #0
    6e44:	d109      	bne.n	6e5a <system_gclk_gen_get_hz+0xa6>
    6e46:	68fb      	ldr	r3, [r7, #12]
    6e48:	2b01      	cmp	r3, #1
    6e4a:	d906      	bls.n	6e5a <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    6e4c:	4b12      	ldr	r3, [pc, #72]	; (6e98 <system_gclk_gen_get_hz+0xe4>)
    6e4e:	6978      	ldr	r0, [r7, #20]
    6e50:	68f9      	ldr	r1, [r7, #12]
    6e52:	4798      	blx	r3
    6e54:	1c03      	adds	r3, r0, #0
    6e56:	617b      	str	r3, [r7, #20]
    6e58:	e00a      	b.n	6e70 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    6e5a:	2313      	movs	r3, #19
    6e5c:	18fb      	adds	r3, r7, r3
    6e5e:	781b      	ldrb	r3, [r3, #0]
    6e60:	2b00      	cmp	r3, #0
    6e62:	d005      	beq.n	6e70 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    6e64:	68fb      	ldr	r3, [r7, #12]
    6e66:	3301      	adds	r3, #1
    6e68:	1c1a      	adds	r2, r3, #0
    6e6a:	697b      	ldr	r3, [r7, #20]
    6e6c:	40d3      	lsrs	r3, r2
    6e6e:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6e70:	697b      	ldr	r3, [r7, #20]
}
    6e72:	1c18      	adds	r0, r3, #0
    6e74:	46bd      	mov	sp, r7
    6e76:	b006      	add	sp, #24
    6e78:	bd80      	pop	{r7, pc}
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	00006be9 	.word	0x00006be9
    6e80:	00006bc9 	.word	0x00006bc9
    6e84:	40000c04 	.word	0x40000c04
    6e88:	40000c00 	.word	0x40000c00
    6e8c:	000065d1 	.word	0x000065d1
    6e90:	40000c08 	.word	0x40000c08
    6e94:	00006bd9 	.word	0x00006bd9
    6e98:	00007755 	.word	0x00007755

00006e9c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b084      	sub	sp, #16
    6ea0:	af00      	add	r7, sp, #0
    6ea2:	1c02      	adds	r2, r0, #0
    6ea4:	6039      	str	r1, [r7, #0]
    6ea6:	1dfb      	adds	r3, r7, #7
    6ea8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6eaa:	1dfb      	adds	r3, r7, #7
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6eb0:	683b      	ldr	r3, [r7, #0]
    6eb2:	781b      	ldrb	r3, [r3, #0]
    6eb4:	021b      	lsls	r3, r3, #8
    6eb6:	1c1a      	adds	r2, r3, #0
    6eb8:	68fb      	ldr	r3, [r7, #12]
    6eba:	4313      	orrs	r3, r2
    6ebc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6ebe:	1dfb      	adds	r3, r7, #7
    6ec0:	781b      	ldrb	r3, [r3, #0]
    6ec2:	1c18      	adds	r0, r3, #0
    6ec4:	4b04      	ldr	r3, [pc, #16]	; (6ed8 <system_gclk_chan_set_config+0x3c>)
    6ec6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6ec8:	4b04      	ldr	r3, [pc, #16]	; (6edc <system_gclk_chan_set_config+0x40>)
    6eca:	68fa      	ldr	r2, [r7, #12]
    6ecc:	b292      	uxth	r2, r2
    6ece:	805a      	strh	r2, [r3, #2]
}
    6ed0:	46bd      	mov	sp, r7
    6ed2:	b004      	add	sp, #16
    6ed4:	bd80      	pop	{r7, pc}
    6ed6:	46c0      	nop			; (mov r8, r8)
    6ed8:	00006f25 	.word	0x00006f25
    6edc:	40000c00 	.word	0x40000c00

00006ee0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6ee0:	b580      	push	{r7, lr}
    6ee2:	b082      	sub	sp, #8
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	1c02      	adds	r2, r0, #0
    6ee8:	1dfb      	adds	r3, r7, #7
    6eea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6eec:	4b09      	ldr	r3, [pc, #36]	; (6f14 <system_gclk_chan_enable+0x34>)
    6eee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6ef0:	4a09      	ldr	r2, [pc, #36]	; (6f18 <system_gclk_chan_enable+0x38>)
    6ef2:	1dfb      	adds	r3, r7, #7
    6ef4:	781b      	ldrb	r3, [r3, #0]
    6ef6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6ef8:	4908      	ldr	r1, [pc, #32]	; (6f1c <system_gclk_chan_enable+0x3c>)
    6efa:	4b08      	ldr	r3, [pc, #32]	; (6f1c <system_gclk_chan_enable+0x3c>)
    6efc:	885b      	ldrh	r3, [r3, #2]
    6efe:	b29b      	uxth	r3, r3
    6f00:	2280      	movs	r2, #128	; 0x80
    6f02:	01d2      	lsls	r2, r2, #7
    6f04:	4313      	orrs	r3, r2
    6f06:	b29b      	uxth	r3, r3
    6f08:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6f0a:	4b05      	ldr	r3, [pc, #20]	; (6f20 <system_gclk_chan_enable+0x40>)
    6f0c:	4798      	blx	r3
}
    6f0e:	46bd      	mov	sp, r7
    6f10:	b002      	add	sp, #8
    6f12:	bd80      	pop	{r7, pc}
    6f14:	00006bc9 	.word	0x00006bc9
    6f18:	40000c02 	.word	0x40000c02
    6f1c:	40000c00 	.word	0x40000c00
    6f20:	00006bd9 	.word	0x00006bd9

00006f24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b084      	sub	sp, #16
    6f28:	af00      	add	r7, sp, #0
    6f2a:	1c02      	adds	r2, r0, #0
    6f2c:	1dfb      	adds	r3, r7, #7
    6f2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6f30:	4b1d      	ldr	r3, [pc, #116]	; (6fa8 <system_gclk_chan_disable+0x84>)
    6f32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6f34:	4a1d      	ldr	r2, [pc, #116]	; (6fac <system_gclk_chan_disable+0x88>)
    6f36:	1dfb      	adds	r3, r7, #7
    6f38:	781b      	ldrb	r3, [r3, #0]
    6f3a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6f3c:	4b1c      	ldr	r3, [pc, #112]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f3e:	885b      	ldrh	r3, [r3, #2]
    6f40:	b29b      	uxth	r3, r3
    6f42:	0a1b      	lsrs	r3, r3, #8
    6f44:	1c1a      	adds	r2, r3, #0
    6f46:	230f      	movs	r3, #15
    6f48:	4013      	ands	r3, r2
    6f4a:	b2db      	uxtb	r3, r3
    6f4c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6f4e:	4b18      	ldr	r3, [pc, #96]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f50:	885a      	ldrh	r2, [r3, #2]
    6f52:	4918      	ldr	r1, [pc, #96]	; (6fb4 <system_gclk_chan_disable+0x90>)
    6f54:	400a      	ands	r2, r1
    6f56:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6f58:	4a15      	ldr	r2, [pc, #84]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f5a:	4b15      	ldr	r3, [pc, #84]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f5c:	885b      	ldrh	r3, [r3, #2]
    6f5e:	b29b      	uxth	r3, r3
    6f60:	4915      	ldr	r1, [pc, #84]	; (6fb8 <system_gclk_chan_disable+0x94>)
    6f62:	400b      	ands	r3, r1
    6f64:	b29b      	uxth	r3, r3
    6f66:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6f68:	46c0      	nop			; (mov r8, r8)
    6f6a:	4b11      	ldr	r3, [pc, #68]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f6c:	885b      	ldrh	r3, [r3, #2]
    6f6e:	b29b      	uxth	r3, r3
    6f70:	1c1a      	adds	r2, r3, #0
    6f72:	2380      	movs	r3, #128	; 0x80
    6f74:	01db      	lsls	r3, r3, #7
    6f76:	4013      	ands	r3, r2
    6f78:	d1f7      	bne.n	6f6a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6f7a:	4b0d      	ldr	r3, [pc, #52]	; (6fb0 <system_gclk_chan_disable+0x8c>)
    6f7c:	68fa      	ldr	r2, [r7, #12]
    6f7e:	b2d2      	uxtb	r2, r2
    6f80:	1c11      	adds	r1, r2, #0
    6f82:	220f      	movs	r2, #15
    6f84:	400a      	ands	r2, r1
    6f86:	b2d2      	uxtb	r2, r2
    6f88:	1c11      	adds	r1, r2, #0
    6f8a:	220f      	movs	r2, #15
    6f8c:	400a      	ands	r2, r1
    6f8e:	0210      	lsls	r0, r2, #8
    6f90:	885a      	ldrh	r2, [r3, #2]
    6f92:	4908      	ldr	r1, [pc, #32]	; (6fb4 <system_gclk_chan_disable+0x90>)
    6f94:	400a      	ands	r2, r1
    6f96:	1c11      	adds	r1, r2, #0
    6f98:	1c02      	adds	r2, r0, #0
    6f9a:	430a      	orrs	r2, r1
    6f9c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    6f9e:	4b07      	ldr	r3, [pc, #28]	; (6fbc <system_gclk_chan_disable+0x98>)
    6fa0:	4798      	blx	r3
}
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b004      	add	sp, #16
    6fa6:	bd80      	pop	{r7, pc}
    6fa8:	00006bc9 	.word	0x00006bc9
    6fac:	40000c02 	.word	0x40000c02
    6fb0:	40000c00 	.word	0x40000c00
    6fb4:	fffff0ff 	.word	0xfffff0ff
    6fb8:	ffffbfff 	.word	0xffffbfff
    6fbc:	00006bd9 	.word	0x00006bd9

00006fc0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	b084      	sub	sp, #16
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	1c02      	adds	r2, r0, #0
    6fc8:	1dfb      	adds	r3, r7, #7
    6fca:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6fcc:	4b0e      	ldr	r3, [pc, #56]	; (7008 <system_gclk_chan_get_hz+0x48>)
    6fce:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6fd0:	4a0e      	ldr	r2, [pc, #56]	; (700c <system_gclk_chan_get_hz+0x4c>)
    6fd2:	1dfb      	adds	r3, r7, #7
    6fd4:	781b      	ldrb	r3, [r3, #0]
    6fd6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6fd8:	4b0d      	ldr	r3, [pc, #52]	; (7010 <system_gclk_chan_get_hz+0x50>)
    6fda:	885b      	ldrh	r3, [r3, #2]
    6fdc:	b29b      	uxth	r3, r3
    6fde:	0a1b      	lsrs	r3, r3, #8
    6fe0:	1c1a      	adds	r2, r3, #0
    6fe2:	230f      	movs	r3, #15
    6fe4:	4013      	ands	r3, r2
    6fe6:	b2da      	uxtb	r2, r3
    6fe8:	230f      	movs	r3, #15
    6fea:	18fb      	adds	r3, r7, r3
    6fec:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6fee:	4b09      	ldr	r3, [pc, #36]	; (7014 <system_gclk_chan_get_hz+0x54>)
    6ff0:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6ff2:	230f      	movs	r3, #15
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	781b      	ldrb	r3, [r3, #0]
    6ff8:	1c18      	adds	r0, r3, #0
    6ffa:	4b07      	ldr	r3, [pc, #28]	; (7018 <system_gclk_chan_get_hz+0x58>)
    6ffc:	4798      	blx	r3
    6ffe:	1c03      	adds	r3, r0, #0
}
    7000:	1c18      	adds	r0, r3, #0
    7002:	46bd      	mov	sp, r7
    7004:	b004      	add	sp, #16
    7006:	bd80      	pop	{r7, pc}
    7008:	00006bc9 	.word	0x00006bc9
    700c:	40000c02 	.word	0x40000c02
    7010:	40000c00 	.word	0x40000c00
    7014:	00006bd9 	.word	0x00006bd9
    7018:	00006db5 	.word	0x00006db5

0000701c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    701c:	b580      	push	{r7, lr}
    701e:	b084      	sub	sp, #16
    7020:	af00      	add	r7, sp, #0
    7022:	1c02      	adds	r2, r0, #0
    7024:	1dfb      	adds	r3, r7, #7
    7026:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7028:	230f      	movs	r3, #15
    702a:	18fb      	adds	r3, r7, r3
    702c:	1dfa      	adds	r2, r7, #7
    702e:	7812      	ldrb	r2, [r2, #0]
    7030:	09d2      	lsrs	r2, r2, #7
    7032:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7034:	230e      	movs	r3, #14
    7036:	18fb      	adds	r3, r7, r3
    7038:	1dfa      	adds	r2, r7, #7
    703a:	7812      	ldrb	r2, [r2, #0]
    703c:	0952      	lsrs	r2, r2, #5
    703e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7040:	4b0d      	ldr	r3, [pc, #52]	; (7078 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7042:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7044:	230f      	movs	r3, #15
    7046:	18fb      	adds	r3, r7, r3
    7048:	781b      	ldrb	r3, [r3, #0]
    704a:	2b00      	cmp	r3, #0
    704c:	d10f      	bne.n	706e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    704e:	230f      	movs	r3, #15
    7050:	18fb      	adds	r3, r7, r3
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	009b      	lsls	r3, r3, #2
    7056:	2210      	movs	r2, #16
    7058:	4694      	mov	ip, r2
    705a:	44bc      	add	ip, r7
    705c:	4463      	add	r3, ip
    705e:	3b08      	subs	r3, #8
    7060:	681a      	ldr	r2, [r3, #0]
    7062:	230e      	movs	r3, #14
    7064:	18fb      	adds	r3, r7, r3
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	01db      	lsls	r3, r3, #7
    706a:	18d3      	adds	r3, r2, r3
    706c:	e000      	b.n	7070 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    706e:	2300      	movs	r3, #0
	}
}
    7070:	1c18      	adds	r0, r3, #0
    7072:	46bd      	mov	sp, r7
    7074:	b004      	add	sp, #16
    7076:	bd80      	pop	{r7, pc}
    7078:	41004400 	.word	0x41004400

0000707c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    707c:	b580      	push	{r7, lr}
    707e:	b088      	sub	sp, #32
    7080:	af00      	add	r7, sp, #0
    7082:	60f8      	str	r0, [r7, #12]
    7084:	60b9      	str	r1, [r7, #8]
    7086:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7088:	2300      	movs	r3, #0
    708a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    708c:	687b      	ldr	r3, [r7, #4]
    708e:	78db      	ldrb	r3, [r3, #3]
    7090:	2201      	movs	r2, #1
    7092:	4053      	eors	r3, r2
    7094:	b2db      	uxtb	r3, r3
    7096:	2b00      	cmp	r3, #0
    7098:	d035      	beq.n	7106 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	2b80      	cmp	r3, #128	; 0x80
    70a0:	d00b      	beq.n	70ba <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    70a2:	69fb      	ldr	r3, [r7, #28]
    70a4:	2280      	movs	r2, #128	; 0x80
    70a6:	0252      	lsls	r2, r2, #9
    70a8:	4313      	orrs	r3, r2
    70aa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	061b      	lsls	r3, r3, #24
    70b2:	1c1a      	adds	r2, r3, #0
    70b4:	69fb      	ldr	r3, [r7, #28]
    70b6:	4313      	orrs	r3, r2
    70b8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    70ba:	687b      	ldr	r3, [r7, #4]
    70bc:	785b      	ldrb	r3, [r3, #1]
    70be:	2b00      	cmp	r3, #0
    70c0:	d003      	beq.n	70ca <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    70c6:	2b02      	cmp	r3, #2
    70c8:	d110      	bne.n	70ec <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    70ca:	69fb      	ldr	r3, [r7, #28]
    70cc:	2280      	movs	r2, #128	; 0x80
    70ce:	0292      	lsls	r2, r2, #10
    70d0:	4313      	orrs	r3, r2
    70d2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	789b      	ldrb	r3, [r3, #2]
    70d8:	2b00      	cmp	r3, #0
    70da:	d004      	beq.n	70e6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    70dc:	69fb      	ldr	r3, [r7, #28]
    70de:	2280      	movs	r2, #128	; 0x80
    70e0:	02d2      	lsls	r2, r2, #11
    70e2:	4313      	orrs	r3, r2
    70e4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    70e6:	68fb      	ldr	r3, [r7, #12]
    70e8:	68ba      	ldr	r2, [r7, #8]
    70ea:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	785b      	ldrb	r3, [r3, #1]
    70f0:	2b01      	cmp	r3, #1
    70f2:	d003      	beq.n	70fc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    70f8:	2b02      	cmp	r3, #2
    70fa:	d107      	bne.n	710c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    70fc:	69fb      	ldr	r3, [r7, #28]
    70fe:	4a21      	ldr	r2, [pc, #132]	; (7184 <_system_pinmux_config+0x108>)
    7100:	4013      	ands	r3, r2
    7102:	61fb      	str	r3, [r7, #28]
    7104:	e002      	b.n	710c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	68ba      	ldr	r2, [r7, #8]
    710a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    710c:	68bb      	ldr	r3, [r7, #8]
    710e:	041b      	lsls	r3, r3, #16
    7110:	0c1b      	lsrs	r3, r3, #16
    7112:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7114:	68bb      	ldr	r3, [r7, #8]
    7116:	0c1b      	lsrs	r3, r3, #16
    7118:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    711a:	69ba      	ldr	r2, [r7, #24]
    711c:	69fb      	ldr	r3, [r7, #28]
    711e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7120:	22a0      	movs	r2, #160	; 0xa0
    7122:	05d2      	lsls	r2, r2, #23
    7124:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    712a:	697a      	ldr	r2, [r7, #20]
    712c:	69fb      	ldr	r3, [r7, #28]
    712e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7130:	22d0      	movs	r2, #208	; 0xd0
    7132:	0612      	lsls	r2, r2, #24
    7134:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7136:	68fb      	ldr	r3, [r7, #12]
    7138:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    713a:	687b      	ldr	r3, [r7, #4]
    713c:	78db      	ldrb	r3, [r3, #3]
    713e:	2201      	movs	r2, #1
    7140:	4053      	eors	r3, r2
    7142:	b2db      	uxtb	r3, r3
    7144:	2b00      	cmp	r3, #0
    7146:	d01a      	beq.n	717e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7148:	69fa      	ldr	r2, [r7, #28]
    714a:	2380      	movs	r3, #128	; 0x80
    714c:	02db      	lsls	r3, r3, #11
    714e:	4013      	ands	r3, r2
    7150:	d00a      	beq.n	7168 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7152:	687b      	ldr	r3, [r7, #4]
    7154:	789b      	ldrb	r3, [r3, #2]
    7156:	2b01      	cmp	r3, #1
    7158:	d103      	bne.n	7162 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    715a:	68fb      	ldr	r3, [r7, #12]
    715c:	68ba      	ldr	r2, [r7, #8]
    715e:	619a      	str	r2, [r3, #24]
    7160:	e002      	b.n	7168 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7162:	68fb      	ldr	r3, [r7, #12]
    7164:	68ba      	ldr	r2, [r7, #8]
    7166:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	785b      	ldrb	r3, [r3, #1]
    716c:	2b01      	cmp	r3, #1
    716e:	d003      	beq.n	7178 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7174:	2b02      	cmp	r3, #2
    7176:	d102      	bne.n	717e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7178:	68fb      	ldr	r3, [r7, #12]
    717a:	68ba      	ldr	r2, [r7, #8]
    717c:	609a      	str	r2, [r3, #8]
		}
	}
}
    717e:	46bd      	mov	sp, r7
    7180:	b008      	add	sp, #32
    7182:	bd80      	pop	{r7, pc}
    7184:	fffbffff 	.word	0xfffbffff

00007188 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7188:	b580      	push	{r7, lr}
    718a:	b084      	sub	sp, #16
    718c:	af00      	add	r7, sp, #0
    718e:	1c02      	adds	r2, r0, #0
    7190:	6039      	str	r1, [r7, #0]
    7192:	1dfb      	adds	r3, r7, #7
    7194:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7196:	1dfb      	adds	r3, r7, #7
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	1c18      	adds	r0, r3, #0
    719c:	4b0b      	ldr	r3, [pc, #44]	; (71cc <system_pinmux_pin_set_config+0x44>)
    719e:	4798      	blx	r3
    71a0:	1c03      	adds	r3, r0, #0
    71a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    71a4:	1dfb      	adds	r3, r7, #7
    71a6:	781b      	ldrb	r3, [r3, #0]
    71a8:	221f      	movs	r2, #31
    71aa:	4013      	ands	r3, r2
    71ac:	2201      	movs	r2, #1
    71ae:	409a      	lsls	r2, r3
    71b0:	1c13      	adds	r3, r2, #0
    71b2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    71b4:	68f9      	ldr	r1, [r7, #12]
    71b6:	68ba      	ldr	r2, [r7, #8]
    71b8:	683b      	ldr	r3, [r7, #0]
    71ba:	1c08      	adds	r0, r1, #0
    71bc:	1c11      	adds	r1, r2, #0
    71be:	1c1a      	adds	r2, r3, #0
    71c0:	4b03      	ldr	r3, [pc, #12]	; (71d0 <system_pinmux_pin_set_config+0x48>)
    71c2:	4798      	blx	r3
}
    71c4:	46bd      	mov	sp, r7
    71c6:	b004      	add	sp, #16
    71c8:	bd80      	pop	{r7, pc}
    71ca:	46c0      	nop			; (mov r8, r8)
    71cc:	0000701d 	.word	0x0000701d
    71d0:	0000707d 	.word	0x0000707d

000071d4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    71d4:	b580      	push	{r7, lr}
    71d6:	af00      	add	r7, sp, #0
	return;
    71d8:	46c0      	nop			; (mov r8, r8)
}
    71da:	46bd      	mov	sp, r7
    71dc:	bd80      	pop	{r7, pc}
    71de:	46c0      	nop			; (mov r8, r8)

000071e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    71e0:	b580      	push	{r7, lr}
    71e2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    71e4:	4b05      	ldr	r3, [pc, #20]	; (71fc <system_init+0x1c>)
    71e6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    71e8:	4b05      	ldr	r3, [pc, #20]	; (7200 <system_init+0x20>)
    71ea:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    71ec:	4b05      	ldr	r3, [pc, #20]	; (7204 <system_init+0x24>)
    71ee:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    71f0:	4b05      	ldr	r3, [pc, #20]	; (7208 <system_init+0x28>)
    71f2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    71f4:	4b05      	ldr	r3, [pc, #20]	; (720c <system_init+0x2c>)
    71f6:	4798      	blx	r3
}
    71f8:	46bd      	mov	sp, r7
    71fa:	bd80      	pop	{r7, pc}
    71fc:	0000693d 	.word	0x0000693d
    7200:	00006349 	.word	0x00006349
    7204:	000071d5 	.word	0x000071d5
    7208:	000013e9 	.word	0x000013e9
    720c:	000071d5 	.word	0x000071d5

00007210 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    7210:	b580      	push	{r7, lr}
    7212:	b082      	sub	sp, #8
    7214:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    7216:	4b2f      	ldr	r3, [pc, #188]	; (72d4 <Reset_Handler+0xc4>)
    7218:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    721a:	4b2f      	ldr	r3, [pc, #188]	; (72d8 <Reset_Handler+0xc8>)
    721c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    721e:	687a      	ldr	r2, [r7, #4]
    7220:	683b      	ldr	r3, [r7, #0]
    7222:	429a      	cmp	r2, r3
    7224:	d00c      	beq.n	7240 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    7226:	e007      	b.n	7238 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    7228:	683b      	ldr	r3, [r7, #0]
    722a:	1d1a      	adds	r2, r3, #4
    722c:	603a      	str	r2, [r7, #0]
    722e:	687a      	ldr	r2, [r7, #4]
    7230:	1d11      	adds	r1, r2, #4
    7232:	6079      	str	r1, [r7, #4]
    7234:	6812      	ldr	r2, [r2, #0]
    7236:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    7238:	683a      	ldr	r2, [r7, #0]
    723a:	4b28      	ldr	r3, [pc, #160]	; (72dc <Reset_Handler+0xcc>)
    723c:	429a      	cmp	r2, r3
    723e:	d3f3      	bcc.n	7228 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7240:	4b27      	ldr	r3, [pc, #156]	; (72e0 <Reset_Handler+0xd0>)
    7242:	603b      	str	r3, [r7, #0]
    7244:	e004      	b.n	7250 <Reset_Handler+0x40>
                *pDest++ = 0;
    7246:	683b      	ldr	r3, [r7, #0]
    7248:	1d1a      	adds	r2, r3, #4
    724a:	603a      	str	r2, [r7, #0]
    724c:	2200      	movs	r2, #0
    724e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7250:	683a      	ldr	r2, [r7, #0]
    7252:	4b24      	ldr	r3, [pc, #144]	; (72e4 <Reset_Handler+0xd4>)
    7254:	429a      	cmp	r2, r3
    7256:	d3f6      	bcc.n	7246 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    7258:	4b23      	ldr	r3, [pc, #140]	; (72e8 <Reset_Handler+0xd8>)
    725a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    725c:	4b23      	ldr	r3, [pc, #140]	; (72ec <Reset_Handler+0xdc>)
    725e:	687a      	ldr	r2, [r7, #4]
    7260:	21ff      	movs	r1, #255	; 0xff
    7262:	438a      	bics	r2, r1
    7264:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7266:	4a22      	ldr	r2, [pc, #136]	; (72f0 <Reset_Handler+0xe0>)
    7268:	2390      	movs	r3, #144	; 0x90
    726a:	005b      	lsls	r3, r3, #1
    726c:	2102      	movs	r1, #2
    726e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7270:	4b20      	ldr	r3, [pc, #128]	; (72f4 <Reset_Handler+0xe4>)
    7272:	78da      	ldrb	r2, [r3, #3]
    7274:	2103      	movs	r1, #3
    7276:	438a      	bics	r2, r1
    7278:	1c11      	adds	r1, r2, #0
    727a:	2202      	movs	r2, #2
    727c:	430a      	orrs	r2, r1
    727e:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7280:	4b1c      	ldr	r3, [pc, #112]	; (72f4 <Reset_Handler+0xe4>)
    7282:	78da      	ldrb	r2, [r3, #3]
    7284:	210c      	movs	r1, #12
    7286:	438a      	bics	r2, r1
    7288:	1c11      	adds	r1, r2, #0
    728a:	2208      	movs	r2, #8
    728c:	430a      	orrs	r2, r1
    728e:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    7290:	4b19      	ldr	r3, [pc, #100]	; (72f8 <Reset_Handler+0xe8>)
    7292:	7b9a      	ldrb	r2, [r3, #14]
    7294:	2130      	movs	r1, #48	; 0x30
    7296:	438a      	bics	r2, r1
    7298:	1c11      	adds	r1, r2, #0
    729a:	2220      	movs	r2, #32
    729c:	430a      	orrs	r2, r1
    729e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    72a0:	4b15      	ldr	r3, [pc, #84]	; (72f8 <Reset_Handler+0xe8>)
    72a2:	7b9a      	ldrb	r2, [r3, #14]
    72a4:	210c      	movs	r1, #12
    72a6:	438a      	bics	r2, r1
    72a8:	1c11      	adds	r1, r2, #0
    72aa:	2208      	movs	r2, #8
    72ac:	430a      	orrs	r2, r1
    72ae:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    72b0:	4b11      	ldr	r3, [pc, #68]	; (72f8 <Reset_Handler+0xe8>)
    72b2:	7b9a      	ldrb	r2, [r3, #14]
    72b4:	2103      	movs	r1, #3
    72b6:	438a      	bics	r2, r1
    72b8:	1c11      	adds	r1, r2, #0
    72ba:	2202      	movs	r2, #2
    72bc:	430a      	orrs	r2, r1
    72be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    72c0:	4b0e      	ldr	r3, [pc, #56]	; (72fc <Reset_Handler+0xec>)
    72c2:	685a      	ldr	r2, [r3, #4]
    72c4:	2180      	movs	r1, #128	; 0x80
    72c6:	430a      	orrs	r2, r1
    72c8:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    72ca:	4b0d      	ldr	r3, [pc, #52]	; (7300 <Reset_Handler+0xf0>)
    72cc:	4798      	blx	r3

        /* Branch to main function */
        main();
    72ce:	4b0d      	ldr	r3, [pc, #52]	; (7304 <Reset_Handler+0xf4>)
    72d0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    72d2:	e7fe      	b.n	72d2 <Reset_Handler+0xc2>
    72d4:	0000ac1c 	.word	0x0000ac1c
    72d8:	20000000 	.word	0x20000000
    72dc:	20000070 	.word	0x20000070
    72e0:	20000070 	.word	0x20000070
    72e4:	20003074 	.word	0x20003074
    72e8:	00000000 	.word	0x00000000
    72ec:	e000ed00 	.word	0xe000ed00
    72f0:	41007000 	.word	0x41007000
    72f4:	41005000 	.word	0x41005000
    72f8:	41004800 	.word	0x41004800
    72fc:	41004000 	.word	0x41004000
    7300:	00009df5 	.word	0x00009df5
    7304:	00007329 	.word	0x00007329

00007308 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7308:	b580      	push	{r7, lr}
    730a:	af00      	add	r7, sp, #0
        while (1) {
        }
    730c:	e7fe      	b.n	730c <Dummy_Handler+0x4>
    730e:	46c0      	nop			; (mov r8, r8)

00007310 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    7310:	b580      	push	{r7, lr}
    7312:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    7314:	4b03      	ldr	r3, [pc, #12]	; (7324 <system_interrupt_enable_global+0x14>)
    7316:	2201      	movs	r2, #1
    7318:	701a      	strb	r2, [r3, #0]
    731a:	f3bf 8f5f 	dmb	sy
    731e:	b662      	cpsie	i
}
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}
    7324:	20000008 	.word	0x20000008

00007328 <main>:
void epd_display_test(void);
//void sd_card_test(void);
//void serial_test(void);

int main (void)
{
    7328:	b580      	push	{r7, lr}
    732a:	af00      	add	r7, sp, #0
	epd_system_init();
    732c:	4b03      	ldr	r3, [pc, #12]	; (733c <main+0x14>)
    732e:	4798      	blx	r3
	epd_display_test();
    7330:	4b03      	ldr	r3, [pc, #12]	; (7340 <main+0x18>)
    7332:	4798      	blx	r3
    7334:	2300      	movs	r3, #0
}
    7336:	1c18      	adds	r0, r3, #0
    7338:	46bd      	mov	sp, r7
    733a:	bd80      	pop	{r7, pc}
    733c:	00007345 	.word	0x00007345
    7340:	00007395 	.word	0x00007395

00007344 <epd_system_init>:

void epd_system_init(void){
    7344:	b580      	push	{r7, lr}
    7346:	af00      	add	r7, sp, #0
// 	port_pin_set_output_level(LED_G_PIN, 1);
// 	port_pin_set_output_level(LED_B_PIN, 1);
// 	
	
		
	system_init();
    7348:	4b0c      	ldr	r3, [pc, #48]	; (737c <epd_system_init+0x38>)
    734a:	4798      	blx	r3
	delay_init();
    734c:	4b0c      	ldr	r3, [pc, #48]	; (7380 <epd_system_init+0x3c>)
    734e:	4798      	blx	r3
	//configure_usart();
	irq_initialize_vectors();
	cpu_irq_enable();
    7350:	4b0c      	ldr	r3, [pc, #48]	; (7384 <epd_system_init+0x40>)
    7352:	2201      	movs	r2, #1
    7354:	701a      	strb	r2, [r3, #0]
    7356:	f3bf 8f5f 	dmb	sy
    735a:	b662      	cpsie	i
	delay_ms(500);
    735c:	23fa      	movs	r3, #250	; 0xfa
    735e:	005b      	lsls	r3, r3, #1
    7360:	1c18      	adds	r0, r3, #0
    7362:	4b09      	ldr	r3, [pc, #36]	; (7388 <epd_system_init+0x44>)
    7364:	4798      	blx	r3
	
	/* Initialize EPD hardware */
	EPD_display_init();
    7366:	4b09      	ldr	r3, [pc, #36]	; (738c <epd_system_init+0x48>)
    7368:	4798      	blx	r3
	system_interrupt_enable_global();
    736a:	4b09      	ldr	r3, [pc, #36]	; (7390 <epd_system_init+0x4c>)
    736c:	4798      	blx	r3
	delay_ms(2000);
    736e:	23fa      	movs	r3, #250	; 0xfa
    7370:	00db      	lsls	r3, r3, #3
    7372:	1c18      	adds	r0, r3, #0
    7374:	4b04      	ldr	r3, [pc, #16]	; (7388 <epd_system_init+0x44>)
    7376:	4798      	blx	r3
}
    7378:	46bd      	mov	sp, r7
    737a:	bd80      	pop	{r7, pc}
    737c:	000071e1 	.word	0x000071e1
    7380:	00006141 	.word	0x00006141
    7384:	20000008 	.word	0x20000008
    7388:	0000619d 	.word	0x0000619d
    738c:	00004b51 	.word	0x00004b51
    7390:	00007311 	.word	0x00007311

00007394 <epd_display_test>:
			port_pin_set_output_level(LED_B_PIN, 0);
		}
	}
}

void epd_display_test(void){
    7394:	b590      	push	{r4, r7, lr}
    7396:	b083      	sub	sp, #12
    7398:	af02      	add	r7, sp, #8
	set_framebuffers(image_array_270_current, image_array_270_previous);
    739a:	4a22      	ldr	r2, [pc, #136]	; (7424 <epd_display_test+0x90>)
    739c:	4b22      	ldr	r3, [pc, #136]	; (7428 <epd_display_test+0x94>)
    739e:	1c10      	adds	r0, r2, #0
    73a0:	1c19      	adds	r1, r3, #0
    73a2:	4b22      	ldr	r3, [pc, #136]	; (742c <epd_display_test+0x98>)
    73a4:	4798      	blx	r3
	
	framebuffer_draw_rectangle(1, 1, DISPLAY_WIDTH, DISPLAY_HEIGHT, PIXEL_SET);
    73a6:	2384      	movs	r3, #132	; 0x84
    73a8:	005a      	lsls	r2, r3, #1
    73aa:	2300      	movs	r3, #0
    73ac:	9300      	str	r3, [sp, #0]
    73ae:	2001      	movs	r0, #1
    73b0:	2101      	movs	r1, #1
    73b2:	23b0      	movs	r3, #176	; 0xb0
    73b4:	4c1e      	ldr	r4, [pc, #120]	; (7430 <epd_display_test+0x9c>)
    73b6:	47a0      	blx	r4
	framebuffer_draw_circle(DISPLAY_WIDTH/2, DISPLAY_HEIGHT/2, 35*2, PIXEL_SET);
    73b8:	2084      	movs	r0, #132	; 0x84
    73ba:	2158      	movs	r1, #88	; 0x58
    73bc:	2246      	movs	r2, #70	; 0x46
    73be:	2300      	movs	r3, #0
    73c0:	4c1c      	ldr	r4, [pc, #112]	; (7434 <epd_display_test+0xa0>)
    73c2:	47a0      	blx	r4
	framebuffer_draw_circle(DISPLAY_WIDTH/2-15*2, DISPLAY_HEIGHT/2-10*2, 16, PIXEL_SET);
    73c4:	2066      	movs	r0, #102	; 0x66
    73c6:	2144      	movs	r1, #68	; 0x44
    73c8:	2210      	movs	r2, #16
    73ca:	2300      	movs	r3, #0
    73cc:	4c19      	ldr	r4, [pc, #100]	; (7434 <epd_display_test+0xa0>)
    73ce:	47a0      	blx	r4
	framebuffer_draw_circle(DISPLAY_WIDTH/2+15*2, DISPLAY_HEIGHT/2-10*2, 16, PIXEL_SET);
    73d0:	20a2      	movs	r0, #162	; 0xa2
    73d2:	2144      	movs	r1, #68	; 0x44
    73d4:	2210      	movs	r2, #16
    73d6:	2300      	movs	r3, #0
    73d8:	4c16      	ldr	r4, [pc, #88]	; (7434 <epd_display_test+0xa0>)
    73da:	47a0      	blx	r4
	framebuffer_draw_line(DISPLAY_WIDTH/2-16, DISPLAY_HEIGHT/2+16, DISPLAY_WIDTH/2+16, DISPLAY_HEIGHT/2+16, PIXEL_SET);
    73dc:	2300      	movs	r3, #0
    73de:	9300      	str	r3, [sp, #0]
    73e0:	2074      	movs	r0, #116	; 0x74
    73e2:	2168      	movs	r1, #104	; 0x68
    73e4:	2294      	movs	r2, #148	; 0x94
    73e6:	2368      	movs	r3, #104	; 0x68
    73e8:	4c13      	ldr	r4, [pc, #76]	; (7438 <epd_display_test+0xa4>)
    73ea:	47a0      	blx	r4
	
	framebuffer_draw_rectangle_filled(50, 50, 0, 0, PIXEL_SET);
    73ec:	2300      	movs	r3, #0
    73ee:	9300      	str	r3, [sp, #0]
    73f0:	2032      	movs	r0, #50	; 0x32
    73f2:	2132      	movs	r1, #50	; 0x32
    73f4:	2200      	movs	r2, #0
    73f6:	2300      	movs	r3, #0
    73f8:	4c10      	ldr	r4, [pc, #64]	; (743c <epd_display_test+0xa8>)
    73fa:	47a0      	blx	r4
	framebuffer_draw_circle_filled(25, 25, 25, PIXEL_CLR);
    73fc:	2019      	movs	r0, #25
    73fe:	2119      	movs	r1, #25
    7400:	2219      	movs	r2, #25
    7402:	2301      	movs	r3, #1
    7404:	4c0e      	ldr	r4, [pc, #56]	; (7440 <epd_display_test+0xac>)
    7406:	47a0      	blx	r4
	framebuffer_draw_text_8pt(10, 5, (uint8_t*)"This is a string.", PIXEL_SET);
    7408:	4b0e      	ldr	r3, [pc, #56]	; (7444 <epd_display_test+0xb0>)
    740a:	200a      	movs	r0, #10
    740c:	2105      	movs	r1, #5
    740e:	1c1a      	adds	r2, r3, #0
    7410:	2300      	movs	r3, #0
    7412:	4c0d      	ldr	r4, [pc, #52]	; (7448 <epd_display_test+0xb4>)
    7414:	47a0      	blx	r4

	epd_display(LANDSCAPE);	
    7416:	2000      	movs	r0, #0
    7418:	4b0c      	ldr	r3, [pc, #48]	; (744c <epd_display_test+0xb8>)
    741a:	4798      	blx	r3
}
    741c:	46bd      	mov	sp, r7
    741e:	b001      	add	sp, #4
    7420:	bd90      	pop	{r4, r7, pc}
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	20001880 	.word	0x20001880
    7428:	200001d0 	.word	0x200001d0
    742c:	00001991 	.word	0x00001991
    7430:	00001d59 	.word	0x00001d59
    7434:	00001ee1 	.word	0x00001ee1
    7438:	00001b99 	.word	0x00001b99
    743c:	00001e01 	.word	0x00001e01
    7440:	00002211 	.word	0x00002211
    7444:	0000aa3c 	.word	0x0000aa3c
    7448:	000022d9 	.word	0x000022d9
    744c:	00001909 	.word	0x00001909

00007450 <sqrt>:
    7450:	b5f0      	push	{r4, r5, r6, r7, lr}
    7452:	4647      	mov	r7, r8
    7454:	b480      	push	{r7}
    7456:	b08c      	sub	sp, #48	; 0x30
    7458:	1c04      	adds	r4, r0, #0
    745a:	1c0d      	adds	r5, r1, #0
    745c:	f000 f854 	bl	7508 <__ieee754_sqrt>
    7460:	4b27      	ldr	r3, [pc, #156]	; (7500 <sqrt+0xb0>)
    7462:	1c06      	adds	r6, r0, #0
    7464:	4698      	mov	r8, r3
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	1c0f      	adds	r7, r1, #0
    746a:	b25b      	sxtb	r3, r3
    746c:	3301      	adds	r3, #1
    746e:	d00d      	beq.n	748c <sqrt+0x3c>
    7470:	1c20      	adds	r0, r4, #0
    7472:	1c29      	adds	r1, r5, #0
    7474:	f000 f93e 	bl	76f4 <__fpclassifyd>
    7478:	2800      	cmp	r0, #0
    747a:	d007      	beq.n	748c <sqrt+0x3c>
    747c:	1c20      	adds	r0, r4, #0
    747e:	1c29      	adds	r1, r5, #0
    7480:	2200      	movs	r2, #0
    7482:	2300      	movs	r3, #0
    7484:	f000 fa0e 	bl	78a4 <__aeabi_dcmplt>
    7488:	2800      	cmp	r0, #0
    748a:	d105      	bne.n	7498 <sqrt+0x48>
    748c:	1c30      	adds	r0, r6, #0
    748e:	1c39      	adds	r1, r7, #0
    7490:	b00c      	add	sp, #48	; 0x30
    7492:	bc04      	pop	{r2}
    7494:	4690      	mov	r8, r2
    7496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7498:	2301      	movs	r3, #1
    749a:	9302      	str	r3, [sp, #8]
    749c:	4b19      	ldr	r3, [pc, #100]	; (7504 <sqrt+0xb4>)
    749e:	9406      	str	r4, [sp, #24]
    74a0:	9507      	str	r5, [sp, #28]
    74a2:	9303      	str	r3, [sp, #12]
    74a4:	2300      	movs	r3, #0
    74a6:	930a      	str	r3, [sp, #40]	; 0x28
    74a8:	4643      	mov	r3, r8
    74aa:	9404      	str	r4, [sp, #16]
    74ac:	9505      	str	r5, [sp, #20]
    74ae:	781c      	ldrb	r4, [r3, #0]
    74b0:	2c00      	cmp	r4, #0
    74b2:	d10f      	bne.n	74d4 <sqrt+0x84>
    74b4:	2300      	movs	r3, #0
    74b6:	2400      	movs	r4, #0
    74b8:	9308      	str	r3, [sp, #32]
    74ba:	9409      	str	r4, [sp, #36]	; 0x24
    74bc:	a802      	add	r0, sp, #8
    74be:	f000 f947 	bl	7750 <matherr>
    74c2:	2800      	cmp	r0, #0
    74c4:	d010      	beq.n	74e8 <sqrt+0x98>
    74c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    74c8:	9301      	str	r3, [sp, #4]
    74ca:	2b00      	cmp	r3, #0
    74cc:	d111      	bne.n	74f2 <sqrt+0xa2>
    74ce:	9e08      	ldr	r6, [sp, #32]
    74d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    74d2:	e7db      	b.n	748c <sqrt+0x3c>
    74d4:	2000      	movs	r0, #0
    74d6:	2100      	movs	r1, #0
    74d8:	1c02      	adds	r2, r0, #0
    74da:	1c0b      	adds	r3, r1, #0
    74dc:	f001 f9c0 	bl	8860 <__aeabi_ddiv>
    74e0:	9008      	str	r0, [sp, #32]
    74e2:	9109      	str	r1, [sp, #36]	; 0x24
    74e4:	2c02      	cmp	r4, #2
    74e6:	d1e9      	bne.n	74bc <sqrt+0x6c>
    74e8:	f002 fc7e 	bl	9de8 <__errno>
    74ec:	2321      	movs	r3, #33	; 0x21
    74ee:	6003      	str	r3, [r0, #0]
    74f0:	e7e9      	b.n	74c6 <sqrt+0x76>
    74f2:	f002 fc79 	bl	9de8 <__errno>
    74f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    74f8:	9301      	str	r3, [sp, #4]
    74fa:	6003      	str	r3, [r0, #0]
    74fc:	e7e7      	b.n	74ce <sqrt+0x7e>
    74fe:	46c0      	nop			; (mov r8, r8)
    7500:	20000009 	.word	0x20000009
    7504:	0000aa50 	.word	0x0000aa50

00007508 <__ieee754_sqrt>:
    7508:	b5f0      	push	{r4, r5, r6, r7, lr}
    750a:	4656      	mov	r6, sl
    750c:	464d      	mov	r5, r9
    750e:	4644      	mov	r4, r8
    7510:	465f      	mov	r7, fp
    7512:	4b75      	ldr	r3, [pc, #468]	; (76e8 <__ieee754_sqrt+0x1e0>)
    7514:	b4f0      	push	{r4, r5, r6, r7}
    7516:	1c0a      	adds	r2, r1, #0
    7518:	1c0e      	adds	r6, r1, #0
    751a:	1c19      	adds	r1, r3, #0
    751c:	b083      	sub	sp, #12
    751e:	1c05      	adds	r5, r0, #0
    7520:	1c04      	adds	r4, r0, #0
    7522:	4031      	ands	r1, r6
    7524:	4299      	cmp	r1, r3
    7526:	d100      	bne.n	752a <__ieee754_sqrt+0x22>
    7528:	e0b7      	b.n	769a <__ieee754_sqrt+0x192>
    752a:	2e00      	cmp	r6, #0
    752c:	dc00      	bgt.n	7530 <__ieee754_sqrt+0x28>
    752e:	e093      	b.n	7658 <__ieee754_sqrt+0x150>
    7530:	1531      	asrs	r1, r6, #20
    7532:	d100      	bne.n	7536 <__ieee754_sqrt+0x2e>
    7534:	e0a0      	b.n	7678 <__ieee754_sqrt+0x170>
    7536:	4b6d      	ldr	r3, [pc, #436]	; (76ec <__ieee754_sqrt+0x1e4>)
    7538:	0312      	lsls	r2, r2, #12
    753a:	18ce      	adds	r6, r1, r3
    753c:	2380      	movs	r3, #128	; 0x80
    753e:	0b12      	lsrs	r2, r2, #12
    7540:	035b      	lsls	r3, r3, #13
    7542:	431a      	orrs	r2, r3
    7544:	07f3      	lsls	r3, r6, #31
    7546:	d500      	bpl.n	754a <__ieee754_sqrt+0x42>
    7548:	e077      	b.n	763a <__ieee754_sqrt+0x132>
    754a:	1073      	asrs	r3, r6, #1
    754c:	0052      	lsls	r2, r2, #1
    754e:	4698      	mov	r8, r3
    7550:	0fe3      	lsrs	r3, r4, #31
    7552:	18d3      	adds	r3, r2, r3
    7554:	2280      	movs	r2, #128	; 0x80
    7556:	2116      	movs	r1, #22
    7558:	2700      	movs	r7, #0
    755a:	2500      	movs	r5, #0
    755c:	0064      	lsls	r4, r4, #1
    755e:	0392      	lsls	r2, r2, #14
    7560:	18a8      	adds	r0, r5, r2
    7562:	4298      	cmp	r0, r3
    7564:	dc02      	bgt.n	756c <__ieee754_sqrt+0x64>
    7566:	1885      	adds	r5, r0, r2
    7568:	1a1b      	subs	r3, r3, r0
    756a:	18bf      	adds	r7, r7, r2
    756c:	0fe0      	lsrs	r0, r4, #31
    756e:	005b      	lsls	r3, r3, #1
    7570:	3901      	subs	r1, #1
    7572:	181b      	adds	r3, r3, r0
    7574:	0064      	lsls	r4, r4, #1
    7576:	0852      	lsrs	r2, r2, #1
    7578:	2900      	cmp	r1, #0
    757a:	d1f1      	bne.n	7560 <__ieee754_sqrt+0x58>
    757c:	2200      	movs	r2, #0
    757e:	9201      	str	r2, [sp, #4]
    7580:	4694      	mov	ip, r2
    7582:	2280      	movs	r2, #128	; 0x80
    7584:	0612      	lsls	r2, r2, #24
    7586:	2020      	movs	r0, #32
    7588:	4692      	mov	sl, r2
    758a:	e009      	b.n	75a0 <__ieee754_sqrt+0x98>
    758c:	42ab      	cmp	r3, r5
    758e:	d047      	beq.n	7620 <__ieee754_sqrt+0x118>
    7590:	0fe1      	lsrs	r1, r4, #31
    7592:	005b      	lsls	r3, r3, #1
    7594:	3801      	subs	r0, #1
    7596:	185b      	adds	r3, r3, r1
    7598:	0064      	lsls	r4, r4, #1
    759a:	0852      	lsrs	r2, r2, #1
    759c:	2800      	cmp	r0, #0
    759e:	d01e      	beq.n	75de <__ieee754_sqrt+0xd6>
    75a0:	4661      	mov	r1, ip
    75a2:	1889      	adds	r1, r1, r2
    75a4:	429d      	cmp	r5, r3
    75a6:	daf1      	bge.n	758c <__ieee754_sqrt+0x84>
    75a8:	188e      	adds	r6, r1, r2
    75aa:	46b4      	mov	ip, r6
    75ac:	0fce      	lsrs	r6, r1, #31
    75ae:	07f6      	lsls	r6, r6, #31
    75b0:	46a9      	mov	r9, r5
    75b2:	4556      	cmp	r6, sl
    75b4:	d02e      	beq.n	7614 <__ieee754_sqrt+0x10c>
    75b6:	1b5b      	subs	r3, r3, r5
    75b8:	428c      	cmp	r4, r1
    75ba:	41ad      	sbcs	r5, r5
    75bc:	426d      	negs	r5, r5
    75be:	1b5b      	subs	r3, r3, r5
    75c0:	1a64      	subs	r4, r4, r1
    75c2:	9901      	ldr	r1, [sp, #4]
    75c4:	005b      	lsls	r3, r3, #1
    75c6:	468b      	mov	fp, r1
    75c8:	4493      	add	fp, r2
    75ca:	4659      	mov	r1, fp
    75cc:	3801      	subs	r0, #1
    75ce:	9101      	str	r1, [sp, #4]
    75d0:	0fe1      	lsrs	r1, r4, #31
    75d2:	464d      	mov	r5, r9
    75d4:	185b      	adds	r3, r3, r1
    75d6:	0064      	lsls	r4, r4, #1
    75d8:	0852      	lsrs	r2, r2, #1
    75da:	2800      	cmp	r0, #0
    75dc:	d1e0      	bne.n	75a0 <__ieee754_sqrt+0x98>
    75de:	4323      	orrs	r3, r4
    75e0:	d130      	bne.n	7644 <__ieee754_sqrt+0x13c>
    75e2:	9b01      	ldr	r3, [sp, #4]
    75e4:	085b      	lsrs	r3, r3, #1
    75e6:	4942      	ldr	r1, [pc, #264]	; (76f0 <__ieee754_sqrt+0x1e8>)
    75e8:	107a      	asrs	r2, r7, #1
    75ea:	468c      	mov	ip, r1
    75ec:	4462      	add	r2, ip
    75ee:	07f9      	lsls	r1, r7, #31
    75f0:	d502      	bpl.n	75f8 <__ieee754_sqrt+0xf0>
    75f2:	2180      	movs	r1, #128	; 0x80
    75f4:	0609      	lsls	r1, r1, #24
    75f6:	430b      	orrs	r3, r1
    75f8:	4641      	mov	r1, r8
    75fa:	050e      	lsls	r6, r1, #20
    75fc:	18b1      	adds	r1, r6, r2
    75fe:	1c1d      	adds	r5, r3, #0
    7600:	1c0e      	adds	r6, r1, #0
    7602:	1c28      	adds	r0, r5, #0
    7604:	1c31      	adds	r1, r6, #0
    7606:	b003      	add	sp, #12
    7608:	bc3c      	pop	{r2, r3, r4, r5}
    760a:	4690      	mov	r8, r2
    760c:	4699      	mov	r9, r3
    760e:	46a2      	mov	sl, r4
    7610:	46ab      	mov	fp, r5
    7612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7614:	4666      	mov	r6, ip
    7616:	2e00      	cmp	r6, #0
    7618:	dbcd      	blt.n	75b6 <__ieee754_sqrt+0xae>
    761a:	1c6e      	adds	r6, r5, #1
    761c:	46b1      	mov	r9, r6
    761e:	e7ca      	b.n	75b6 <__ieee754_sqrt+0xae>
    7620:	42a1      	cmp	r1, r4
    7622:	d808      	bhi.n	7636 <__ieee754_sqrt+0x12e>
    7624:	188e      	adds	r6, r1, r2
    7626:	46b4      	mov	ip, r6
    7628:	0fce      	lsrs	r6, r1, #31
    762a:	07f6      	lsls	r6, r6, #31
    762c:	4556      	cmp	r6, sl
    762e:	d041      	beq.n	76b4 <__ieee754_sqrt+0x1ac>
    7630:	4699      	mov	r9, r3
    7632:	2300      	movs	r3, #0
    7634:	e7c4      	b.n	75c0 <__ieee754_sqrt+0xb8>
    7636:	1c1d      	adds	r5, r3, #0
    7638:	e7aa      	b.n	7590 <__ieee754_sqrt+0x88>
    763a:	0fe3      	lsrs	r3, r4, #31
    763c:	0052      	lsls	r2, r2, #1
    763e:	18d2      	adds	r2, r2, r3
    7640:	0064      	lsls	r4, r4, #1
    7642:	e782      	b.n	754a <__ieee754_sqrt+0x42>
    7644:	9b01      	ldr	r3, [sp, #4]
    7646:	3301      	adds	r3, #1
    7648:	d03a      	beq.n	76c0 <__ieee754_sqrt+0x1b8>
    764a:	9a01      	ldr	r2, [sp, #4]
    764c:	2301      	movs	r3, #1
    764e:	4694      	mov	ip, r2
    7650:	4013      	ands	r3, r2
    7652:	4463      	add	r3, ip
    7654:	085b      	lsrs	r3, r3, #1
    7656:	e7c6      	b.n	75e6 <__ieee754_sqrt+0xde>
    7658:	0073      	lsls	r3, r6, #1
    765a:	085b      	lsrs	r3, r3, #1
    765c:	4303      	orrs	r3, r0
    765e:	d0d0      	beq.n	7602 <__ieee754_sqrt+0xfa>
    7660:	2100      	movs	r1, #0
    7662:	2e00      	cmp	r6, #0
    7664:	d133      	bne.n	76ce <__ieee754_sqrt+0x1c6>
    7666:	0ae2      	lsrs	r2, r4, #11
    7668:	3915      	subs	r1, #21
    766a:	0564      	lsls	r4, r4, #21
    766c:	2a00      	cmp	r2, #0
    766e:	d0fa      	beq.n	7666 <__ieee754_sqrt+0x15e>
    7670:	2380      	movs	r3, #128	; 0x80
    7672:	035b      	lsls	r3, r3, #13
    7674:	421a      	tst	r2, r3
    7676:	d126      	bne.n	76c6 <__ieee754_sqrt+0x1be>
    7678:	2080      	movs	r0, #128	; 0x80
    767a:	2300      	movs	r3, #0
    767c:	0340      	lsls	r0, r0, #13
    767e:	0052      	lsls	r2, r2, #1
    7680:	3301      	adds	r3, #1
    7682:	4202      	tst	r2, r0
    7684:	d0fb      	beq.n	767e <__ieee754_sqrt+0x176>
    7686:	2501      	movs	r5, #1
    7688:	2020      	movs	r0, #32
    768a:	1aed      	subs	r5, r5, r3
    768c:	1ac0      	subs	r0, r0, r3
    768e:	1949      	adds	r1, r1, r5
    7690:	1c25      	adds	r5, r4, #0
    7692:	40c5      	lsrs	r5, r0
    7694:	409c      	lsls	r4, r3
    7696:	432a      	orrs	r2, r5
    7698:	e74d      	b.n	7536 <__ieee754_sqrt+0x2e>
    769a:	1c2a      	adds	r2, r5, #0
    769c:	1c33      	adds	r3, r6, #0
    769e:	1c28      	adds	r0, r5, #0
    76a0:	1c31      	adds	r1, r6, #0
    76a2:	f001 fd1b 	bl	90dc <__aeabi_dmul>
    76a6:	1c2a      	adds	r2, r5, #0
    76a8:	1c33      	adds	r3, r6, #0
    76aa:	f000 fdb1 	bl	8210 <__aeabi_dadd>
    76ae:	1c05      	adds	r5, r0, #0
    76b0:	1c0e      	adds	r6, r1, #0
    76b2:	e7a6      	b.n	7602 <__ieee754_sqrt+0xfa>
    76b4:	4666      	mov	r6, ip
    76b6:	2e00      	cmp	r6, #0
    76b8:	daaf      	bge.n	761a <__ieee754_sqrt+0x112>
    76ba:	2300      	movs	r3, #0
    76bc:	46a9      	mov	r9, r5
    76be:	e77f      	b.n	75c0 <__ieee754_sqrt+0xb8>
    76c0:	3701      	adds	r7, #1
    76c2:	2300      	movs	r3, #0
    76c4:	e78f      	b.n	75e6 <__ieee754_sqrt+0xde>
    76c6:	2020      	movs	r0, #32
    76c8:	2501      	movs	r5, #1
    76ca:	2300      	movs	r3, #0
    76cc:	e7df      	b.n	768e <__ieee754_sqrt+0x186>
    76ce:	1c2a      	adds	r2, r5, #0
    76d0:	1c33      	adds	r3, r6, #0
    76d2:	1c28      	adds	r0, r5, #0
    76d4:	1c31      	adds	r1, r6, #0
    76d6:	f001 ff9b 	bl	9610 <__aeabi_dsub>
    76da:	1c02      	adds	r2, r0, #0
    76dc:	1c0b      	adds	r3, r1, #0
    76de:	f001 f8bf 	bl	8860 <__aeabi_ddiv>
    76e2:	1c05      	adds	r5, r0, #0
    76e4:	1c0e      	adds	r6, r1, #0
    76e6:	e78c      	b.n	7602 <__ieee754_sqrt+0xfa>
    76e8:	7ff00000 	.word	0x7ff00000
    76ec:	fffffc01 	.word	0xfffffc01
    76f0:	3fe00000 	.word	0x3fe00000

000076f4 <__fpclassifyd>:
    76f4:	1c0a      	adds	r2, r1, #0
    76f6:	1c03      	adds	r3, r0, #0
    76f8:	4302      	orrs	r2, r0
    76fa:	b530      	push	{r4, r5, lr}
    76fc:	2002      	movs	r0, #2
    76fe:	2a00      	cmp	r2, #0
    7700:	d100      	bne.n	7704 <__fpclassifyd+0x10>
    7702:	bd30      	pop	{r4, r5, pc}
    7704:	2280      	movs	r2, #128	; 0x80
    7706:	0612      	lsls	r2, r2, #24
    7708:	4291      	cmp	r1, r2
    770a:	d016      	beq.n	773a <__fpclassifyd+0x46>
    770c:	4a0c      	ldr	r2, [pc, #48]	; (7740 <__fpclassifyd+0x4c>)
    770e:	2004      	movs	r0, #4
    7710:	188c      	adds	r4, r1, r2
    7712:	4a0c      	ldr	r2, [pc, #48]	; (7744 <__fpclassifyd+0x50>)
    7714:	4294      	cmp	r4, r2
    7716:	d9f4      	bls.n	7702 <__fpclassifyd+0xe>
    7718:	4c0b      	ldr	r4, [pc, #44]	; (7748 <__fpclassifyd+0x54>)
    771a:	190c      	adds	r4, r1, r4
    771c:	4294      	cmp	r4, r2
    771e:	d9f0      	bls.n	7702 <__fpclassifyd+0xe>
    7720:	4a0a      	ldr	r2, [pc, #40]	; (774c <__fpclassifyd+0x58>)
    7722:	0049      	lsls	r1, r1, #1
    7724:	0849      	lsrs	r1, r1, #1
    7726:	2003      	movs	r0, #3
    7728:	4291      	cmp	r1, r2
    772a:	d9ea      	bls.n	7702 <__fpclassifyd+0xe>
    772c:	4a06      	ldr	r2, [pc, #24]	; (7748 <__fpclassifyd+0x54>)
    772e:	2000      	movs	r0, #0
    7730:	4291      	cmp	r1, r2
    7732:	d1e6      	bne.n	7702 <__fpclassifyd+0xe>
    7734:	4258      	negs	r0, r3
    7736:	4158      	adcs	r0, r3
    7738:	e7e3      	b.n	7702 <__fpclassifyd+0xe>
    773a:	2b00      	cmp	r3, #0
    773c:	d0e1      	beq.n	7702 <__fpclassifyd+0xe>
    773e:	e7ef      	b.n	7720 <__fpclassifyd+0x2c>
    7740:	fff00000 	.word	0xfff00000
    7744:	7fdfffff 	.word	0x7fdfffff
    7748:	7ff00000 	.word	0x7ff00000
    774c:	000fffff 	.word	0x000fffff

00007750 <matherr>:
    7750:	2000      	movs	r0, #0
    7752:	4770      	bx	lr

00007754 <__aeabi_uidiv>:
    7754:	2200      	movs	r2, #0
    7756:	0843      	lsrs	r3, r0, #1
    7758:	428b      	cmp	r3, r1
    775a:	d374      	bcc.n	7846 <__aeabi_uidiv+0xf2>
    775c:	0903      	lsrs	r3, r0, #4
    775e:	428b      	cmp	r3, r1
    7760:	d35f      	bcc.n	7822 <__aeabi_uidiv+0xce>
    7762:	0a03      	lsrs	r3, r0, #8
    7764:	428b      	cmp	r3, r1
    7766:	d344      	bcc.n	77f2 <__aeabi_uidiv+0x9e>
    7768:	0b03      	lsrs	r3, r0, #12
    776a:	428b      	cmp	r3, r1
    776c:	d328      	bcc.n	77c0 <__aeabi_uidiv+0x6c>
    776e:	0c03      	lsrs	r3, r0, #16
    7770:	428b      	cmp	r3, r1
    7772:	d30d      	bcc.n	7790 <__aeabi_uidiv+0x3c>
    7774:	22ff      	movs	r2, #255	; 0xff
    7776:	0209      	lsls	r1, r1, #8
    7778:	ba12      	rev	r2, r2
    777a:	0c03      	lsrs	r3, r0, #16
    777c:	428b      	cmp	r3, r1
    777e:	d302      	bcc.n	7786 <__aeabi_uidiv+0x32>
    7780:	1212      	asrs	r2, r2, #8
    7782:	0209      	lsls	r1, r1, #8
    7784:	d065      	beq.n	7852 <__aeabi_uidiv+0xfe>
    7786:	0b03      	lsrs	r3, r0, #12
    7788:	428b      	cmp	r3, r1
    778a:	d319      	bcc.n	77c0 <__aeabi_uidiv+0x6c>
    778c:	e000      	b.n	7790 <__aeabi_uidiv+0x3c>
    778e:	0a09      	lsrs	r1, r1, #8
    7790:	0bc3      	lsrs	r3, r0, #15
    7792:	428b      	cmp	r3, r1
    7794:	d301      	bcc.n	779a <__aeabi_uidiv+0x46>
    7796:	03cb      	lsls	r3, r1, #15
    7798:	1ac0      	subs	r0, r0, r3
    779a:	4152      	adcs	r2, r2
    779c:	0b83      	lsrs	r3, r0, #14
    779e:	428b      	cmp	r3, r1
    77a0:	d301      	bcc.n	77a6 <__aeabi_uidiv+0x52>
    77a2:	038b      	lsls	r3, r1, #14
    77a4:	1ac0      	subs	r0, r0, r3
    77a6:	4152      	adcs	r2, r2
    77a8:	0b43      	lsrs	r3, r0, #13
    77aa:	428b      	cmp	r3, r1
    77ac:	d301      	bcc.n	77b2 <__aeabi_uidiv+0x5e>
    77ae:	034b      	lsls	r3, r1, #13
    77b0:	1ac0      	subs	r0, r0, r3
    77b2:	4152      	adcs	r2, r2
    77b4:	0b03      	lsrs	r3, r0, #12
    77b6:	428b      	cmp	r3, r1
    77b8:	d301      	bcc.n	77be <__aeabi_uidiv+0x6a>
    77ba:	030b      	lsls	r3, r1, #12
    77bc:	1ac0      	subs	r0, r0, r3
    77be:	4152      	adcs	r2, r2
    77c0:	0ac3      	lsrs	r3, r0, #11
    77c2:	428b      	cmp	r3, r1
    77c4:	d301      	bcc.n	77ca <__aeabi_uidiv+0x76>
    77c6:	02cb      	lsls	r3, r1, #11
    77c8:	1ac0      	subs	r0, r0, r3
    77ca:	4152      	adcs	r2, r2
    77cc:	0a83      	lsrs	r3, r0, #10
    77ce:	428b      	cmp	r3, r1
    77d0:	d301      	bcc.n	77d6 <__aeabi_uidiv+0x82>
    77d2:	028b      	lsls	r3, r1, #10
    77d4:	1ac0      	subs	r0, r0, r3
    77d6:	4152      	adcs	r2, r2
    77d8:	0a43      	lsrs	r3, r0, #9
    77da:	428b      	cmp	r3, r1
    77dc:	d301      	bcc.n	77e2 <__aeabi_uidiv+0x8e>
    77de:	024b      	lsls	r3, r1, #9
    77e0:	1ac0      	subs	r0, r0, r3
    77e2:	4152      	adcs	r2, r2
    77e4:	0a03      	lsrs	r3, r0, #8
    77e6:	428b      	cmp	r3, r1
    77e8:	d301      	bcc.n	77ee <__aeabi_uidiv+0x9a>
    77ea:	020b      	lsls	r3, r1, #8
    77ec:	1ac0      	subs	r0, r0, r3
    77ee:	4152      	adcs	r2, r2
    77f0:	d2cd      	bcs.n	778e <__aeabi_uidiv+0x3a>
    77f2:	09c3      	lsrs	r3, r0, #7
    77f4:	428b      	cmp	r3, r1
    77f6:	d301      	bcc.n	77fc <__aeabi_uidiv+0xa8>
    77f8:	01cb      	lsls	r3, r1, #7
    77fa:	1ac0      	subs	r0, r0, r3
    77fc:	4152      	adcs	r2, r2
    77fe:	0983      	lsrs	r3, r0, #6
    7800:	428b      	cmp	r3, r1
    7802:	d301      	bcc.n	7808 <__aeabi_uidiv+0xb4>
    7804:	018b      	lsls	r3, r1, #6
    7806:	1ac0      	subs	r0, r0, r3
    7808:	4152      	adcs	r2, r2
    780a:	0943      	lsrs	r3, r0, #5
    780c:	428b      	cmp	r3, r1
    780e:	d301      	bcc.n	7814 <__aeabi_uidiv+0xc0>
    7810:	014b      	lsls	r3, r1, #5
    7812:	1ac0      	subs	r0, r0, r3
    7814:	4152      	adcs	r2, r2
    7816:	0903      	lsrs	r3, r0, #4
    7818:	428b      	cmp	r3, r1
    781a:	d301      	bcc.n	7820 <__aeabi_uidiv+0xcc>
    781c:	010b      	lsls	r3, r1, #4
    781e:	1ac0      	subs	r0, r0, r3
    7820:	4152      	adcs	r2, r2
    7822:	08c3      	lsrs	r3, r0, #3
    7824:	428b      	cmp	r3, r1
    7826:	d301      	bcc.n	782c <__aeabi_uidiv+0xd8>
    7828:	00cb      	lsls	r3, r1, #3
    782a:	1ac0      	subs	r0, r0, r3
    782c:	4152      	adcs	r2, r2
    782e:	0883      	lsrs	r3, r0, #2
    7830:	428b      	cmp	r3, r1
    7832:	d301      	bcc.n	7838 <__aeabi_uidiv+0xe4>
    7834:	008b      	lsls	r3, r1, #2
    7836:	1ac0      	subs	r0, r0, r3
    7838:	4152      	adcs	r2, r2
    783a:	0843      	lsrs	r3, r0, #1
    783c:	428b      	cmp	r3, r1
    783e:	d301      	bcc.n	7844 <__aeabi_uidiv+0xf0>
    7840:	004b      	lsls	r3, r1, #1
    7842:	1ac0      	subs	r0, r0, r3
    7844:	4152      	adcs	r2, r2
    7846:	1a41      	subs	r1, r0, r1
    7848:	d200      	bcs.n	784c <__aeabi_uidiv+0xf8>
    784a:	4601      	mov	r1, r0
    784c:	4152      	adcs	r2, r2
    784e:	4610      	mov	r0, r2
    7850:	4770      	bx	lr
    7852:	e7ff      	b.n	7854 <__aeabi_uidiv+0x100>
    7854:	b501      	push	{r0, lr}
    7856:	2000      	movs	r0, #0
    7858:	f000 f80c 	bl	7874 <__aeabi_idiv0>
    785c:	bd02      	pop	{r1, pc}
    785e:	46c0      	nop			; (mov r8, r8)

00007860 <__aeabi_uidivmod>:
    7860:	2900      	cmp	r1, #0
    7862:	d0f7      	beq.n	7854 <__aeabi_uidiv+0x100>
    7864:	b503      	push	{r0, r1, lr}
    7866:	f7ff ff75 	bl	7754 <__aeabi_uidiv>
    786a:	bc0e      	pop	{r1, r2, r3}
    786c:	4342      	muls	r2, r0
    786e:	1a89      	subs	r1, r1, r2
    7870:	4718      	bx	r3
    7872:	46c0      	nop			; (mov r8, r8)

00007874 <__aeabi_idiv0>:
    7874:	4770      	bx	lr
    7876:	46c0      	nop			; (mov r8, r8)

00007878 <__aeabi_cdrcmple>:
    7878:	4684      	mov	ip, r0
    787a:	1c10      	adds	r0, r2, #0
    787c:	4662      	mov	r2, ip
    787e:	468c      	mov	ip, r1
    7880:	1c19      	adds	r1, r3, #0
    7882:	4663      	mov	r3, ip
    7884:	e000      	b.n	7888 <__aeabi_cdcmpeq>
    7886:	46c0      	nop			; (mov r8, r8)

00007888 <__aeabi_cdcmpeq>:
    7888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    788a:	f001 fbc1 	bl	9010 <__ledf2>
    788e:	2800      	cmp	r0, #0
    7890:	d401      	bmi.n	7896 <__aeabi_cdcmpeq+0xe>
    7892:	2100      	movs	r1, #0
    7894:	42c8      	cmn	r0, r1
    7896:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007898 <__aeabi_dcmpeq>:
    7898:	b510      	push	{r4, lr}
    789a:	f001 fb05 	bl	8ea8 <__eqdf2>
    789e:	4240      	negs	r0, r0
    78a0:	3001      	adds	r0, #1
    78a2:	bd10      	pop	{r4, pc}

000078a4 <__aeabi_dcmplt>:
    78a4:	b510      	push	{r4, lr}
    78a6:	f001 fbb3 	bl	9010 <__ledf2>
    78aa:	2800      	cmp	r0, #0
    78ac:	db01      	blt.n	78b2 <__aeabi_dcmplt+0xe>
    78ae:	2000      	movs	r0, #0
    78b0:	bd10      	pop	{r4, pc}
    78b2:	2001      	movs	r0, #1
    78b4:	bd10      	pop	{r4, pc}
    78b6:	46c0      	nop			; (mov r8, r8)

000078b8 <__aeabi_dcmple>:
    78b8:	b510      	push	{r4, lr}
    78ba:	f001 fba9 	bl	9010 <__ledf2>
    78be:	2800      	cmp	r0, #0
    78c0:	dd01      	ble.n	78c6 <__aeabi_dcmple+0xe>
    78c2:	2000      	movs	r0, #0
    78c4:	bd10      	pop	{r4, pc}
    78c6:	2001      	movs	r0, #1
    78c8:	bd10      	pop	{r4, pc}
    78ca:	46c0      	nop			; (mov r8, r8)

000078cc <__aeabi_dcmpgt>:
    78cc:	b510      	push	{r4, lr}
    78ce:	f001 fb2f 	bl	8f30 <__gedf2>
    78d2:	2800      	cmp	r0, #0
    78d4:	dc01      	bgt.n	78da <__aeabi_dcmpgt+0xe>
    78d6:	2000      	movs	r0, #0
    78d8:	bd10      	pop	{r4, pc}
    78da:	2001      	movs	r0, #1
    78dc:	bd10      	pop	{r4, pc}
    78de:	46c0      	nop			; (mov r8, r8)

000078e0 <__aeabi_dcmpge>:
    78e0:	b510      	push	{r4, lr}
    78e2:	f001 fb25 	bl	8f30 <__gedf2>
    78e6:	2800      	cmp	r0, #0
    78e8:	da01      	bge.n	78ee <__aeabi_dcmpge+0xe>
    78ea:	2000      	movs	r0, #0
    78ec:	bd10      	pop	{r4, pc}
    78ee:	2001      	movs	r0, #1
    78f0:	bd10      	pop	{r4, pc}
    78f2:	46c0      	nop			; (mov r8, r8)

000078f4 <__clzsi2>:
    78f4:	211c      	movs	r1, #28
    78f6:	2301      	movs	r3, #1
    78f8:	041b      	lsls	r3, r3, #16
    78fa:	4298      	cmp	r0, r3
    78fc:	d301      	bcc.n	7902 <__clzsi2+0xe>
    78fe:	0c00      	lsrs	r0, r0, #16
    7900:	3910      	subs	r1, #16
    7902:	0a1b      	lsrs	r3, r3, #8
    7904:	4298      	cmp	r0, r3
    7906:	d301      	bcc.n	790c <__clzsi2+0x18>
    7908:	0a00      	lsrs	r0, r0, #8
    790a:	3908      	subs	r1, #8
    790c:	091b      	lsrs	r3, r3, #4
    790e:	4298      	cmp	r0, r3
    7910:	d301      	bcc.n	7916 <__clzsi2+0x22>
    7912:	0900      	lsrs	r0, r0, #4
    7914:	3904      	subs	r1, #4
    7916:	a202      	add	r2, pc, #8	; (adr r2, 7920 <__clzsi2+0x2c>)
    7918:	5c10      	ldrb	r0, [r2, r0]
    791a:	1840      	adds	r0, r0, r1
    791c:	4770      	bx	lr
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	02020304 	.word	0x02020304
    7924:	01010101 	.word	0x01010101
	...

00007930 <__ctzsi2>:
    7930:	4241      	negs	r1, r0
    7932:	4008      	ands	r0, r1
    7934:	211c      	movs	r1, #28
    7936:	2301      	movs	r3, #1
    7938:	041b      	lsls	r3, r3, #16
    793a:	4298      	cmp	r0, r3
    793c:	d301      	bcc.n	7942 <__ctzsi2+0x12>
    793e:	0c00      	lsrs	r0, r0, #16
    7940:	3910      	subs	r1, #16
    7942:	0a1b      	lsrs	r3, r3, #8
    7944:	4298      	cmp	r0, r3
    7946:	d301      	bcc.n	794c <__ctzsi2+0x1c>
    7948:	0a00      	lsrs	r0, r0, #8
    794a:	3908      	subs	r1, #8
    794c:	091b      	lsrs	r3, r3, #4
    794e:	4298      	cmp	r0, r3
    7950:	d301      	bcc.n	7956 <__ctzsi2+0x26>
    7952:	0900      	lsrs	r0, r0, #4
    7954:	3904      	subs	r1, #4
    7956:	a202      	add	r2, pc, #8	; (adr r2, 7960 <__ctzsi2+0x30>)
    7958:	5c10      	ldrb	r0, [r2, r0]
    795a:	1a40      	subs	r0, r0, r1
    795c:	4770      	bx	lr
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	1d1d1c1b 	.word	0x1d1d1c1b
    7964:	1e1e1e1e 	.word	0x1e1e1e1e
    7968:	1f1f1f1f 	.word	0x1f1f1f1f
    796c:	1f1f1f1f 	.word	0x1f1f1f1f

00007970 <__aeabi_fdiv>:
    7970:	b5f0      	push	{r4, r5, r6, r7, lr}
    7972:	4656      	mov	r6, sl
    7974:	464d      	mov	r5, r9
    7976:	465f      	mov	r7, fp
    7978:	4644      	mov	r4, r8
    797a:	b4f0      	push	{r4, r5, r6, r7}
    797c:	0243      	lsls	r3, r0, #9
    797e:	0045      	lsls	r5, r0, #1
    7980:	0fc7      	lsrs	r7, r0, #31
    7982:	b083      	sub	sp, #12
    7984:	468a      	mov	sl, r1
    7986:	0a5c      	lsrs	r4, r3, #9
    7988:	0e2e      	lsrs	r6, r5, #24
    798a:	46b9      	mov	r9, r7
    798c:	d041      	beq.n	7a12 <__aeabi_fdiv+0xa2>
    798e:	2eff      	cmp	r6, #255	; 0xff
    7990:	d026      	beq.n	79e0 <__aeabi_fdiv+0x70>
    7992:	2380      	movs	r3, #128	; 0x80
    7994:	041b      	lsls	r3, r3, #16
    7996:	4323      	orrs	r3, r4
    7998:	00dc      	lsls	r4, r3, #3
    799a:	2300      	movs	r3, #0
    799c:	4698      	mov	r8, r3
    799e:	469b      	mov	fp, r3
    79a0:	3e7f      	subs	r6, #127	; 0x7f
    79a2:	4653      	mov	r3, sl
    79a4:	025b      	lsls	r3, r3, #9
    79a6:	0a5d      	lsrs	r5, r3, #9
    79a8:	4653      	mov	r3, sl
    79aa:	005a      	lsls	r2, r3, #1
    79ac:	0fdb      	lsrs	r3, r3, #31
    79ae:	0e12      	lsrs	r2, r2, #24
    79b0:	469a      	mov	sl, r3
    79b2:	d039      	beq.n	7a28 <__aeabi_fdiv+0xb8>
    79b4:	2aff      	cmp	r2, #255	; 0xff
    79b6:	d033      	beq.n	7a20 <__aeabi_fdiv+0xb0>
    79b8:	2380      	movs	r3, #128	; 0x80
    79ba:	041b      	lsls	r3, r3, #16
    79bc:	432b      	orrs	r3, r5
    79be:	00dd      	lsls	r5, r3, #3
    79c0:	2300      	movs	r3, #0
    79c2:	3a7f      	subs	r2, #127	; 0x7f
    79c4:	4651      	mov	r1, sl
    79c6:	1ab2      	subs	r2, r6, r2
    79c8:	4646      	mov	r6, r8
    79ca:	4079      	eors	r1, r7
    79cc:	1c08      	adds	r0, r1, #0
    79ce:	9201      	str	r2, [sp, #4]
    79d0:	431e      	orrs	r6, r3
    79d2:	2e0f      	cmp	r6, #15
    79d4:	d900      	bls.n	79d8 <__aeabi_fdiv+0x68>
    79d6:	e076      	b.n	7ac6 <__aeabi_fdiv+0x156>
    79d8:	4a7e      	ldr	r2, [pc, #504]	; (7bd4 <__aeabi_fdiv+0x264>)
    79da:	00b6      	lsls	r6, r6, #2
    79dc:	5996      	ldr	r6, [r2, r6]
    79de:	46b7      	mov	pc, r6
    79e0:	2c00      	cmp	r4, #0
    79e2:	d130      	bne.n	7a46 <__aeabi_fdiv+0xd6>
    79e4:	2308      	movs	r3, #8
    79e6:	4698      	mov	r8, r3
    79e8:	3b06      	subs	r3, #6
    79ea:	469b      	mov	fp, r3
    79ec:	e7d9      	b.n	79a2 <__aeabi_fdiv+0x32>
    79ee:	2380      	movs	r3, #128	; 0x80
    79f0:	2100      	movs	r1, #0
    79f2:	03db      	lsls	r3, r3, #15
    79f4:	24ff      	movs	r4, #255	; 0xff
    79f6:	025b      	lsls	r3, r3, #9
    79f8:	05e4      	lsls	r4, r4, #23
    79fa:	0a5b      	lsrs	r3, r3, #9
    79fc:	07c9      	lsls	r1, r1, #31
    79fe:	4323      	orrs	r3, r4
    7a00:	430b      	orrs	r3, r1
    7a02:	1c18      	adds	r0, r3, #0
    7a04:	b003      	add	sp, #12
    7a06:	bc3c      	pop	{r2, r3, r4, r5}
    7a08:	4690      	mov	r8, r2
    7a0a:	4699      	mov	r9, r3
    7a0c:	46a2      	mov	sl, r4
    7a0e:	46ab      	mov	fp, r5
    7a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a12:	2c00      	cmp	r4, #0
    7a14:	d128      	bne.n	7a68 <__aeabi_fdiv+0xf8>
    7a16:	2304      	movs	r3, #4
    7a18:	4698      	mov	r8, r3
    7a1a:	3b03      	subs	r3, #3
    7a1c:	469b      	mov	fp, r3
    7a1e:	e7c0      	b.n	79a2 <__aeabi_fdiv+0x32>
    7a20:	2d00      	cmp	r5, #0
    7a22:	d11f      	bne.n	7a64 <__aeabi_fdiv+0xf4>
    7a24:	2302      	movs	r3, #2
    7a26:	e002      	b.n	7a2e <__aeabi_fdiv+0xbe>
    7a28:	2d00      	cmp	r5, #0
    7a2a:	d111      	bne.n	7a50 <__aeabi_fdiv+0xe0>
    7a2c:	2301      	movs	r3, #1
    7a2e:	1ab2      	subs	r2, r6, r2
    7a30:	4650      	mov	r0, sl
    7a32:	4646      	mov	r6, r8
    7a34:	4078      	eors	r0, r7
    7a36:	9201      	str	r2, [sp, #4]
    7a38:	431e      	orrs	r6, r3
    7a3a:	2e0f      	cmp	r6, #15
    7a3c:	d827      	bhi.n	7a8e <__aeabi_fdiv+0x11e>
    7a3e:	4966      	ldr	r1, [pc, #408]	; (7bd8 <__aeabi_fdiv+0x268>)
    7a40:	00b6      	lsls	r6, r6, #2
    7a42:	5989      	ldr	r1, [r1, r6]
    7a44:	468f      	mov	pc, r1
    7a46:	230c      	movs	r3, #12
    7a48:	4698      	mov	r8, r3
    7a4a:	3b09      	subs	r3, #9
    7a4c:	469b      	mov	fp, r3
    7a4e:	e7a8      	b.n	79a2 <__aeabi_fdiv+0x32>
    7a50:	1c28      	adds	r0, r5, #0
    7a52:	f7ff ff4f 	bl	78f4 <__clzsi2>
    7a56:	2276      	movs	r2, #118	; 0x76
    7a58:	1f43      	subs	r3, r0, #5
    7a5a:	4252      	negs	r2, r2
    7a5c:	409d      	lsls	r5, r3
    7a5e:	1a12      	subs	r2, r2, r0
    7a60:	2300      	movs	r3, #0
    7a62:	e7af      	b.n	79c4 <__aeabi_fdiv+0x54>
    7a64:	2303      	movs	r3, #3
    7a66:	e7ad      	b.n	79c4 <__aeabi_fdiv+0x54>
    7a68:	1c20      	adds	r0, r4, #0
    7a6a:	f7ff ff43 	bl	78f4 <__clzsi2>
    7a6e:	1f43      	subs	r3, r0, #5
    7a70:	409c      	lsls	r4, r3
    7a72:	2376      	movs	r3, #118	; 0x76
    7a74:	425b      	negs	r3, r3
    7a76:	1a1e      	subs	r6, r3, r0
    7a78:	2300      	movs	r3, #0
    7a7a:	4698      	mov	r8, r3
    7a7c:	469b      	mov	fp, r3
    7a7e:	e790      	b.n	79a2 <__aeabi_fdiv+0x32>
    7a80:	2500      	movs	r5, #0
    7a82:	46d1      	mov	r9, sl
    7a84:	469b      	mov	fp, r3
    7a86:	465b      	mov	r3, fp
    7a88:	4648      	mov	r0, r9
    7a8a:	2b02      	cmp	r3, #2
    7a8c:	d16f      	bne.n	7b6e <__aeabi_fdiv+0x1fe>
    7a8e:	2101      	movs	r1, #1
    7a90:	24ff      	movs	r4, #255	; 0xff
    7a92:	4001      	ands	r1, r0
    7a94:	2300      	movs	r3, #0
    7a96:	e7ae      	b.n	79f6 <__aeabi_fdiv+0x86>
    7a98:	237e      	movs	r3, #126	; 0x7e
    7a9a:	9a01      	ldr	r2, [sp, #4]
    7a9c:	425b      	negs	r3, r3
    7a9e:	1a9b      	subs	r3, r3, r2
    7aa0:	2b1b      	cmp	r3, #27
    7aa2:	dd6d      	ble.n	7b80 <__aeabi_fdiv+0x210>
    7aa4:	2101      	movs	r1, #1
    7aa6:	464b      	mov	r3, r9
    7aa8:	4019      	ands	r1, r3
    7aaa:	2400      	movs	r4, #0
    7aac:	2300      	movs	r3, #0
    7aae:	e7a2      	b.n	79f6 <__aeabi_fdiv+0x86>
    7ab0:	2380      	movs	r3, #128	; 0x80
    7ab2:	03db      	lsls	r3, r3, #15
    7ab4:	421c      	tst	r4, r3
    7ab6:	d149      	bne.n	7b4c <__aeabi_fdiv+0x1dc>
    7ab8:	2380      	movs	r3, #128	; 0x80
    7aba:	03db      	lsls	r3, r3, #15
    7abc:	4323      	orrs	r3, r4
    7abe:	025b      	lsls	r3, r3, #9
    7ac0:	0a5b      	lsrs	r3, r3, #9
    7ac2:	1c39      	adds	r1, r7, #0
    7ac4:	e796      	b.n	79f4 <__aeabi_fdiv+0x84>
    7ac6:	0163      	lsls	r3, r4, #5
    7ac8:	016d      	lsls	r5, r5, #5
    7aca:	42ab      	cmp	r3, r5
    7acc:	d337      	bcc.n	7b3e <__aeabi_fdiv+0x1ce>
    7ace:	4689      	mov	r9, r1
    7ad0:	201a      	movs	r0, #26
    7ad2:	2101      	movs	r1, #1
    7ad4:	1b5b      	subs	r3, r3, r5
    7ad6:	2401      	movs	r4, #1
    7ad8:	1c1e      	adds	r6, r3, #0
    7ada:	0049      	lsls	r1, r1, #1
    7adc:	005b      	lsls	r3, r3, #1
    7ade:	2e00      	cmp	r6, #0
    7ae0:	db01      	blt.n	7ae6 <__aeabi_fdiv+0x176>
    7ae2:	42ab      	cmp	r3, r5
    7ae4:	d301      	bcc.n	7aea <__aeabi_fdiv+0x17a>
    7ae6:	1b5b      	subs	r3, r3, r5
    7ae8:	4321      	orrs	r1, r4
    7aea:	3801      	subs	r0, #1
    7aec:	2800      	cmp	r0, #0
    7aee:	d1f3      	bne.n	7ad8 <__aeabi_fdiv+0x168>
    7af0:	1e58      	subs	r0, r3, #1
    7af2:	4183      	sbcs	r3, r0
    7af4:	430b      	orrs	r3, r1
    7af6:	1c1d      	adds	r5, r3, #0
    7af8:	9c01      	ldr	r4, [sp, #4]
    7afa:	347f      	adds	r4, #127	; 0x7f
    7afc:	2c00      	cmp	r4, #0
    7afe:	ddcb      	ble.n	7a98 <__aeabi_fdiv+0x128>
    7b00:	076b      	lsls	r3, r5, #29
    7b02:	d004      	beq.n	7b0e <__aeabi_fdiv+0x19e>
    7b04:	230f      	movs	r3, #15
    7b06:	402b      	ands	r3, r5
    7b08:	2b04      	cmp	r3, #4
    7b0a:	d000      	beq.n	7b0e <__aeabi_fdiv+0x19e>
    7b0c:	3504      	adds	r5, #4
    7b0e:	012b      	lsls	r3, r5, #4
    7b10:	d504      	bpl.n	7b1c <__aeabi_fdiv+0x1ac>
    7b12:	9a01      	ldr	r2, [sp, #4]
    7b14:	4b31      	ldr	r3, [pc, #196]	; (7bdc <__aeabi_fdiv+0x26c>)
    7b16:	3280      	adds	r2, #128	; 0x80
    7b18:	1c14      	adds	r4, r2, #0
    7b1a:	401d      	ands	r5, r3
    7b1c:	2cfe      	cmp	r4, #254	; 0xfe
    7b1e:	dd07      	ble.n	7b30 <__aeabi_fdiv+0x1c0>
    7b20:	464b      	mov	r3, r9
    7b22:	2101      	movs	r1, #1
    7b24:	24ff      	movs	r4, #255	; 0xff
    7b26:	4019      	ands	r1, r3
    7b28:	2300      	movs	r3, #0
    7b2a:	e764      	b.n	79f6 <__aeabi_fdiv+0x86>
    7b2c:	1c25      	adds	r5, r4, #0
    7b2e:	e7aa      	b.n	7a86 <__aeabi_fdiv+0x116>
    7b30:	2101      	movs	r1, #1
    7b32:	464a      	mov	r2, r9
    7b34:	01ab      	lsls	r3, r5, #6
    7b36:	0a5b      	lsrs	r3, r3, #9
    7b38:	b2e4      	uxtb	r4, r4
    7b3a:	4011      	ands	r1, r2
    7b3c:	e75b      	b.n	79f6 <__aeabi_fdiv+0x86>
    7b3e:	9a01      	ldr	r2, [sp, #4]
    7b40:	4689      	mov	r9, r1
    7b42:	3a01      	subs	r2, #1
    7b44:	9201      	str	r2, [sp, #4]
    7b46:	201b      	movs	r0, #27
    7b48:	2100      	movs	r1, #0
    7b4a:	e7c4      	b.n	7ad6 <__aeabi_fdiv+0x166>
    7b4c:	421d      	tst	r5, r3
    7b4e:	d007      	beq.n	7b60 <__aeabi_fdiv+0x1f0>
    7b50:	4323      	orrs	r3, r4
    7b52:	025b      	lsls	r3, r3, #9
    7b54:	0a5b      	lsrs	r3, r3, #9
    7b56:	1c39      	adds	r1, r7, #0
    7b58:	e74c      	b.n	79f4 <__aeabi_fdiv+0x84>
    7b5a:	2500      	movs	r5, #0
    7b5c:	0263      	lsls	r3, r4, #9
    7b5e:	d5ab      	bpl.n	7ab8 <__aeabi_fdiv+0x148>
    7b60:	2380      	movs	r3, #128	; 0x80
    7b62:	03db      	lsls	r3, r3, #15
    7b64:	432b      	orrs	r3, r5
    7b66:	025b      	lsls	r3, r3, #9
    7b68:	0a5b      	lsrs	r3, r3, #9
    7b6a:	4651      	mov	r1, sl
    7b6c:	e742      	b.n	79f4 <__aeabi_fdiv+0x84>
    7b6e:	2b03      	cmp	r3, #3
    7b70:	d025      	beq.n	7bbe <__aeabi_fdiv+0x24e>
    7b72:	2b01      	cmp	r3, #1
    7b74:	d1c0      	bne.n	7af8 <__aeabi_fdiv+0x188>
    7b76:	2101      	movs	r1, #1
    7b78:	2400      	movs	r4, #0
    7b7a:	4001      	ands	r1, r0
    7b7c:	2300      	movs	r3, #0
    7b7e:	e73a      	b.n	79f6 <__aeabi_fdiv+0x86>
    7b80:	1c29      	adds	r1, r5, #0
    7b82:	40d9      	lsrs	r1, r3
    7b84:	1c2b      	adds	r3, r5, #0
    7b86:	9a01      	ldr	r2, [sp, #4]
    7b88:	329e      	adds	r2, #158	; 0x9e
    7b8a:	4093      	lsls	r3, r2
    7b8c:	1e5d      	subs	r5, r3, #1
    7b8e:	41ab      	sbcs	r3, r5
    7b90:	430b      	orrs	r3, r1
    7b92:	075a      	lsls	r2, r3, #29
    7b94:	d004      	beq.n	7ba0 <__aeabi_fdiv+0x230>
    7b96:	220f      	movs	r2, #15
    7b98:	401a      	ands	r2, r3
    7b9a:	2a04      	cmp	r2, #4
    7b9c:	d000      	beq.n	7ba0 <__aeabi_fdiv+0x230>
    7b9e:	3304      	adds	r3, #4
    7ba0:	015a      	lsls	r2, r3, #5
    7ba2:	d505      	bpl.n	7bb0 <__aeabi_fdiv+0x240>
    7ba4:	464b      	mov	r3, r9
    7ba6:	2101      	movs	r1, #1
    7ba8:	2401      	movs	r4, #1
    7baa:	4019      	ands	r1, r3
    7bac:	2300      	movs	r3, #0
    7bae:	e722      	b.n	79f6 <__aeabi_fdiv+0x86>
    7bb0:	2101      	movs	r1, #1
    7bb2:	464a      	mov	r2, r9
    7bb4:	019b      	lsls	r3, r3, #6
    7bb6:	0a5b      	lsrs	r3, r3, #9
    7bb8:	4011      	ands	r1, r2
    7bba:	2400      	movs	r4, #0
    7bbc:	e71b      	b.n	79f6 <__aeabi_fdiv+0x86>
    7bbe:	2380      	movs	r3, #128	; 0x80
    7bc0:	2101      	movs	r1, #1
    7bc2:	464a      	mov	r2, r9
    7bc4:	03db      	lsls	r3, r3, #15
    7bc6:	432b      	orrs	r3, r5
    7bc8:	025b      	lsls	r3, r3, #9
    7bca:	400a      	ands	r2, r1
    7bcc:	0a5b      	lsrs	r3, r3, #9
    7bce:	1c11      	adds	r1, r2, #0
    7bd0:	e710      	b.n	79f4 <__aeabi_fdiv+0x84>
    7bd2:	46c0      	nop			; (mov r8, r8)
    7bd4:	0000aa58 	.word	0x0000aa58
    7bd8:	0000aa98 	.word	0x0000aa98
    7bdc:	f7ffffff 	.word	0xf7ffffff

00007be0 <__aeabi_fmul>:
    7be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7be2:	465f      	mov	r7, fp
    7be4:	4656      	mov	r6, sl
    7be6:	464d      	mov	r5, r9
    7be8:	4644      	mov	r4, r8
    7bea:	b4f0      	push	{r4, r5, r6, r7}
    7bec:	0245      	lsls	r5, r0, #9
    7bee:	0046      	lsls	r6, r0, #1
    7bf0:	0fc4      	lsrs	r4, r0, #31
    7bf2:	b083      	sub	sp, #12
    7bf4:	1c0f      	adds	r7, r1, #0
    7bf6:	0a6d      	lsrs	r5, r5, #9
    7bf8:	0e36      	lsrs	r6, r6, #24
    7bfa:	46a3      	mov	fp, r4
    7bfc:	d045      	beq.n	7c8a <__aeabi_fmul+0xaa>
    7bfe:	2eff      	cmp	r6, #255	; 0xff
    7c00:	d025      	beq.n	7c4e <__aeabi_fmul+0x6e>
    7c02:	2380      	movs	r3, #128	; 0x80
    7c04:	041b      	lsls	r3, r3, #16
    7c06:	431d      	orrs	r5, r3
    7c08:	2300      	movs	r3, #0
    7c0a:	469a      	mov	sl, r3
    7c0c:	00ed      	lsls	r5, r5, #3
    7c0e:	3e7f      	subs	r6, #127	; 0x7f
    7c10:	9301      	str	r3, [sp, #4]
    7c12:	027b      	lsls	r3, r7, #9
    7c14:	0a5b      	lsrs	r3, r3, #9
    7c16:	4698      	mov	r8, r3
    7c18:	0078      	lsls	r0, r7, #1
    7c1a:	0ffb      	lsrs	r3, r7, #31
    7c1c:	0e00      	lsrs	r0, r0, #24
    7c1e:	4699      	mov	r9, r3
    7c20:	d040      	beq.n	7ca4 <__aeabi_fmul+0xc4>
    7c22:	28ff      	cmp	r0, #255	; 0xff
    7c24:	d038      	beq.n	7c98 <__aeabi_fmul+0xb8>
    7c26:	2380      	movs	r3, #128	; 0x80
    7c28:	4642      	mov	r2, r8
    7c2a:	041b      	lsls	r3, r3, #16
    7c2c:	4313      	orrs	r3, r2
    7c2e:	00db      	lsls	r3, r3, #3
    7c30:	4698      	mov	r8, r3
    7c32:	2300      	movs	r3, #0
    7c34:	387f      	subs	r0, #127	; 0x7f
    7c36:	464a      	mov	r2, r9
    7c38:	9f01      	ldr	r7, [sp, #4]
    7c3a:	1830      	adds	r0, r6, r0
    7c3c:	4062      	eors	r2, r4
    7c3e:	1c41      	adds	r1, r0, #1
    7c40:	431f      	orrs	r7, r3
    7c42:	2f0f      	cmp	r7, #15
    7c44:	d869      	bhi.n	7d1a <__aeabi_fmul+0x13a>
    7c46:	4e7d      	ldr	r6, [pc, #500]	; (7e3c <__aeabi_fmul+0x25c>)
    7c48:	00bf      	lsls	r7, r7, #2
    7c4a:	59f6      	ldr	r6, [r6, r7]
    7c4c:	46b7      	mov	pc, r6
    7c4e:	2d00      	cmp	r5, #0
    7c50:	d145      	bne.n	7cde <__aeabi_fmul+0xfe>
    7c52:	2308      	movs	r3, #8
    7c54:	9301      	str	r3, [sp, #4]
    7c56:	3b06      	subs	r3, #6
    7c58:	469a      	mov	sl, r3
    7c5a:	e7da      	b.n	7c12 <__aeabi_fmul+0x32>
    7c5c:	4693      	mov	fp, r2
    7c5e:	4653      	mov	r3, sl
    7c60:	2b02      	cmp	r3, #2
    7c62:	d12f      	bne.n	7cc4 <__aeabi_fmul+0xe4>
    7c64:	465b      	mov	r3, fp
    7c66:	2401      	movs	r4, #1
    7c68:	2500      	movs	r5, #0
    7c6a:	401c      	ands	r4, r3
    7c6c:	23ff      	movs	r3, #255	; 0xff
    7c6e:	026d      	lsls	r5, r5, #9
    7c70:	05db      	lsls	r3, r3, #23
    7c72:	0a6d      	lsrs	r5, r5, #9
    7c74:	07e4      	lsls	r4, r4, #31
    7c76:	431d      	orrs	r5, r3
    7c78:	4325      	orrs	r5, r4
    7c7a:	1c28      	adds	r0, r5, #0
    7c7c:	b003      	add	sp, #12
    7c7e:	bc3c      	pop	{r2, r3, r4, r5}
    7c80:	4690      	mov	r8, r2
    7c82:	4699      	mov	r9, r3
    7c84:	46a2      	mov	sl, r4
    7c86:	46ab      	mov	fp, r5
    7c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c8a:	2d00      	cmp	r5, #0
    7c8c:	d12c      	bne.n	7ce8 <__aeabi_fmul+0x108>
    7c8e:	2304      	movs	r3, #4
    7c90:	9301      	str	r3, [sp, #4]
    7c92:	3b03      	subs	r3, #3
    7c94:	469a      	mov	sl, r3
    7c96:	e7bc      	b.n	7c12 <__aeabi_fmul+0x32>
    7c98:	4643      	mov	r3, r8
    7c9a:	425a      	negs	r2, r3
    7c9c:	4153      	adcs	r3, r2
    7c9e:	2203      	movs	r2, #3
    7ca0:	1ad3      	subs	r3, r2, r3
    7ca2:	e7c8      	b.n	7c36 <__aeabi_fmul+0x56>
    7ca4:	4642      	mov	r2, r8
    7ca6:	2301      	movs	r3, #1
    7ca8:	2a00      	cmp	r2, #0
    7caa:	d0c4      	beq.n	7c36 <__aeabi_fmul+0x56>
    7cac:	4640      	mov	r0, r8
    7cae:	f7ff fe21 	bl	78f4 <__clzsi2>
    7cb2:	4642      	mov	r2, r8
    7cb4:	1f43      	subs	r3, r0, #5
    7cb6:	409a      	lsls	r2, r3
    7cb8:	2376      	movs	r3, #118	; 0x76
    7cba:	425b      	negs	r3, r3
    7cbc:	1a18      	subs	r0, r3, r0
    7cbe:	4690      	mov	r8, r2
    7cc0:	2300      	movs	r3, #0
    7cc2:	e7b8      	b.n	7c36 <__aeabi_fmul+0x56>
    7cc4:	2b03      	cmp	r3, #3
    7cc6:	d100      	bne.n	7cca <__aeabi_fmul+0xea>
    7cc8:	e0ad      	b.n	7e26 <__aeabi_fmul+0x246>
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d000      	beq.n	7cd0 <__aeabi_fmul+0xf0>
    7cce:	e08c      	b.n	7dea <__aeabi_fmul+0x20a>
    7cd0:	465b      	mov	r3, fp
    7cd2:	4654      	mov	r4, sl
    7cd4:	401c      	ands	r4, r3
    7cd6:	b2e4      	uxtb	r4, r4
    7cd8:	2300      	movs	r3, #0
    7cda:	2500      	movs	r5, #0
    7cdc:	e7c7      	b.n	7c6e <__aeabi_fmul+0x8e>
    7cde:	230c      	movs	r3, #12
    7ce0:	9301      	str	r3, [sp, #4]
    7ce2:	3b09      	subs	r3, #9
    7ce4:	469a      	mov	sl, r3
    7ce6:	e794      	b.n	7c12 <__aeabi_fmul+0x32>
    7ce8:	1c28      	adds	r0, r5, #0
    7cea:	f7ff fe03 	bl	78f4 <__clzsi2>
    7cee:	2676      	movs	r6, #118	; 0x76
    7cf0:	1f43      	subs	r3, r0, #5
    7cf2:	409d      	lsls	r5, r3
    7cf4:	2300      	movs	r3, #0
    7cf6:	4276      	negs	r6, r6
    7cf8:	1a36      	subs	r6, r6, r0
    7cfa:	9301      	str	r3, [sp, #4]
    7cfc:	469a      	mov	sl, r3
    7cfe:	e788      	b.n	7c12 <__aeabi_fmul+0x32>
    7d00:	2580      	movs	r5, #128	; 0x80
    7d02:	2400      	movs	r4, #0
    7d04:	03ed      	lsls	r5, r5, #15
    7d06:	23ff      	movs	r3, #255	; 0xff
    7d08:	e7b1      	b.n	7c6e <__aeabi_fmul+0x8e>
    7d0a:	4645      	mov	r5, r8
    7d0c:	46cb      	mov	fp, r9
    7d0e:	469a      	mov	sl, r3
    7d10:	e7a5      	b.n	7c5e <__aeabi_fmul+0x7e>
    7d12:	4645      	mov	r5, r8
    7d14:	4693      	mov	fp, r2
    7d16:	469a      	mov	sl, r3
    7d18:	e7a1      	b.n	7c5e <__aeabi_fmul+0x7e>
    7d1a:	4643      	mov	r3, r8
    7d1c:	042c      	lsls	r4, r5, #16
    7d1e:	0c1b      	lsrs	r3, r3, #16
    7d20:	469c      	mov	ip, r3
    7d22:	0c23      	lsrs	r3, r4, #16
    7d24:	4644      	mov	r4, r8
    7d26:	0426      	lsls	r6, r4, #16
    7d28:	1c1c      	adds	r4, r3, #0
    7d2a:	0c36      	lsrs	r6, r6, #16
    7d2c:	0c2f      	lsrs	r7, r5, #16
    7d2e:	4374      	muls	r4, r6
    7d30:	1c35      	adds	r5, r6, #0
    7d32:	4666      	mov	r6, ip
    7d34:	437d      	muls	r5, r7
    7d36:	4373      	muls	r3, r6
    7d38:	4377      	muls	r7, r6
    7d3a:	18eb      	adds	r3, r5, r3
    7d3c:	0c26      	lsrs	r6, r4, #16
    7d3e:	199e      	adds	r6, r3, r6
    7d40:	42b5      	cmp	r5, r6
    7d42:	d903      	bls.n	7d4c <__aeabi_fmul+0x16c>
    7d44:	2380      	movs	r3, #128	; 0x80
    7d46:	025b      	lsls	r3, r3, #9
    7d48:	469c      	mov	ip, r3
    7d4a:	4467      	add	r7, ip
    7d4c:	0424      	lsls	r4, r4, #16
    7d4e:	0433      	lsls	r3, r6, #16
    7d50:	0c24      	lsrs	r4, r4, #16
    7d52:	191b      	adds	r3, r3, r4
    7d54:	019d      	lsls	r5, r3, #6
    7d56:	1e6c      	subs	r4, r5, #1
    7d58:	41a5      	sbcs	r5, r4
    7d5a:	0e9b      	lsrs	r3, r3, #26
    7d5c:	0c36      	lsrs	r6, r6, #16
    7d5e:	432b      	orrs	r3, r5
    7d60:	19bd      	adds	r5, r7, r6
    7d62:	01ad      	lsls	r5, r5, #6
    7d64:	431d      	orrs	r5, r3
    7d66:	012b      	lsls	r3, r5, #4
    7d68:	d504      	bpl.n	7d74 <__aeabi_fmul+0x194>
    7d6a:	2301      	movs	r3, #1
    7d6c:	0868      	lsrs	r0, r5, #1
    7d6e:	401d      	ands	r5, r3
    7d70:	4305      	orrs	r5, r0
    7d72:	1c08      	adds	r0, r1, #0
    7d74:	1c03      	adds	r3, r0, #0
    7d76:	337f      	adds	r3, #127	; 0x7f
    7d78:	2b00      	cmp	r3, #0
    7d7a:	dd2c      	ble.n	7dd6 <__aeabi_fmul+0x1f6>
    7d7c:	0769      	lsls	r1, r5, #29
    7d7e:	d004      	beq.n	7d8a <__aeabi_fmul+0x1aa>
    7d80:	210f      	movs	r1, #15
    7d82:	4029      	ands	r1, r5
    7d84:	2904      	cmp	r1, #4
    7d86:	d000      	beq.n	7d8a <__aeabi_fmul+0x1aa>
    7d88:	3504      	adds	r5, #4
    7d8a:	0129      	lsls	r1, r5, #4
    7d8c:	d503      	bpl.n	7d96 <__aeabi_fmul+0x1b6>
    7d8e:	4b2c      	ldr	r3, [pc, #176]	; (7e40 <__aeabi_fmul+0x260>)
    7d90:	401d      	ands	r5, r3
    7d92:	1c03      	adds	r3, r0, #0
    7d94:	3380      	adds	r3, #128	; 0x80
    7d96:	2bfe      	cmp	r3, #254	; 0xfe
    7d98:	dd17      	ble.n	7dca <__aeabi_fmul+0x1ea>
    7d9a:	2401      	movs	r4, #1
    7d9c:	23ff      	movs	r3, #255	; 0xff
    7d9e:	4014      	ands	r4, r2
    7da0:	2500      	movs	r5, #0
    7da2:	e764      	b.n	7c6e <__aeabi_fmul+0x8e>
    7da4:	2080      	movs	r0, #128	; 0x80
    7da6:	03c0      	lsls	r0, r0, #15
    7da8:	4205      	tst	r5, r0
    7daa:	d009      	beq.n	7dc0 <__aeabi_fmul+0x1e0>
    7dac:	4643      	mov	r3, r8
    7dae:	4203      	tst	r3, r0
    7db0:	d106      	bne.n	7dc0 <__aeabi_fmul+0x1e0>
    7db2:	4645      	mov	r5, r8
    7db4:	4305      	orrs	r5, r0
    7db6:	026d      	lsls	r5, r5, #9
    7db8:	0a6d      	lsrs	r5, r5, #9
    7dba:	464c      	mov	r4, r9
    7dbc:	23ff      	movs	r3, #255	; 0xff
    7dbe:	e756      	b.n	7c6e <__aeabi_fmul+0x8e>
    7dc0:	4305      	orrs	r5, r0
    7dc2:	026d      	lsls	r5, r5, #9
    7dc4:	0a6d      	lsrs	r5, r5, #9
    7dc6:	23ff      	movs	r3, #255	; 0xff
    7dc8:	e751      	b.n	7c6e <__aeabi_fmul+0x8e>
    7dca:	2401      	movs	r4, #1
    7dcc:	01ad      	lsls	r5, r5, #6
    7dce:	0a6d      	lsrs	r5, r5, #9
    7dd0:	b2db      	uxtb	r3, r3
    7dd2:	4014      	ands	r4, r2
    7dd4:	e74b      	b.n	7c6e <__aeabi_fmul+0x8e>
    7dd6:	237e      	movs	r3, #126	; 0x7e
    7dd8:	425b      	negs	r3, r3
    7dda:	1a1b      	subs	r3, r3, r0
    7ddc:	2b1b      	cmp	r3, #27
    7dde:	dd07      	ble.n	7df0 <__aeabi_fmul+0x210>
    7de0:	2401      	movs	r4, #1
    7de2:	2300      	movs	r3, #0
    7de4:	4014      	ands	r4, r2
    7de6:	2500      	movs	r5, #0
    7de8:	e741      	b.n	7c6e <__aeabi_fmul+0x8e>
    7dea:	1c08      	adds	r0, r1, #0
    7dec:	465a      	mov	r2, fp
    7dee:	e7c1      	b.n	7d74 <__aeabi_fmul+0x194>
    7df0:	309e      	adds	r0, #158	; 0x9e
    7df2:	1c29      	adds	r1, r5, #0
    7df4:	4085      	lsls	r5, r0
    7df6:	40d9      	lsrs	r1, r3
    7df8:	1e68      	subs	r0, r5, #1
    7dfa:	4185      	sbcs	r5, r0
    7dfc:	430d      	orrs	r5, r1
    7dfe:	076b      	lsls	r3, r5, #29
    7e00:	d004      	beq.n	7e0c <__aeabi_fmul+0x22c>
    7e02:	230f      	movs	r3, #15
    7e04:	402b      	ands	r3, r5
    7e06:	2b04      	cmp	r3, #4
    7e08:	d000      	beq.n	7e0c <__aeabi_fmul+0x22c>
    7e0a:	3504      	adds	r5, #4
    7e0c:	016b      	lsls	r3, r5, #5
    7e0e:	d504      	bpl.n	7e1a <__aeabi_fmul+0x23a>
    7e10:	2401      	movs	r4, #1
    7e12:	2301      	movs	r3, #1
    7e14:	4014      	ands	r4, r2
    7e16:	2500      	movs	r5, #0
    7e18:	e729      	b.n	7c6e <__aeabi_fmul+0x8e>
    7e1a:	2401      	movs	r4, #1
    7e1c:	01ad      	lsls	r5, r5, #6
    7e1e:	0a6d      	lsrs	r5, r5, #9
    7e20:	4014      	ands	r4, r2
    7e22:	2300      	movs	r3, #0
    7e24:	e723      	b.n	7c6e <__aeabi_fmul+0x8e>
    7e26:	2380      	movs	r3, #128	; 0x80
    7e28:	03db      	lsls	r3, r3, #15
    7e2a:	431d      	orrs	r5, r3
    7e2c:	2401      	movs	r4, #1
    7e2e:	465b      	mov	r3, fp
    7e30:	026d      	lsls	r5, r5, #9
    7e32:	4023      	ands	r3, r4
    7e34:	1c1c      	adds	r4, r3, #0
    7e36:	0a6d      	lsrs	r5, r5, #9
    7e38:	23ff      	movs	r3, #255	; 0xff
    7e3a:	e718      	b.n	7c6e <__aeabi_fmul+0x8e>
    7e3c:	0000aad8 	.word	0x0000aad8
    7e40:	f7ffffff 	.word	0xf7ffffff

00007e44 <__aeabi_fsub>:
    7e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e46:	004a      	lsls	r2, r1, #1
    7e48:	0243      	lsls	r3, r0, #9
    7e4a:	0044      	lsls	r4, r0, #1
    7e4c:	024d      	lsls	r5, r1, #9
    7e4e:	0fc0      	lsrs	r0, r0, #31
    7e50:	0e24      	lsrs	r4, r4, #24
    7e52:	1c06      	adds	r6, r0, #0
    7e54:	099b      	lsrs	r3, r3, #6
    7e56:	0e12      	lsrs	r2, r2, #24
    7e58:	0fc9      	lsrs	r1, r1, #31
    7e5a:	09ad      	lsrs	r5, r5, #6
    7e5c:	2aff      	cmp	r2, #255	; 0xff
    7e5e:	d100      	bne.n	7e62 <__aeabi_fsub+0x1e>
    7e60:	e075      	b.n	7f4e <__aeabi_fsub+0x10a>
    7e62:	2701      	movs	r7, #1
    7e64:	4079      	eors	r1, r7
    7e66:	4288      	cmp	r0, r1
    7e68:	d050      	beq.n	7f0c <__aeabi_fsub+0xc8>
    7e6a:	1aa0      	subs	r0, r4, r2
    7e6c:	2800      	cmp	r0, #0
    7e6e:	dc00      	bgt.n	7e72 <__aeabi_fsub+0x2e>
    7e70:	e08f      	b.n	7f92 <__aeabi_fsub+0x14e>
    7e72:	2a00      	cmp	r2, #0
    7e74:	d11e      	bne.n	7eb4 <__aeabi_fsub+0x70>
    7e76:	2d00      	cmp	r5, #0
    7e78:	d000      	beq.n	7e7c <__aeabi_fsub+0x38>
    7e7a:	e075      	b.n	7f68 <__aeabi_fsub+0x124>
    7e7c:	075a      	lsls	r2, r3, #29
    7e7e:	d004      	beq.n	7e8a <__aeabi_fsub+0x46>
    7e80:	220f      	movs	r2, #15
    7e82:	401a      	ands	r2, r3
    7e84:	2a04      	cmp	r2, #4
    7e86:	d000      	beq.n	7e8a <__aeabi_fsub+0x46>
    7e88:	3304      	adds	r3, #4
    7e8a:	2280      	movs	r2, #128	; 0x80
    7e8c:	2001      	movs	r0, #1
    7e8e:	04d2      	lsls	r2, r2, #19
    7e90:	401a      	ands	r2, r3
    7e92:	4030      	ands	r0, r6
    7e94:	2a00      	cmp	r2, #0
    7e96:	d032      	beq.n	7efe <__aeabi_fsub+0xba>
    7e98:	3401      	adds	r4, #1
    7e9a:	2cff      	cmp	r4, #255	; 0xff
    7e9c:	d100      	bne.n	7ea0 <__aeabi_fsub+0x5c>
    7e9e:	e084      	b.n	7faa <__aeabi_fsub+0x166>
    7ea0:	019b      	lsls	r3, r3, #6
    7ea2:	0a5b      	lsrs	r3, r3, #9
    7ea4:	b2e4      	uxtb	r4, r4
    7ea6:	025b      	lsls	r3, r3, #9
    7ea8:	05e4      	lsls	r4, r4, #23
    7eaa:	0a5b      	lsrs	r3, r3, #9
    7eac:	4323      	orrs	r3, r4
    7eae:	07c0      	lsls	r0, r0, #31
    7eb0:	4318      	orrs	r0, r3
    7eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7eb4:	2cff      	cmp	r4, #255	; 0xff
    7eb6:	d0e1      	beq.n	7e7c <__aeabi_fsub+0x38>
    7eb8:	2280      	movs	r2, #128	; 0x80
    7eba:	04d2      	lsls	r2, r2, #19
    7ebc:	4315      	orrs	r5, r2
    7ebe:	281b      	cmp	r0, #27
    7ec0:	dd7a      	ble.n	7fb8 <__aeabi_fsub+0x174>
    7ec2:	2501      	movs	r5, #1
    7ec4:	1b5b      	subs	r3, r3, r5
    7ec6:	015a      	lsls	r2, r3, #5
    7ec8:	d55d      	bpl.n	7f86 <__aeabi_fsub+0x142>
    7eca:	019b      	lsls	r3, r3, #6
    7ecc:	099f      	lsrs	r7, r3, #6
    7ece:	1c38      	adds	r0, r7, #0
    7ed0:	f7ff fd10 	bl	78f4 <__clzsi2>
    7ed4:	3805      	subs	r0, #5
    7ed6:	4087      	lsls	r7, r0
    7ed8:	4284      	cmp	r4, r0
    7eda:	dc69      	bgt.n	7fb0 <__aeabi_fsub+0x16c>
    7edc:	1b00      	subs	r0, r0, r4
    7ede:	241f      	movs	r4, #31
    7ee0:	1c3a      	adds	r2, r7, #0
    7ee2:	1c43      	adds	r3, r0, #1
    7ee4:	1a20      	subs	r0, r4, r0
    7ee6:	40da      	lsrs	r2, r3
    7ee8:	4087      	lsls	r7, r0
    7eea:	1c13      	adds	r3, r2, #0
    7eec:	1e7c      	subs	r4, r7, #1
    7eee:	41a7      	sbcs	r7, r4
    7ef0:	2400      	movs	r4, #0
    7ef2:	433b      	orrs	r3, r7
    7ef4:	e7c2      	b.n	7e7c <__aeabi_fsub+0x38>
    7ef6:	1e13      	subs	r3, r2, #0
    7ef8:	d145      	bne.n	7f86 <__aeabi_fsub+0x142>
    7efa:	2300      	movs	r3, #0
    7efc:	2000      	movs	r0, #0
    7efe:	08db      	lsrs	r3, r3, #3
    7f00:	2cff      	cmp	r4, #255	; 0xff
    7f02:	d028      	beq.n	7f56 <__aeabi_fsub+0x112>
    7f04:	025b      	lsls	r3, r3, #9
    7f06:	0a5b      	lsrs	r3, r3, #9
    7f08:	b2e4      	uxtb	r4, r4
    7f0a:	e7cc      	b.n	7ea6 <__aeabi_fsub+0x62>
    7f0c:	1aa1      	subs	r1, r4, r2
    7f0e:	2900      	cmp	r1, #0
    7f10:	dd5b      	ble.n	7fca <__aeabi_fsub+0x186>
    7f12:	2a00      	cmp	r2, #0
    7f14:	d02e      	beq.n	7f74 <__aeabi_fsub+0x130>
    7f16:	2cff      	cmp	r4, #255	; 0xff
    7f18:	d0b0      	beq.n	7e7c <__aeabi_fsub+0x38>
    7f1a:	2280      	movs	r2, #128	; 0x80
    7f1c:	04d2      	lsls	r2, r2, #19
    7f1e:	4315      	orrs	r5, r2
    7f20:	291b      	cmp	r1, #27
    7f22:	dc74      	bgt.n	800e <__aeabi_fsub+0x1ca>
    7f24:	1c2f      	adds	r7, r5, #0
    7f26:	2220      	movs	r2, #32
    7f28:	40cf      	lsrs	r7, r1
    7f2a:	1a51      	subs	r1, r2, r1
    7f2c:	408d      	lsls	r5, r1
    7f2e:	1e69      	subs	r1, r5, #1
    7f30:	418d      	sbcs	r5, r1
    7f32:	433d      	orrs	r5, r7
    7f34:	195b      	adds	r3, r3, r5
    7f36:	015a      	lsls	r2, r3, #5
    7f38:	d525      	bpl.n	7f86 <__aeabi_fsub+0x142>
    7f3a:	3401      	adds	r4, #1
    7f3c:	2cff      	cmp	r4, #255	; 0xff
    7f3e:	d074      	beq.n	802a <__aeabi_fsub+0x1e6>
    7f40:	2101      	movs	r1, #1
    7f42:	4a7e      	ldr	r2, [pc, #504]	; (813c <__aeabi_fsub+0x2f8>)
    7f44:	4019      	ands	r1, r3
    7f46:	4013      	ands	r3, r2
    7f48:	085b      	lsrs	r3, r3, #1
    7f4a:	430b      	orrs	r3, r1
    7f4c:	e796      	b.n	7e7c <__aeabi_fsub+0x38>
    7f4e:	2d00      	cmp	r5, #0
    7f50:	d000      	beq.n	7f54 <__aeabi_fsub+0x110>
    7f52:	e788      	b.n	7e66 <__aeabi_fsub+0x22>
    7f54:	e785      	b.n	7e62 <__aeabi_fsub+0x1e>
    7f56:	2b00      	cmp	r3, #0
    7f58:	d027      	beq.n	7faa <__aeabi_fsub+0x166>
    7f5a:	2280      	movs	r2, #128	; 0x80
    7f5c:	03d2      	lsls	r2, r2, #15
    7f5e:	4313      	orrs	r3, r2
    7f60:	025b      	lsls	r3, r3, #9
    7f62:	0a5b      	lsrs	r3, r3, #9
    7f64:	24ff      	movs	r4, #255	; 0xff
    7f66:	e79e      	b.n	7ea6 <__aeabi_fsub+0x62>
    7f68:	3801      	subs	r0, #1
    7f6a:	2800      	cmp	r0, #0
    7f6c:	d0aa      	beq.n	7ec4 <__aeabi_fsub+0x80>
    7f6e:	2cff      	cmp	r4, #255	; 0xff
    7f70:	d1a5      	bne.n	7ebe <__aeabi_fsub+0x7a>
    7f72:	e783      	b.n	7e7c <__aeabi_fsub+0x38>
    7f74:	2d00      	cmp	r5, #0
    7f76:	d100      	bne.n	7f7a <__aeabi_fsub+0x136>
    7f78:	e780      	b.n	7e7c <__aeabi_fsub+0x38>
    7f7a:	3901      	subs	r1, #1
    7f7c:	2900      	cmp	r1, #0
    7f7e:	d0d9      	beq.n	7f34 <__aeabi_fsub+0xf0>
    7f80:	2cff      	cmp	r4, #255	; 0xff
    7f82:	d1cd      	bne.n	7f20 <__aeabi_fsub+0xdc>
    7f84:	e77a      	b.n	7e7c <__aeabi_fsub+0x38>
    7f86:	075a      	lsls	r2, r3, #29
    7f88:	d000      	beq.n	7f8c <__aeabi_fsub+0x148>
    7f8a:	e779      	b.n	7e80 <__aeabi_fsub+0x3c>
    7f8c:	2001      	movs	r0, #1
    7f8e:	4030      	ands	r0, r6
    7f90:	e7b5      	b.n	7efe <__aeabi_fsub+0xba>
    7f92:	2800      	cmp	r0, #0
    7f94:	d125      	bne.n	7fe2 <__aeabi_fsub+0x19e>
    7f96:	1c62      	adds	r2, r4, #1
    7f98:	b2d2      	uxtb	r2, r2
    7f9a:	2a01      	cmp	r2, #1
    7f9c:	dd55      	ble.n	804a <__aeabi_fsub+0x206>
    7f9e:	1b5f      	subs	r7, r3, r5
    7fa0:	017a      	lsls	r2, r7, #5
    7fa2:	d52d      	bpl.n	8000 <__aeabi_fsub+0x1bc>
    7fa4:	1aef      	subs	r7, r5, r3
    7fa6:	1c0e      	adds	r6, r1, #0
    7fa8:	e791      	b.n	7ece <__aeabi_fsub+0x8a>
    7faa:	24ff      	movs	r4, #255	; 0xff
    7fac:	2300      	movs	r3, #0
    7fae:	e77a      	b.n	7ea6 <__aeabi_fsub+0x62>
    7fb0:	4b62      	ldr	r3, [pc, #392]	; (813c <__aeabi_fsub+0x2f8>)
    7fb2:	1a24      	subs	r4, r4, r0
    7fb4:	403b      	ands	r3, r7
    7fb6:	e761      	b.n	7e7c <__aeabi_fsub+0x38>
    7fb8:	1c29      	adds	r1, r5, #0
    7fba:	2220      	movs	r2, #32
    7fbc:	40c1      	lsrs	r1, r0
    7fbe:	1a10      	subs	r0, r2, r0
    7fc0:	4085      	lsls	r5, r0
    7fc2:	1e68      	subs	r0, r5, #1
    7fc4:	4185      	sbcs	r5, r0
    7fc6:	430d      	orrs	r5, r1
    7fc8:	e77c      	b.n	7ec4 <__aeabi_fsub+0x80>
    7fca:	2900      	cmp	r1, #0
    7fcc:	d146      	bne.n	805c <__aeabi_fsub+0x218>
    7fce:	1c62      	adds	r2, r4, #1
    7fd0:	b2d1      	uxtb	r1, r2
    7fd2:	2901      	cmp	r1, #1
    7fd4:	dd2b      	ble.n	802e <__aeabi_fsub+0x1ea>
    7fd6:	2aff      	cmp	r2, #255	; 0xff
    7fd8:	d026      	beq.n	8028 <__aeabi_fsub+0x1e4>
    7fda:	18eb      	adds	r3, r5, r3
    7fdc:	085b      	lsrs	r3, r3, #1
    7fde:	1c14      	adds	r4, r2, #0
    7fe0:	e74c      	b.n	7e7c <__aeabi_fsub+0x38>
    7fe2:	2c00      	cmp	r4, #0
    7fe4:	d015      	beq.n	8012 <__aeabi_fsub+0x1ce>
    7fe6:	2aff      	cmp	r2, #255	; 0xff
    7fe8:	d01a      	beq.n	8020 <__aeabi_fsub+0x1dc>
    7fea:	2480      	movs	r4, #128	; 0x80
    7fec:	04e4      	lsls	r4, r4, #19
    7fee:	4240      	negs	r0, r0
    7ff0:	4323      	orrs	r3, r4
    7ff2:	281b      	cmp	r0, #27
    7ff4:	dd4d      	ble.n	8092 <__aeabi_fsub+0x24e>
    7ff6:	2301      	movs	r3, #1
    7ff8:	1aeb      	subs	r3, r5, r3
    7ffa:	1c14      	adds	r4, r2, #0
    7ffc:	1c0e      	adds	r6, r1, #0
    7ffe:	e762      	b.n	7ec6 <__aeabi_fsub+0x82>
    8000:	2f00      	cmp	r7, #0
    8002:	d000      	beq.n	8006 <__aeabi_fsub+0x1c2>
    8004:	e763      	b.n	7ece <__aeabi_fsub+0x8a>
    8006:	2300      	movs	r3, #0
    8008:	2000      	movs	r0, #0
    800a:	2400      	movs	r4, #0
    800c:	e777      	b.n	7efe <__aeabi_fsub+0xba>
    800e:	2501      	movs	r5, #1
    8010:	e790      	b.n	7f34 <__aeabi_fsub+0xf0>
    8012:	2b00      	cmp	r3, #0
    8014:	d039      	beq.n	808a <__aeabi_fsub+0x246>
    8016:	43c0      	mvns	r0, r0
    8018:	2800      	cmp	r0, #0
    801a:	d0ed      	beq.n	7ff8 <__aeabi_fsub+0x1b4>
    801c:	2aff      	cmp	r2, #255	; 0xff
    801e:	d1e8      	bne.n	7ff2 <__aeabi_fsub+0x1ae>
    8020:	1c2b      	adds	r3, r5, #0
    8022:	24ff      	movs	r4, #255	; 0xff
    8024:	1c0e      	adds	r6, r1, #0
    8026:	e729      	b.n	7e7c <__aeabi_fsub+0x38>
    8028:	24ff      	movs	r4, #255	; 0xff
    802a:	2300      	movs	r3, #0
    802c:	e767      	b.n	7efe <__aeabi_fsub+0xba>
    802e:	2c00      	cmp	r4, #0
    8030:	d15a      	bne.n	80e8 <__aeabi_fsub+0x2a4>
    8032:	2b00      	cmp	r3, #0
    8034:	d07f      	beq.n	8136 <__aeabi_fsub+0x2f2>
    8036:	2d00      	cmp	r5, #0
    8038:	d100      	bne.n	803c <__aeabi_fsub+0x1f8>
    803a:	e71f      	b.n	7e7c <__aeabi_fsub+0x38>
    803c:	195b      	adds	r3, r3, r5
    803e:	015a      	lsls	r2, r3, #5
    8040:	d5a1      	bpl.n	7f86 <__aeabi_fsub+0x142>
    8042:	4a3e      	ldr	r2, [pc, #248]	; (813c <__aeabi_fsub+0x2f8>)
    8044:	3401      	adds	r4, #1
    8046:	4013      	ands	r3, r2
    8048:	e718      	b.n	7e7c <__aeabi_fsub+0x38>
    804a:	2c00      	cmp	r4, #0
    804c:	d115      	bne.n	807a <__aeabi_fsub+0x236>
    804e:	2b00      	cmp	r3, #0
    8050:	d12f      	bne.n	80b2 <__aeabi_fsub+0x26e>
    8052:	2d00      	cmp	r5, #0
    8054:	d05e      	beq.n	8114 <__aeabi_fsub+0x2d0>
    8056:	1c2b      	adds	r3, r5, #0
    8058:	1c0e      	adds	r6, r1, #0
    805a:	e70f      	b.n	7e7c <__aeabi_fsub+0x38>
    805c:	2c00      	cmp	r4, #0
    805e:	d121      	bne.n	80a4 <__aeabi_fsub+0x260>
    8060:	2b00      	cmp	r3, #0
    8062:	d054      	beq.n	810e <__aeabi_fsub+0x2ca>
    8064:	43c9      	mvns	r1, r1
    8066:	2900      	cmp	r1, #0
    8068:	d004      	beq.n	8074 <__aeabi_fsub+0x230>
    806a:	2aff      	cmp	r2, #255	; 0xff
    806c:	d04c      	beq.n	8108 <__aeabi_fsub+0x2c4>
    806e:	291b      	cmp	r1, #27
    8070:	dd58      	ble.n	8124 <__aeabi_fsub+0x2e0>
    8072:	2301      	movs	r3, #1
    8074:	195b      	adds	r3, r3, r5
    8076:	1c14      	adds	r4, r2, #0
    8078:	e75d      	b.n	7f36 <__aeabi_fsub+0xf2>
    807a:	2b00      	cmp	r3, #0
    807c:	d123      	bne.n	80c6 <__aeabi_fsub+0x282>
    807e:	2d00      	cmp	r5, #0
    8080:	d04b      	beq.n	811a <__aeabi_fsub+0x2d6>
    8082:	1c2b      	adds	r3, r5, #0
    8084:	1c0e      	adds	r6, r1, #0
    8086:	24ff      	movs	r4, #255	; 0xff
    8088:	e6f8      	b.n	7e7c <__aeabi_fsub+0x38>
    808a:	1c2b      	adds	r3, r5, #0
    808c:	1c14      	adds	r4, r2, #0
    808e:	1c0e      	adds	r6, r1, #0
    8090:	e6f4      	b.n	7e7c <__aeabi_fsub+0x38>
    8092:	1c1e      	adds	r6, r3, #0
    8094:	2420      	movs	r4, #32
    8096:	40c6      	lsrs	r6, r0
    8098:	1a20      	subs	r0, r4, r0
    809a:	4083      	lsls	r3, r0
    809c:	1e58      	subs	r0, r3, #1
    809e:	4183      	sbcs	r3, r0
    80a0:	4333      	orrs	r3, r6
    80a2:	e7a9      	b.n	7ff8 <__aeabi_fsub+0x1b4>
    80a4:	2aff      	cmp	r2, #255	; 0xff
    80a6:	d02f      	beq.n	8108 <__aeabi_fsub+0x2c4>
    80a8:	2480      	movs	r4, #128	; 0x80
    80aa:	04e4      	lsls	r4, r4, #19
    80ac:	4249      	negs	r1, r1
    80ae:	4323      	orrs	r3, r4
    80b0:	e7dd      	b.n	806e <__aeabi_fsub+0x22a>
    80b2:	2d00      	cmp	r5, #0
    80b4:	d100      	bne.n	80b8 <__aeabi_fsub+0x274>
    80b6:	e6e1      	b.n	7e7c <__aeabi_fsub+0x38>
    80b8:	1b5a      	subs	r2, r3, r5
    80ba:	0150      	lsls	r0, r2, #5
    80bc:	d400      	bmi.n	80c0 <__aeabi_fsub+0x27c>
    80be:	e71a      	b.n	7ef6 <__aeabi_fsub+0xb2>
    80c0:	1aeb      	subs	r3, r5, r3
    80c2:	1c0e      	adds	r6, r1, #0
    80c4:	e6da      	b.n	7e7c <__aeabi_fsub+0x38>
    80c6:	24ff      	movs	r4, #255	; 0xff
    80c8:	2d00      	cmp	r5, #0
    80ca:	d100      	bne.n	80ce <__aeabi_fsub+0x28a>
    80cc:	e6d6      	b.n	7e7c <__aeabi_fsub+0x38>
    80ce:	2280      	movs	r2, #128	; 0x80
    80d0:	08db      	lsrs	r3, r3, #3
    80d2:	03d2      	lsls	r2, r2, #15
    80d4:	4213      	tst	r3, r2
    80d6:	d004      	beq.n	80e2 <__aeabi_fsub+0x29e>
    80d8:	08ed      	lsrs	r5, r5, #3
    80da:	4215      	tst	r5, r2
    80dc:	d101      	bne.n	80e2 <__aeabi_fsub+0x29e>
    80de:	1c2b      	adds	r3, r5, #0
    80e0:	1c0e      	adds	r6, r1, #0
    80e2:	00db      	lsls	r3, r3, #3
    80e4:	24ff      	movs	r4, #255	; 0xff
    80e6:	e6c9      	b.n	7e7c <__aeabi_fsub+0x38>
    80e8:	2b00      	cmp	r3, #0
    80ea:	d00d      	beq.n	8108 <__aeabi_fsub+0x2c4>
    80ec:	24ff      	movs	r4, #255	; 0xff
    80ee:	2d00      	cmp	r5, #0
    80f0:	d100      	bne.n	80f4 <__aeabi_fsub+0x2b0>
    80f2:	e6c3      	b.n	7e7c <__aeabi_fsub+0x38>
    80f4:	2280      	movs	r2, #128	; 0x80
    80f6:	08db      	lsrs	r3, r3, #3
    80f8:	03d2      	lsls	r2, r2, #15
    80fa:	4213      	tst	r3, r2
    80fc:	d0f1      	beq.n	80e2 <__aeabi_fsub+0x29e>
    80fe:	08ed      	lsrs	r5, r5, #3
    8100:	4215      	tst	r5, r2
    8102:	d1ee      	bne.n	80e2 <__aeabi_fsub+0x29e>
    8104:	1c2b      	adds	r3, r5, #0
    8106:	e7ec      	b.n	80e2 <__aeabi_fsub+0x29e>
    8108:	1c2b      	adds	r3, r5, #0
    810a:	24ff      	movs	r4, #255	; 0xff
    810c:	e6b6      	b.n	7e7c <__aeabi_fsub+0x38>
    810e:	1c2b      	adds	r3, r5, #0
    8110:	1c14      	adds	r4, r2, #0
    8112:	e6b3      	b.n	7e7c <__aeabi_fsub+0x38>
    8114:	1c23      	adds	r3, r4, #0
    8116:	2000      	movs	r0, #0
    8118:	e6f1      	b.n	7efe <__aeabi_fsub+0xba>
    811a:	2380      	movs	r3, #128	; 0x80
    811c:	2000      	movs	r0, #0
    811e:	049b      	lsls	r3, r3, #18
    8120:	24ff      	movs	r4, #255	; 0xff
    8122:	e6ec      	b.n	7efe <__aeabi_fsub+0xba>
    8124:	1c1f      	adds	r7, r3, #0
    8126:	2420      	movs	r4, #32
    8128:	40cf      	lsrs	r7, r1
    812a:	1a61      	subs	r1, r4, r1
    812c:	408b      	lsls	r3, r1
    812e:	1e59      	subs	r1, r3, #1
    8130:	418b      	sbcs	r3, r1
    8132:	433b      	orrs	r3, r7
    8134:	e79e      	b.n	8074 <__aeabi_fsub+0x230>
    8136:	1c2b      	adds	r3, r5, #0
    8138:	e6a0      	b.n	7e7c <__aeabi_fsub+0x38>
    813a:	46c0      	nop			; (mov r8, r8)
    813c:	fbffffff 	.word	0xfbffffff

00008140 <__aeabi_f2iz>:
    8140:	0242      	lsls	r2, r0, #9
    8142:	0a51      	lsrs	r1, r2, #9
    8144:	0042      	lsls	r2, r0, #1
    8146:	0fc3      	lsrs	r3, r0, #31
    8148:	0e12      	lsrs	r2, r2, #24
    814a:	2000      	movs	r0, #0
    814c:	2a7e      	cmp	r2, #126	; 0x7e
    814e:	dd0d      	ble.n	816c <__aeabi_f2iz+0x2c>
    8150:	2a9d      	cmp	r2, #157	; 0x9d
    8152:	dc0c      	bgt.n	816e <__aeabi_f2iz+0x2e>
    8154:	2080      	movs	r0, #128	; 0x80
    8156:	0400      	lsls	r0, r0, #16
    8158:	4301      	orrs	r1, r0
    815a:	2a95      	cmp	r2, #149	; 0x95
    815c:	dc0a      	bgt.n	8174 <__aeabi_f2iz+0x34>
    815e:	2096      	movs	r0, #150	; 0x96
    8160:	1a82      	subs	r2, r0, r2
    8162:	40d1      	lsrs	r1, r2
    8164:	1c0a      	adds	r2, r1, #0
    8166:	4258      	negs	r0, r3
    8168:	4042      	eors	r2, r0
    816a:	18d0      	adds	r0, r2, r3
    816c:	4770      	bx	lr
    816e:	4a03      	ldr	r2, [pc, #12]	; (817c <__aeabi_f2iz+0x3c>)
    8170:	1898      	adds	r0, r3, r2
    8172:	e7fb      	b.n	816c <__aeabi_f2iz+0x2c>
    8174:	3a96      	subs	r2, #150	; 0x96
    8176:	4091      	lsls	r1, r2
    8178:	1c0a      	adds	r2, r1, #0
    817a:	e7f4      	b.n	8166 <__aeabi_f2iz+0x26>
    817c:	7fffffff 	.word	0x7fffffff

00008180 <__aeabi_i2f>:
    8180:	b570      	push	{r4, r5, r6, lr}
    8182:	1e04      	subs	r4, r0, #0
    8184:	d039      	beq.n	81fa <__aeabi_i2f+0x7a>
    8186:	0fc5      	lsrs	r5, r0, #31
    8188:	d000      	beq.n	818c <__aeabi_i2f+0xc>
    818a:	4244      	negs	r4, r0
    818c:	1c20      	adds	r0, r4, #0
    818e:	f7ff fbb1 	bl	78f4 <__clzsi2>
    8192:	239e      	movs	r3, #158	; 0x9e
    8194:	1c26      	adds	r6, r4, #0
    8196:	1a1b      	subs	r3, r3, r0
    8198:	2b96      	cmp	r3, #150	; 0x96
    819a:	dc07      	bgt.n	81ac <__aeabi_i2f+0x2c>
    819c:	2808      	cmp	r0, #8
    819e:	dd01      	ble.n	81a4 <__aeabi_i2f+0x24>
    81a0:	3808      	subs	r0, #8
    81a2:	4084      	lsls	r4, r0
    81a4:	0264      	lsls	r4, r4, #9
    81a6:	0a64      	lsrs	r4, r4, #9
    81a8:	b2d8      	uxtb	r0, r3
    81aa:	e01e      	b.n	81ea <__aeabi_i2f+0x6a>
    81ac:	2b99      	cmp	r3, #153	; 0x99
    81ae:	dd0a      	ble.n	81c6 <__aeabi_i2f+0x46>
    81b0:	2205      	movs	r2, #5
    81b2:	1c21      	adds	r1, r4, #0
    81b4:	1a12      	subs	r2, r2, r0
    81b6:	40d1      	lsrs	r1, r2
    81b8:	1c0a      	adds	r2, r1, #0
    81ba:	1c01      	adds	r1, r0, #0
    81bc:	311b      	adds	r1, #27
    81be:	408e      	lsls	r6, r1
    81c0:	1e71      	subs	r1, r6, #1
    81c2:	418e      	sbcs	r6, r1
    81c4:	4316      	orrs	r6, r2
    81c6:	2805      	cmp	r0, #5
    81c8:	dd01      	ble.n	81ce <__aeabi_i2f+0x4e>
    81ca:	1f42      	subs	r2, r0, #5
    81cc:	4096      	lsls	r6, r2
    81ce:	4c0f      	ldr	r4, [pc, #60]	; (820c <__aeabi_i2f+0x8c>)
    81d0:	4034      	ands	r4, r6
    81d2:	0772      	lsls	r2, r6, #29
    81d4:	d004      	beq.n	81e0 <__aeabi_i2f+0x60>
    81d6:	220f      	movs	r2, #15
    81d8:	4016      	ands	r6, r2
    81da:	2e04      	cmp	r6, #4
    81dc:	d000      	beq.n	81e0 <__aeabi_i2f+0x60>
    81de:	3404      	adds	r4, #4
    81e0:	0162      	lsls	r2, r4, #5
    81e2:	d40e      	bmi.n	8202 <__aeabi_i2f+0x82>
    81e4:	01a4      	lsls	r4, r4, #6
    81e6:	0a64      	lsrs	r4, r4, #9
    81e8:	b2d8      	uxtb	r0, r3
    81ea:	0264      	lsls	r4, r4, #9
    81ec:	05c0      	lsls	r0, r0, #23
    81ee:	0a64      	lsrs	r4, r4, #9
    81f0:	07ed      	lsls	r5, r5, #31
    81f2:	4304      	orrs	r4, r0
    81f4:	432c      	orrs	r4, r5
    81f6:	1c20      	adds	r0, r4, #0
    81f8:	bd70      	pop	{r4, r5, r6, pc}
    81fa:	2500      	movs	r5, #0
    81fc:	2000      	movs	r0, #0
    81fe:	2400      	movs	r4, #0
    8200:	e7f3      	b.n	81ea <__aeabi_i2f+0x6a>
    8202:	4b02      	ldr	r3, [pc, #8]	; (820c <__aeabi_i2f+0x8c>)
    8204:	401c      	ands	r4, r3
    8206:	239f      	movs	r3, #159	; 0x9f
    8208:	1a1b      	subs	r3, r3, r0
    820a:	e7eb      	b.n	81e4 <__aeabi_i2f+0x64>
    820c:	fbffffff 	.word	0xfbffffff

00008210 <__aeabi_dadd>:
    8210:	b5f0      	push	{r4, r5, r6, r7, lr}
    8212:	4645      	mov	r5, r8
    8214:	4657      	mov	r7, sl
    8216:	464e      	mov	r6, r9
    8218:	4694      	mov	ip, r2
    821a:	004c      	lsls	r4, r1, #1
    821c:	030a      	lsls	r2, r1, #12
    821e:	0fc9      	lsrs	r1, r1, #31
    8220:	b4e0      	push	{r5, r6, r7}
    8222:	4688      	mov	r8, r1
    8224:	1c0e      	adds	r6, r1, #0
    8226:	0319      	lsls	r1, r3, #12
    8228:	0f47      	lsrs	r7, r0, #29
    822a:	00c5      	lsls	r5, r0, #3
    822c:	0a48      	lsrs	r0, r1, #9
    822e:	4661      	mov	r1, ip
    8230:	0f49      	lsrs	r1, r1, #29
    8232:	4301      	orrs	r1, r0
    8234:	4660      	mov	r0, ip
    8236:	0a52      	lsrs	r2, r2, #9
    8238:	4317      	orrs	r7, r2
    823a:	00c0      	lsls	r0, r0, #3
    823c:	005a      	lsls	r2, r3, #1
    823e:	0d64      	lsrs	r4, r4, #21
    8240:	0d52      	lsrs	r2, r2, #21
    8242:	0fdb      	lsrs	r3, r3, #31
    8244:	4684      	mov	ip, r0
    8246:	4598      	cmp	r8, r3
    8248:	d100      	bne.n	824c <__aeabi_dadd+0x3c>
    824a:	e0a7      	b.n	839c <__aeabi_dadd+0x18c>
    824c:	1aa0      	subs	r0, r4, r2
    824e:	2800      	cmp	r0, #0
    8250:	dc00      	bgt.n	8254 <__aeabi_dadd+0x44>
    8252:	e101      	b.n	8458 <__aeabi_dadd+0x248>
    8254:	2a00      	cmp	r2, #0
    8256:	d13d      	bne.n	82d4 <__aeabi_dadd+0xc4>
    8258:	4663      	mov	r3, ip
    825a:	430b      	orrs	r3, r1
    825c:	d000      	beq.n	8260 <__aeabi_dadd+0x50>
    825e:	e0d4      	b.n	840a <__aeabi_dadd+0x1fa>
    8260:	076b      	lsls	r3, r5, #29
    8262:	d100      	bne.n	8266 <__aeabi_dadd+0x56>
    8264:	e088      	b.n	8378 <__aeabi_dadd+0x168>
    8266:	230f      	movs	r3, #15
    8268:	402b      	ands	r3, r5
    826a:	2b04      	cmp	r3, #4
    826c:	d100      	bne.n	8270 <__aeabi_dadd+0x60>
    826e:	e083      	b.n	8378 <__aeabi_dadd+0x168>
    8270:	1d2a      	adds	r2, r5, #4
    8272:	42aa      	cmp	r2, r5
    8274:	41ad      	sbcs	r5, r5
    8276:	2380      	movs	r3, #128	; 0x80
    8278:	426d      	negs	r5, r5
    827a:	197f      	adds	r7, r7, r5
    827c:	041b      	lsls	r3, r3, #16
    827e:	403b      	ands	r3, r7
    8280:	4646      	mov	r6, r8
    8282:	1c15      	adds	r5, r2, #0
    8284:	2b00      	cmp	r3, #0
    8286:	d100      	bne.n	828a <__aeabi_dadd+0x7a>
    8288:	e07c      	b.n	8384 <__aeabi_dadd+0x174>
    828a:	4bcc      	ldr	r3, [pc, #816]	; (85bc <__aeabi_dadd+0x3ac>)
    828c:	3401      	adds	r4, #1
    828e:	429c      	cmp	r4, r3
    8290:	d100      	bne.n	8294 <__aeabi_dadd+0x84>
    8292:	e0fd      	b.n	8490 <__aeabi_dadd+0x280>
    8294:	1c3a      	adds	r2, r7, #0
    8296:	4bca      	ldr	r3, [pc, #808]	; (85c0 <__aeabi_dadd+0x3b0>)
    8298:	08ed      	lsrs	r5, r5, #3
    829a:	401a      	ands	r2, r3
    829c:	0750      	lsls	r0, r2, #29
    829e:	0564      	lsls	r4, r4, #21
    82a0:	0252      	lsls	r2, r2, #9
    82a2:	4305      	orrs	r5, r0
    82a4:	0b12      	lsrs	r2, r2, #12
    82a6:	0d64      	lsrs	r4, r4, #21
    82a8:	2100      	movs	r1, #0
    82aa:	0312      	lsls	r2, r2, #12
    82ac:	0d0b      	lsrs	r3, r1, #20
    82ae:	051b      	lsls	r3, r3, #20
    82b0:	0564      	lsls	r4, r4, #21
    82b2:	0b12      	lsrs	r2, r2, #12
    82b4:	431a      	orrs	r2, r3
    82b6:	0863      	lsrs	r3, r4, #1
    82b8:	4cc2      	ldr	r4, [pc, #776]	; (85c4 <__aeabi_dadd+0x3b4>)
    82ba:	07f6      	lsls	r6, r6, #31
    82bc:	4014      	ands	r4, r2
    82be:	431c      	orrs	r4, r3
    82c0:	0064      	lsls	r4, r4, #1
    82c2:	0864      	lsrs	r4, r4, #1
    82c4:	4334      	orrs	r4, r6
    82c6:	1c28      	adds	r0, r5, #0
    82c8:	1c21      	adds	r1, r4, #0
    82ca:	bc1c      	pop	{r2, r3, r4}
    82cc:	4690      	mov	r8, r2
    82ce:	4699      	mov	r9, r3
    82d0:	46a2      	mov	sl, r4
    82d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82d4:	4bb9      	ldr	r3, [pc, #740]	; (85bc <__aeabi_dadd+0x3ac>)
    82d6:	429c      	cmp	r4, r3
    82d8:	d0c2      	beq.n	8260 <__aeabi_dadd+0x50>
    82da:	2380      	movs	r3, #128	; 0x80
    82dc:	041b      	lsls	r3, r3, #16
    82de:	4319      	orrs	r1, r3
    82e0:	2838      	cmp	r0, #56	; 0x38
    82e2:	dd00      	ble.n	82e6 <__aeabi_dadd+0xd6>
    82e4:	e0ec      	b.n	84c0 <__aeabi_dadd+0x2b0>
    82e6:	281f      	cmp	r0, #31
    82e8:	dd00      	ble.n	82ec <__aeabi_dadd+0xdc>
    82ea:	e121      	b.n	8530 <__aeabi_dadd+0x320>
    82ec:	2220      	movs	r2, #32
    82ee:	1c0e      	adds	r6, r1, #0
    82f0:	4663      	mov	r3, ip
    82f2:	1a12      	subs	r2, r2, r0
    82f4:	4096      	lsls	r6, r2
    82f6:	40c3      	lsrs	r3, r0
    82f8:	4333      	orrs	r3, r6
    82fa:	4666      	mov	r6, ip
    82fc:	4096      	lsls	r6, r2
    82fe:	1c32      	adds	r2, r6, #0
    8300:	1e56      	subs	r6, r2, #1
    8302:	41b2      	sbcs	r2, r6
    8304:	4313      	orrs	r3, r2
    8306:	1c0a      	adds	r2, r1, #0
    8308:	40c2      	lsrs	r2, r0
    830a:	1aeb      	subs	r3, r5, r3
    830c:	429d      	cmp	r5, r3
    830e:	41b6      	sbcs	r6, r6
    8310:	1c1d      	adds	r5, r3, #0
    8312:	1aba      	subs	r2, r7, r2
    8314:	4276      	negs	r6, r6
    8316:	1b97      	subs	r7, r2, r6
    8318:	023b      	lsls	r3, r7, #8
    831a:	d400      	bmi.n	831e <__aeabi_dadd+0x10e>
    831c:	e097      	b.n	844e <__aeabi_dadd+0x23e>
    831e:	027a      	lsls	r2, r7, #9
    8320:	0a56      	lsrs	r6, r2, #9
    8322:	2e00      	cmp	r6, #0
    8324:	d100      	bne.n	8328 <__aeabi_dadd+0x118>
    8326:	e0b6      	b.n	8496 <__aeabi_dadd+0x286>
    8328:	1c30      	adds	r0, r6, #0
    832a:	f7ff fae3 	bl	78f4 <__clzsi2>
    832e:	1c03      	adds	r3, r0, #0
    8330:	3b08      	subs	r3, #8
    8332:	2b1f      	cmp	r3, #31
    8334:	dd00      	ble.n	8338 <__aeabi_dadd+0x128>
    8336:	e0b7      	b.n	84a8 <__aeabi_dadd+0x298>
    8338:	409e      	lsls	r6, r3
    833a:	1c37      	adds	r7, r6, #0
    833c:	2628      	movs	r6, #40	; 0x28
    833e:	1c2a      	adds	r2, r5, #0
    8340:	1a36      	subs	r6, r6, r0
    8342:	40f2      	lsrs	r2, r6
    8344:	1c16      	adds	r6, r2, #0
    8346:	409d      	lsls	r5, r3
    8348:	433e      	orrs	r6, r7
    834a:	429c      	cmp	r4, r3
    834c:	dd00      	ble.n	8350 <__aeabi_dadd+0x140>
    834e:	e0b2      	b.n	84b6 <__aeabi_dadd+0x2a6>
    8350:	1b1c      	subs	r4, r3, r4
    8352:	1c62      	adds	r2, r4, #1
    8354:	2a1f      	cmp	r2, #31
    8356:	dd00      	ble.n	835a <__aeabi_dadd+0x14a>
    8358:	e0d8      	b.n	850c <__aeabi_dadd+0x2fc>
    835a:	231f      	movs	r3, #31
    835c:	1c29      	adds	r1, r5, #0
    835e:	1b1c      	subs	r4, r3, r4
    8360:	1c33      	adds	r3, r6, #0
    8362:	40a5      	lsls	r5, r4
    8364:	40a3      	lsls	r3, r4
    8366:	40d1      	lsrs	r1, r2
    8368:	1e6c      	subs	r4, r5, #1
    836a:	41a5      	sbcs	r5, r4
    836c:	40d6      	lsrs	r6, r2
    836e:	4319      	orrs	r1, r3
    8370:	430d      	orrs	r5, r1
    8372:	1c37      	adds	r7, r6, #0
    8374:	2400      	movs	r4, #0
    8376:	e773      	b.n	8260 <__aeabi_dadd+0x50>
    8378:	2380      	movs	r3, #128	; 0x80
    837a:	041b      	lsls	r3, r3, #16
    837c:	403b      	ands	r3, r7
    837e:	4646      	mov	r6, r8
    8380:	d000      	beq.n	8384 <__aeabi_dadd+0x174>
    8382:	e782      	b.n	828a <__aeabi_dadd+0x7a>
    8384:	4b8d      	ldr	r3, [pc, #564]	; (85bc <__aeabi_dadd+0x3ac>)
    8386:	08ed      	lsrs	r5, r5, #3
    8388:	0778      	lsls	r0, r7, #29
    838a:	4305      	orrs	r5, r0
    838c:	08fa      	lsrs	r2, r7, #3
    838e:	429c      	cmp	r4, r3
    8390:	d032      	beq.n	83f8 <__aeabi_dadd+0x1e8>
    8392:	0312      	lsls	r2, r2, #12
    8394:	0564      	lsls	r4, r4, #21
    8396:	0b12      	lsrs	r2, r2, #12
    8398:	0d64      	lsrs	r4, r4, #21
    839a:	e785      	b.n	82a8 <__aeabi_dadd+0x98>
    839c:	1aa3      	subs	r3, r4, r2
    839e:	2b00      	cmp	r3, #0
    83a0:	dc00      	bgt.n	83a4 <__aeabi_dadd+0x194>
    83a2:	e094      	b.n	84ce <__aeabi_dadd+0x2be>
    83a4:	2a00      	cmp	r2, #0
    83a6:	d03c      	beq.n	8422 <__aeabi_dadd+0x212>
    83a8:	4a84      	ldr	r2, [pc, #528]	; (85bc <__aeabi_dadd+0x3ac>)
    83aa:	4294      	cmp	r4, r2
    83ac:	d100      	bne.n	83b0 <__aeabi_dadd+0x1a0>
    83ae:	e757      	b.n	8260 <__aeabi_dadd+0x50>
    83b0:	2280      	movs	r2, #128	; 0x80
    83b2:	0412      	lsls	r2, r2, #16
    83b4:	4311      	orrs	r1, r2
    83b6:	2b38      	cmp	r3, #56	; 0x38
    83b8:	dc00      	bgt.n	83bc <__aeabi_dadd+0x1ac>
    83ba:	e105      	b.n	85c8 <__aeabi_dadd+0x3b8>
    83bc:	4663      	mov	r3, ip
    83be:	4319      	orrs	r1, r3
    83c0:	1e48      	subs	r0, r1, #1
    83c2:	4181      	sbcs	r1, r0
    83c4:	2200      	movs	r2, #0
    83c6:	b2c8      	uxtb	r0, r1
    83c8:	1940      	adds	r0, r0, r5
    83ca:	42a8      	cmp	r0, r5
    83cc:	419b      	sbcs	r3, r3
    83ce:	1c05      	adds	r5, r0, #0
    83d0:	19d2      	adds	r2, r2, r7
    83d2:	425b      	negs	r3, r3
    83d4:	18d7      	adds	r7, r2, r3
    83d6:	023b      	lsls	r3, r7, #8
    83d8:	d539      	bpl.n	844e <__aeabi_dadd+0x23e>
    83da:	4b78      	ldr	r3, [pc, #480]	; (85bc <__aeabi_dadd+0x3ac>)
    83dc:	3401      	adds	r4, #1
    83de:	429c      	cmp	r4, r3
    83e0:	d100      	bne.n	83e4 <__aeabi_dadd+0x1d4>
    83e2:	e14c      	b.n	867e <__aeabi_dadd+0x46e>
    83e4:	2001      	movs	r0, #1
    83e6:	4a76      	ldr	r2, [pc, #472]	; (85c0 <__aeabi_dadd+0x3b0>)
    83e8:	086b      	lsrs	r3, r5, #1
    83ea:	403a      	ands	r2, r7
    83ec:	4028      	ands	r0, r5
    83ee:	4318      	orrs	r0, r3
    83f0:	07d5      	lsls	r5, r2, #31
    83f2:	4305      	orrs	r5, r0
    83f4:	0857      	lsrs	r7, r2, #1
    83f6:	e733      	b.n	8260 <__aeabi_dadd+0x50>
    83f8:	1c2b      	adds	r3, r5, #0
    83fa:	4313      	orrs	r3, r2
    83fc:	d048      	beq.n	8490 <__aeabi_dadd+0x280>
    83fe:	2380      	movs	r3, #128	; 0x80
    8400:	031b      	lsls	r3, r3, #12
    8402:	431a      	orrs	r2, r3
    8404:	0312      	lsls	r2, r2, #12
    8406:	0b12      	lsrs	r2, r2, #12
    8408:	e74e      	b.n	82a8 <__aeabi_dadd+0x98>
    840a:	3801      	subs	r0, #1
    840c:	2800      	cmp	r0, #0
    840e:	d178      	bne.n	8502 <__aeabi_dadd+0x2f2>
    8410:	4663      	mov	r3, ip
    8412:	1aee      	subs	r6, r5, r3
    8414:	42b5      	cmp	r5, r6
    8416:	419b      	sbcs	r3, r3
    8418:	1a7a      	subs	r2, r7, r1
    841a:	425b      	negs	r3, r3
    841c:	1ad7      	subs	r7, r2, r3
    841e:	1c35      	adds	r5, r6, #0
    8420:	e77a      	b.n	8318 <__aeabi_dadd+0x108>
    8422:	1c02      	adds	r2, r0, #0
    8424:	430a      	orrs	r2, r1
    8426:	d100      	bne.n	842a <__aeabi_dadd+0x21a>
    8428:	e71a      	b.n	8260 <__aeabi_dadd+0x50>
    842a:	3b01      	subs	r3, #1
    842c:	2b00      	cmp	r3, #0
    842e:	d000      	beq.n	8432 <__aeabi_dadd+0x222>
    8430:	e0f2      	b.n	8618 <__aeabi_dadd+0x408>
    8432:	1940      	adds	r0, r0, r5
    8434:	42a8      	cmp	r0, r5
    8436:	419b      	sbcs	r3, r3
    8438:	19ca      	adds	r2, r1, r7
    843a:	425b      	negs	r3, r3
    843c:	18d7      	adds	r7, r2, r3
    843e:	1c05      	adds	r5, r0, #0
    8440:	e7c9      	b.n	83d6 <__aeabi_dadd+0x1c6>
    8442:	1c13      	adds	r3, r2, #0
    8444:	4333      	orrs	r3, r6
    8446:	d100      	bne.n	844a <__aeabi_dadd+0x23a>
    8448:	e118      	b.n	867c <__aeabi_dadd+0x46c>
    844a:	1c17      	adds	r7, r2, #0
    844c:	1c35      	adds	r5, r6, #0
    844e:	4646      	mov	r6, r8
    8450:	076b      	lsls	r3, r5, #29
    8452:	d000      	beq.n	8456 <__aeabi_dadd+0x246>
    8454:	e707      	b.n	8266 <__aeabi_dadd+0x56>
    8456:	e795      	b.n	8384 <__aeabi_dadd+0x174>
    8458:	2800      	cmp	r0, #0
    845a:	d17a      	bne.n	8552 <__aeabi_dadd+0x342>
    845c:	1c62      	adds	r2, r4, #1
    845e:	0552      	lsls	r2, r2, #21
    8460:	0d52      	lsrs	r2, r2, #21
    8462:	2a01      	cmp	r2, #1
    8464:	dc00      	bgt.n	8468 <__aeabi_dadd+0x258>
    8466:	e0fb      	b.n	8660 <__aeabi_dadd+0x450>
    8468:	4662      	mov	r2, ip
    846a:	1aaa      	subs	r2, r5, r2
    846c:	4295      	cmp	r5, r2
    846e:	41b6      	sbcs	r6, r6
    8470:	4691      	mov	r9, r2
    8472:	1a78      	subs	r0, r7, r1
    8474:	4272      	negs	r2, r6
    8476:	1a86      	subs	r6, r0, r2
    8478:	0232      	lsls	r2, r6, #8
    847a:	d400      	bmi.n	847e <__aeabi_dadd+0x26e>
    847c:	e093      	b.n	85a6 <__aeabi_dadd+0x396>
    847e:	4662      	mov	r2, ip
    8480:	1b55      	subs	r5, r2, r5
    8482:	45ac      	cmp	ip, r5
    8484:	4180      	sbcs	r0, r0
    8486:	1bcf      	subs	r7, r1, r7
    8488:	4240      	negs	r0, r0
    848a:	1a3e      	subs	r6, r7, r0
    848c:	4698      	mov	r8, r3
    848e:	e748      	b.n	8322 <__aeabi_dadd+0x112>
    8490:	2200      	movs	r2, #0
    8492:	2500      	movs	r5, #0
    8494:	e708      	b.n	82a8 <__aeabi_dadd+0x98>
    8496:	1c28      	adds	r0, r5, #0
    8498:	f7ff fa2c 	bl	78f4 <__clzsi2>
    849c:	3020      	adds	r0, #32
    849e:	1c03      	adds	r3, r0, #0
    84a0:	3b08      	subs	r3, #8
    84a2:	2b1f      	cmp	r3, #31
    84a4:	dc00      	bgt.n	84a8 <__aeabi_dadd+0x298>
    84a6:	e747      	b.n	8338 <__aeabi_dadd+0x128>
    84a8:	3828      	subs	r0, #40	; 0x28
    84aa:	4085      	lsls	r5, r0
    84ac:	1c2e      	adds	r6, r5, #0
    84ae:	2500      	movs	r5, #0
    84b0:	429c      	cmp	r4, r3
    84b2:	dc00      	bgt.n	84b6 <__aeabi_dadd+0x2a6>
    84b4:	e74c      	b.n	8350 <__aeabi_dadd+0x140>
    84b6:	4a42      	ldr	r2, [pc, #264]	; (85c0 <__aeabi_dadd+0x3b0>)
    84b8:	1ae4      	subs	r4, r4, r3
    84ba:	4016      	ands	r6, r2
    84bc:	1c37      	adds	r7, r6, #0
    84be:	e6cf      	b.n	8260 <__aeabi_dadd+0x50>
    84c0:	4663      	mov	r3, ip
    84c2:	4319      	orrs	r1, r3
    84c4:	1e4b      	subs	r3, r1, #1
    84c6:	4199      	sbcs	r1, r3
    84c8:	2200      	movs	r2, #0
    84ca:	b2cb      	uxtb	r3, r1
    84cc:	e71d      	b.n	830a <__aeabi_dadd+0xfa>
    84ce:	2b00      	cmp	r3, #0
    84d0:	d000      	beq.n	84d4 <__aeabi_dadd+0x2c4>
    84d2:	e0f2      	b.n	86ba <__aeabi_dadd+0x4aa>
    84d4:	1c60      	adds	r0, r4, #1
    84d6:	0543      	lsls	r3, r0, #21
    84d8:	0d5b      	lsrs	r3, r3, #21
    84da:	2b01      	cmp	r3, #1
    84dc:	dc00      	bgt.n	84e0 <__aeabi_dadd+0x2d0>
    84de:	e0a4      	b.n	862a <__aeabi_dadd+0x41a>
    84e0:	4b36      	ldr	r3, [pc, #216]	; (85bc <__aeabi_dadd+0x3ac>)
    84e2:	4298      	cmp	r0, r3
    84e4:	d100      	bne.n	84e8 <__aeabi_dadd+0x2d8>
    84e6:	e121      	b.n	872c <__aeabi_dadd+0x51c>
    84e8:	4663      	mov	r3, ip
    84ea:	195c      	adds	r4, r3, r5
    84ec:	42ac      	cmp	r4, r5
    84ee:	419b      	sbcs	r3, r3
    84f0:	19cf      	adds	r7, r1, r7
    84f2:	425b      	negs	r3, r3
    84f4:	18fa      	adds	r2, r7, r3
    84f6:	0864      	lsrs	r4, r4, #1
    84f8:	07d5      	lsls	r5, r2, #31
    84fa:	4325      	orrs	r5, r4
    84fc:	0857      	lsrs	r7, r2, #1
    84fe:	1c04      	adds	r4, r0, #0
    8500:	e6ae      	b.n	8260 <__aeabi_dadd+0x50>
    8502:	4b2e      	ldr	r3, [pc, #184]	; (85bc <__aeabi_dadd+0x3ac>)
    8504:	429c      	cmp	r4, r3
    8506:	d000      	beq.n	850a <__aeabi_dadd+0x2fa>
    8508:	e6ea      	b.n	82e0 <__aeabi_dadd+0xd0>
    850a:	e6a9      	b.n	8260 <__aeabi_dadd+0x50>
    850c:	1c21      	adds	r1, r4, #0
    850e:	1c33      	adds	r3, r6, #0
    8510:	391f      	subs	r1, #31
    8512:	40cb      	lsrs	r3, r1
    8514:	1c19      	adds	r1, r3, #0
    8516:	2a20      	cmp	r2, #32
    8518:	d100      	bne.n	851c <__aeabi_dadd+0x30c>
    851a:	e082      	b.n	8622 <__aeabi_dadd+0x412>
    851c:	233f      	movs	r3, #63	; 0x3f
    851e:	1b1c      	subs	r4, r3, r4
    8520:	40a6      	lsls	r6, r4
    8522:	4335      	orrs	r5, r6
    8524:	1e6e      	subs	r6, r5, #1
    8526:	41b5      	sbcs	r5, r6
    8528:	2700      	movs	r7, #0
    852a:	430d      	orrs	r5, r1
    852c:	2400      	movs	r4, #0
    852e:	e78e      	b.n	844e <__aeabi_dadd+0x23e>
    8530:	1c03      	adds	r3, r0, #0
    8532:	1c0e      	adds	r6, r1, #0
    8534:	3b20      	subs	r3, #32
    8536:	40de      	lsrs	r6, r3
    8538:	2820      	cmp	r0, #32
    853a:	d074      	beq.n	8626 <__aeabi_dadd+0x416>
    853c:	2340      	movs	r3, #64	; 0x40
    853e:	1a1b      	subs	r3, r3, r0
    8540:	4099      	lsls	r1, r3
    8542:	1c0b      	adds	r3, r1, #0
    8544:	4662      	mov	r2, ip
    8546:	4313      	orrs	r3, r2
    8548:	1e59      	subs	r1, r3, #1
    854a:	418b      	sbcs	r3, r1
    854c:	2200      	movs	r2, #0
    854e:	4333      	orrs	r3, r6
    8550:	e6db      	b.n	830a <__aeabi_dadd+0xfa>
    8552:	2c00      	cmp	r4, #0
    8554:	d050      	beq.n	85f8 <__aeabi_dadd+0x3e8>
    8556:	4c19      	ldr	r4, [pc, #100]	; (85bc <__aeabi_dadd+0x3ac>)
    8558:	42a2      	cmp	r2, r4
    855a:	d100      	bne.n	855e <__aeabi_dadd+0x34e>
    855c:	e0a8      	b.n	86b0 <__aeabi_dadd+0x4a0>
    855e:	2480      	movs	r4, #128	; 0x80
    8560:	0424      	lsls	r4, r4, #16
    8562:	4240      	negs	r0, r0
    8564:	4327      	orrs	r7, r4
    8566:	2838      	cmp	r0, #56	; 0x38
    8568:	dd00      	ble.n	856c <__aeabi_dadd+0x35c>
    856a:	e0d9      	b.n	8720 <__aeabi_dadd+0x510>
    856c:	281f      	cmp	r0, #31
    856e:	dd00      	ble.n	8572 <__aeabi_dadd+0x362>
    8570:	e139      	b.n	87e6 <__aeabi_dadd+0x5d6>
    8572:	2420      	movs	r4, #32
    8574:	1c3e      	adds	r6, r7, #0
    8576:	1a24      	subs	r4, r4, r0
    8578:	40a6      	lsls	r6, r4
    857a:	46b0      	mov	r8, r6
    857c:	1c2e      	adds	r6, r5, #0
    857e:	46a1      	mov	r9, r4
    8580:	40c6      	lsrs	r6, r0
    8582:	4644      	mov	r4, r8
    8584:	4326      	orrs	r6, r4
    8586:	464c      	mov	r4, r9
    8588:	40a5      	lsls	r5, r4
    858a:	1e6c      	subs	r4, r5, #1
    858c:	41a5      	sbcs	r5, r4
    858e:	40c7      	lsrs	r7, r0
    8590:	4335      	orrs	r5, r6
    8592:	4660      	mov	r0, ip
    8594:	1b45      	subs	r5, r0, r5
    8596:	1bcf      	subs	r7, r1, r7
    8598:	45ac      	cmp	ip, r5
    859a:	4189      	sbcs	r1, r1
    859c:	4249      	negs	r1, r1
    859e:	1a7f      	subs	r7, r7, r1
    85a0:	1c14      	adds	r4, r2, #0
    85a2:	4698      	mov	r8, r3
    85a4:	e6b8      	b.n	8318 <__aeabi_dadd+0x108>
    85a6:	464b      	mov	r3, r9
    85a8:	464d      	mov	r5, r9
    85aa:	4333      	orrs	r3, r6
    85ac:	d000      	beq.n	85b0 <__aeabi_dadd+0x3a0>
    85ae:	e6b8      	b.n	8322 <__aeabi_dadd+0x112>
    85b0:	2600      	movs	r6, #0
    85b2:	2700      	movs	r7, #0
    85b4:	2400      	movs	r4, #0
    85b6:	2500      	movs	r5, #0
    85b8:	e6e4      	b.n	8384 <__aeabi_dadd+0x174>
    85ba:	46c0      	nop			; (mov r8, r8)
    85bc:	000007ff 	.word	0x000007ff
    85c0:	ff7fffff 	.word	0xff7fffff
    85c4:	800fffff 	.word	0x800fffff
    85c8:	2b1f      	cmp	r3, #31
    85ca:	dc5b      	bgt.n	8684 <__aeabi_dadd+0x474>
    85cc:	2220      	movs	r2, #32
    85ce:	1c08      	adds	r0, r1, #0
    85d0:	1ad2      	subs	r2, r2, r3
    85d2:	4090      	lsls	r0, r2
    85d4:	4681      	mov	r9, r0
    85d6:	4660      	mov	r0, ip
    85d8:	4692      	mov	sl, r2
    85da:	40d8      	lsrs	r0, r3
    85dc:	464a      	mov	r2, r9
    85de:	4310      	orrs	r0, r2
    85e0:	4681      	mov	r9, r0
    85e2:	4652      	mov	r2, sl
    85e4:	4660      	mov	r0, ip
    85e6:	4090      	lsls	r0, r2
    85e8:	1c02      	adds	r2, r0, #0
    85ea:	1e50      	subs	r0, r2, #1
    85ec:	4182      	sbcs	r2, r0
    85ee:	4648      	mov	r0, r9
    85f0:	4310      	orrs	r0, r2
    85f2:	1c0a      	adds	r2, r1, #0
    85f4:	40da      	lsrs	r2, r3
    85f6:	e6e7      	b.n	83c8 <__aeabi_dadd+0x1b8>
    85f8:	1c3c      	adds	r4, r7, #0
    85fa:	432c      	orrs	r4, r5
    85fc:	d058      	beq.n	86b0 <__aeabi_dadd+0x4a0>
    85fe:	43c0      	mvns	r0, r0
    8600:	2800      	cmp	r0, #0
    8602:	d151      	bne.n	86a8 <__aeabi_dadd+0x498>
    8604:	4660      	mov	r0, ip
    8606:	1b45      	subs	r5, r0, r5
    8608:	45ac      	cmp	ip, r5
    860a:	4180      	sbcs	r0, r0
    860c:	1bcf      	subs	r7, r1, r7
    860e:	4240      	negs	r0, r0
    8610:	1a3f      	subs	r7, r7, r0
    8612:	1c14      	adds	r4, r2, #0
    8614:	4698      	mov	r8, r3
    8616:	e67f      	b.n	8318 <__aeabi_dadd+0x108>
    8618:	4a8f      	ldr	r2, [pc, #572]	; (8858 <__aeabi_dadd+0x648>)
    861a:	4294      	cmp	r4, r2
    861c:	d000      	beq.n	8620 <__aeabi_dadd+0x410>
    861e:	e6ca      	b.n	83b6 <__aeabi_dadd+0x1a6>
    8620:	e61e      	b.n	8260 <__aeabi_dadd+0x50>
    8622:	2600      	movs	r6, #0
    8624:	e77d      	b.n	8522 <__aeabi_dadd+0x312>
    8626:	2300      	movs	r3, #0
    8628:	e78c      	b.n	8544 <__aeabi_dadd+0x334>
    862a:	1c3b      	adds	r3, r7, #0
    862c:	432b      	orrs	r3, r5
    862e:	2c00      	cmp	r4, #0
    8630:	d000      	beq.n	8634 <__aeabi_dadd+0x424>
    8632:	e0bd      	b.n	87b0 <__aeabi_dadd+0x5a0>
    8634:	2b00      	cmp	r3, #0
    8636:	d100      	bne.n	863a <__aeabi_dadd+0x42a>
    8638:	e0f5      	b.n	8826 <__aeabi_dadd+0x616>
    863a:	4663      	mov	r3, ip
    863c:	430b      	orrs	r3, r1
    863e:	d100      	bne.n	8642 <__aeabi_dadd+0x432>
    8640:	e60e      	b.n	8260 <__aeabi_dadd+0x50>
    8642:	4663      	mov	r3, ip
    8644:	195b      	adds	r3, r3, r5
    8646:	42ab      	cmp	r3, r5
    8648:	4180      	sbcs	r0, r0
    864a:	19ca      	adds	r2, r1, r7
    864c:	4240      	negs	r0, r0
    864e:	1817      	adds	r7, r2, r0
    8650:	023a      	lsls	r2, r7, #8
    8652:	d400      	bmi.n	8656 <__aeabi_dadd+0x446>
    8654:	e0fc      	b.n	8850 <__aeabi_dadd+0x640>
    8656:	4a81      	ldr	r2, [pc, #516]	; (885c <__aeabi_dadd+0x64c>)
    8658:	1c1d      	adds	r5, r3, #0
    865a:	4017      	ands	r7, r2
    865c:	3401      	adds	r4, #1
    865e:	e5ff      	b.n	8260 <__aeabi_dadd+0x50>
    8660:	1c3a      	adds	r2, r7, #0
    8662:	432a      	orrs	r2, r5
    8664:	2c00      	cmp	r4, #0
    8666:	d151      	bne.n	870c <__aeabi_dadd+0x4fc>
    8668:	2a00      	cmp	r2, #0
    866a:	d000      	beq.n	866e <__aeabi_dadd+0x45e>
    866c:	e085      	b.n	877a <__aeabi_dadd+0x56a>
    866e:	4662      	mov	r2, ip
    8670:	430a      	orrs	r2, r1
    8672:	d003      	beq.n	867c <__aeabi_dadd+0x46c>
    8674:	1c0f      	adds	r7, r1, #0
    8676:	4665      	mov	r5, ip
    8678:	4698      	mov	r8, r3
    867a:	e5f1      	b.n	8260 <__aeabi_dadd+0x50>
    867c:	2600      	movs	r6, #0
    867e:	2700      	movs	r7, #0
    8680:	2500      	movs	r5, #0
    8682:	e67f      	b.n	8384 <__aeabi_dadd+0x174>
    8684:	1c18      	adds	r0, r3, #0
    8686:	1c0a      	adds	r2, r1, #0
    8688:	3820      	subs	r0, #32
    868a:	40c2      	lsrs	r2, r0
    868c:	2b20      	cmp	r3, #32
    868e:	d100      	bne.n	8692 <__aeabi_dadd+0x482>
    8690:	e0a7      	b.n	87e2 <__aeabi_dadd+0x5d2>
    8692:	2040      	movs	r0, #64	; 0x40
    8694:	1ac0      	subs	r0, r0, r3
    8696:	4081      	lsls	r1, r0
    8698:	1c08      	adds	r0, r1, #0
    869a:	4663      	mov	r3, ip
    869c:	4318      	orrs	r0, r3
    869e:	1e41      	subs	r1, r0, #1
    86a0:	4188      	sbcs	r0, r1
    86a2:	4310      	orrs	r0, r2
    86a4:	2200      	movs	r2, #0
    86a6:	e68f      	b.n	83c8 <__aeabi_dadd+0x1b8>
    86a8:	4c6b      	ldr	r4, [pc, #428]	; (8858 <__aeabi_dadd+0x648>)
    86aa:	42a2      	cmp	r2, r4
    86ac:	d000      	beq.n	86b0 <__aeabi_dadd+0x4a0>
    86ae:	e75a      	b.n	8566 <__aeabi_dadd+0x356>
    86b0:	1c0f      	adds	r7, r1, #0
    86b2:	4665      	mov	r5, ip
    86b4:	1c14      	adds	r4, r2, #0
    86b6:	4698      	mov	r8, r3
    86b8:	e5d2      	b.n	8260 <__aeabi_dadd+0x50>
    86ba:	2c00      	cmp	r4, #0
    86bc:	d13a      	bne.n	8734 <__aeabi_dadd+0x524>
    86be:	1c38      	adds	r0, r7, #0
    86c0:	4328      	orrs	r0, r5
    86c2:	d071      	beq.n	87a8 <__aeabi_dadd+0x598>
    86c4:	43db      	mvns	r3, r3
    86c6:	2b00      	cmp	r3, #0
    86c8:	d018      	beq.n	86fc <__aeabi_dadd+0x4ec>
    86ca:	4863      	ldr	r0, [pc, #396]	; (8858 <__aeabi_dadd+0x648>)
    86cc:	4282      	cmp	r2, r0
    86ce:	d06b      	beq.n	87a8 <__aeabi_dadd+0x598>
    86d0:	2b38      	cmp	r3, #56	; 0x38
    86d2:	dd00      	ble.n	86d6 <__aeabi_dadd+0x4c6>
    86d4:	e09d      	b.n	8812 <__aeabi_dadd+0x602>
    86d6:	2b1f      	cmp	r3, #31
    86d8:	dd00      	ble.n	86dc <__aeabi_dadd+0x4cc>
    86da:	e0a7      	b.n	882c <__aeabi_dadd+0x61c>
    86dc:	2020      	movs	r0, #32
    86de:	1c3c      	adds	r4, r7, #0
    86e0:	1ac0      	subs	r0, r0, r3
    86e2:	4084      	lsls	r4, r0
    86e4:	46a1      	mov	r9, r4
    86e6:	1c2c      	adds	r4, r5, #0
    86e8:	4682      	mov	sl, r0
    86ea:	40dc      	lsrs	r4, r3
    86ec:	4648      	mov	r0, r9
    86ee:	4304      	orrs	r4, r0
    86f0:	4650      	mov	r0, sl
    86f2:	4085      	lsls	r5, r0
    86f4:	1e68      	subs	r0, r5, #1
    86f6:	4185      	sbcs	r5, r0
    86f8:	40df      	lsrs	r7, r3
    86fa:	4325      	orrs	r5, r4
    86fc:	4465      	add	r5, ip
    86fe:	4565      	cmp	r5, ip
    8700:	419b      	sbcs	r3, r3
    8702:	187f      	adds	r7, r7, r1
    8704:	425b      	negs	r3, r3
    8706:	18ff      	adds	r7, r7, r3
    8708:	1c14      	adds	r4, r2, #0
    870a:	e664      	b.n	83d6 <__aeabi_dadd+0x1c6>
    870c:	2a00      	cmp	r2, #0
    870e:	d119      	bne.n	8744 <__aeabi_dadd+0x534>
    8710:	4662      	mov	r2, ip
    8712:	430a      	orrs	r2, r1
    8714:	d077      	beq.n	8806 <__aeabi_dadd+0x5f6>
    8716:	1c0f      	adds	r7, r1, #0
    8718:	4665      	mov	r5, ip
    871a:	4698      	mov	r8, r3
    871c:	4c4e      	ldr	r4, [pc, #312]	; (8858 <__aeabi_dadd+0x648>)
    871e:	e59f      	b.n	8260 <__aeabi_dadd+0x50>
    8720:	433d      	orrs	r5, r7
    8722:	1e6f      	subs	r7, r5, #1
    8724:	41bd      	sbcs	r5, r7
    8726:	2700      	movs	r7, #0
    8728:	b2ed      	uxtb	r5, r5
    872a:	e732      	b.n	8592 <__aeabi_dadd+0x382>
    872c:	1c04      	adds	r4, r0, #0
    872e:	2700      	movs	r7, #0
    8730:	2500      	movs	r5, #0
    8732:	e627      	b.n	8384 <__aeabi_dadd+0x174>
    8734:	4848      	ldr	r0, [pc, #288]	; (8858 <__aeabi_dadd+0x648>)
    8736:	4282      	cmp	r2, r0
    8738:	d036      	beq.n	87a8 <__aeabi_dadd+0x598>
    873a:	2080      	movs	r0, #128	; 0x80
    873c:	0400      	lsls	r0, r0, #16
    873e:	425b      	negs	r3, r3
    8740:	4307      	orrs	r7, r0
    8742:	e7c5      	b.n	86d0 <__aeabi_dadd+0x4c0>
    8744:	4662      	mov	r2, ip
    8746:	430a      	orrs	r2, r1
    8748:	d049      	beq.n	87de <__aeabi_dadd+0x5ce>
    874a:	2480      	movs	r4, #128	; 0x80
    874c:	08ed      	lsrs	r5, r5, #3
    874e:	0778      	lsls	r0, r7, #29
    8750:	08fa      	lsrs	r2, r7, #3
    8752:	0324      	lsls	r4, r4, #12
    8754:	4328      	orrs	r0, r5
    8756:	4222      	tst	r2, r4
    8758:	d009      	beq.n	876e <__aeabi_dadd+0x55e>
    875a:	08ce      	lsrs	r6, r1, #3
    875c:	4226      	tst	r6, r4
    875e:	d106      	bne.n	876e <__aeabi_dadd+0x55e>
    8760:	4662      	mov	r2, ip
    8762:	074f      	lsls	r7, r1, #29
    8764:	1c38      	adds	r0, r7, #0
    8766:	08d2      	lsrs	r2, r2, #3
    8768:	4310      	orrs	r0, r2
    876a:	4698      	mov	r8, r3
    876c:	1c32      	adds	r2, r6, #0
    876e:	00d2      	lsls	r2, r2, #3
    8770:	0f47      	lsrs	r7, r0, #29
    8772:	4317      	orrs	r7, r2
    8774:	00c5      	lsls	r5, r0, #3
    8776:	4c38      	ldr	r4, [pc, #224]	; (8858 <__aeabi_dadd+0x648>)
    8778:	e572      	b.n	8260 <__aeabi_dadd+0x50>
    877a:	4662      	mov	r2, ip
    877c:	430a      	orrs	r2, r1
    877e:	d100      	bne.n	8782 <__aeabi_dadd+0x572>
    8780:	e56e      	b.n	8260 <__aeabi_dadd+0x50>
    8782:	4662      	mov	r2, ip
    8784:	1aae      	subs	r6, r5, r2
    8786:	42b5      	cmp	r5, r6
    8788:	4192      	sbcs	r2, r2
    878a:	1a78      	subs	r0, r7, r1
    878c:	4252      	negs	r2, r2
    878e:	1a82      	subs	r2, r0, r2
    8790:	0210      	lsls	r0, r2, #8
    8792:	d400      	bmi.n	8796 <__aeabi_dadd+0x586>
    8794:	e655      	b.n	8442 <__aeabi_dadd+0x232>
    8796:	4662      	mov	r2, ip
    8798:	1b55      	subs	r5, r2, r5
    879a:	45ac      	cmp	ip, r5
    879c:	4180      	sbcs	r0, r0
    879e:	1bca      	subs	r2, r1, r7
    87a0:	4240      	negs	r0, r0
    87a2:	1a17      	subs	r7, r2, r0
    87a4:	4698      	mov	r8, r3
    87a6:	e55b      	b.n	8260 <__aeabi_dadd+0x50>
    87a8:	1c0f      	adds	r7, r1, #0
    87aa:	4665      	mov	r5, ip
    87ac:	1c14      	adds	r4, r2, #0
    87ae:	e557      	b.n	8260 <__aeabi_dadd+0x50>
    87b0:	2b00      	cmp	r3, #0
    87b2:	d034      	beq.n	881e <__aeabi_dadd+0x60e>
    87b4:	4663      	mov	r3, ip
    87b6:	430b      	orrs	r3, r1
    87b8:	d011      	beq.n	87de <__aeabi_dadd+0x5ce>
    87ba:	2480      	movs	r4, #128	; 0x80
    87bc:	08ed      	lsrs	r5, r5, #3
    87be:	0778      	lsls	r0, r7, #29
    87c0:	08fa      	lsrs	r2, r7, #3
    87c2:	0324      	lsls	r4, r4, #12
    87c4:	4328      	orrs	r0, r5
    87c6:	4222      	tst	r2, r4
    87c8:	d0d1      	beq.n	876e <__aeabi_dadd+0x55e>
    87ca:	08cb      	lsrs	r3, r1, #3
    87cc:	4223      	tst	r3, r4
    87ce:	d1ce      	bne.n	876e <__aeabi_dadd+0x55e>
    87d0:	4662      	mov	r2, ip
    87d2:	074f      	lsls	r7, r1, #29
    87d4:	1c38      	adds	r0, r7, #0
    87d6:	08d2      	lsrs	r2, r2, #3
    87d8:	4310      	orrs	r0, r2
    87da:	1c1a      	adds	r2, r3, #0
    87dc:	e7c7      	b.n	876e <__aeabi_dadd+0x55e>
    87de:	4c1e      	ldr	r4, [pc, #120]	; (8858 <__aeabi_dadd+0x648>)
    87e0:	e53e      	b.n	8260 <__aeabi_dadd+0x50>
    87e2:	2000      	movs	r0, #0
    87e4:	e759      	b.n	869a <__aeabi_dadd+0x48a>
    87e6:	1c04      	adds	r4, r0, #0
    87e8:	1c3e      	adds	r6, r7, #0
    87ea:	3c20      	subs	r4, #32
    87ec:	40e6      	lsrs	r6, r4
    87ee:	1c34      	adds	r4, r6, #0
    87f0:	2820      	cmp	r0, #32
    87f2:	d02b      	beq.n	884c <__aeabi_dadd+0x63c>
    87f4:	2640      	movs	r6, #64	; 0x40
    87f6:	1a30      	subs	r0, r6, r0
    87f8:	4087      	lsls	r7, r0
    87fa:	433d      	orrs	r5, r7
    87fc:	1e6f      	subs	r7, r5, #1
    87fe:	41bd      	sbcs	r5, r7
    8800:	2700      	movs	r7, #0
    8802:	4325      	orrs	r5, r4
    8804:	e6c5      	b.n	8592 <__aeabi_dadd+0x382>
    8806:	2780      	movs	r7, #128	; 0x80
    8808:	2600      	movs	r6, #0
    880a:	03ff      	lsls	r7, r7, #15
    880c:	4c12      	ldr	r4, [pc, #72]	; (8858 <__aeabi_dadd+0x648>)
    880e:	2500      	movs	r5, #0
    8810:	e5b8      	b.n	8384 <__aeabi_dadd+0x174>
    8812:	433d      	orrs	r5, r7
    8814:	1e6f      	subs	r7, r5, #1
    8816:	41bd      	sbcs	r5, r7
    8818:	2700      	movs	r7, #0
    881a:	b2ed      	uxtb	r5, r5
    881c:	e76e      	b.n	86fc <__aeabi_dadd+0x4ec>
    881e:	1c0f      	adds	r7, r1, #0
    8820:	4665      	mov	r5, ip
    8822:	4c0d      	ldr	r4, [pc, #52]	; (8858 <__aeabi_dadd+0x648>)
    8824:	e51c      	b.n	8260 <__aeabi_dadd+0x50>
    8826:	1c0f      	adds	r7, r1, #0
    8828:	4665      	mov	r5, ip
    882a:	e519      	b.n	8260 <__aeabi_dadd+0x50>
    882c:	1c1c      	adds	r4, r3, #0
    882e:	1c38      	adds	r0, r7, #0
    8830:	3c20      	subs	r4, #32
    8832:	40e0      	lsrs	r0, r4
    8834:	1c04      	adds	r4, r0, #0
    8836:	2b20      	cmp	r3, #32
    8838:	d00c      	beq.n	8854 <__aeabi_dadd+0x644>
    883a:	2040      	movs	r0, #64	; 0x40
    883c:	1ac3      	subs	r3, r0, r3
    883e:	409f      	lsls	r7, r3
    8840:	433d      	orrs	r5, r7
    8842:	1e6f      	subs	r7, r5, #1
    8844:	41bd      	sbcs	r5, r7
    8846:	2700      	movs	r7, #0
    8848:	4325      	orrs	r5, r4
    884a:	e757      	b.n	86fc <__aeabi_dadd+0x4ec>
    884c:	2700      	movs	r7, #0
    884e:	e7d4      	b.n	87fa <__aeabi_dadd+0x5ea>
    8850:	1c1d      	adds	r5, r3, #0
    8852:	e5fc      	b.n	844e <__aeabi_dadd+0x23e>
    8854:	2700      	movs	r7, #0
    8856:	e7f3      	b.n	8840 <__aeabi_dadd+0x630>
    8858:	000007ff 	.word	0x000007ff
    885c:	ff7fffff 	.word	0xff7fffff

00008860 <__aeabi_ddiv>:
    8860:	b5f0      	push	{r4, r5, r6, r7, lr}
    8862:	465f      	mov	r7, fp
    8864:	4656      	mov	r6, sl
    8866:	464d      	mov	r5, r9
    8868:	4644      	mov	r4, r8
    886a:	b4f0      	push	{r4, r5, r6, r7}
    886c:	030f      	lsls	r7, r1, #12
    886e:	b087      	sub	sp, #28
    8870:	4698      	mov	r8, r3
    8872:	004d      	lsls	r5, r1, #1
    8874:	0b3b      	lsrs	r3, r7, #12
    8876:	0fcc      	lsrs	r4, r1, #31
    8878:	1c06      	adds	r6, r0, #0
    887a:	4692      	mov	sl, r2
    887c:	4681      	mov	r9, r0
    887e:	469b      	mov	fp, r3
    8880:	0d6d      	lsrs	r5, r5, #21
    8882:	9401      	str	r4, [sp, #4]
    8884:	d06b      	beq.n	895e <__aeabi_ddiv+0xfe>
    8886:	4b66      	ldr	r3, [pc, #408]	; (8a20 <__aeabi_ddiv+0x1c0>)
    8888:	429d      	cmp	r5, r3
    888a:	d035      	beq.n	88f8 <__aeabi_ddiv+0x98>
    888c:	2780      	movs	r7, #128	; 0x80
    888e:	465b      	mov	r3, fp
    8890:	037f      	lsls	r7, r7, #13
    8892:	431f      	orrs	r7, r3
    8894:	00f3      	lsls	r3, r6, #3
    8896:	4699      	mov	r9, r3
    8898:	4b62      	ldr	r3, [pc, #392]	; (8a24 <__aeabi_ddiv+0x1c4>)
    889a:	00ff      	lsls	r7, r7, #3
    889c:	0f40      	lsrs	r0, r0, #29
    889e:	469c      	mov	ip, r3
    88a0:	4307      	orrs	r7, r0
    88a2:	2300      	movs	r3, #0
    88a4:	46bb      	mov	fp, r7
    88a6:	2600      	movs	r6, #0
    88a8:	4465      	add	r5, ip
    88aa:	9300      	str	r3, [sp, #0]
    88ac:	4642      	mov	r2, r8
    88ae:	0317      	lsls	r7, r2, #12
    88b0:	0050      	lsls	r0, r2, #1
    88b2:	0fd2      	lsrs	r2, r2, #31
    88b4:	4653      	mov	r3, sl
    88b6:	0b3f      	lsrs	r7, r7, #12
    88b8:	0d40      	lsrs	r0, r0, #21
    88ba:	4690      	mov	r8, r2
    88bc:	d100      	bne.n	88c0 <__aeabi_ddiv+0x60>
    88be:	e072      	b.n	89a6 <__aeabi_ddiv+0x146>
    88c0:	4a57      	ldr	r2, [pc, #348]	; (8a20 <__aeabi_ddiv+0x1c0>)
    88c2:	4290      	cmp	r0, r2
    88c4:	d067      	beq.n	8996 <__aeabi_ddiv+0x136>
    88c6:	2380      	movs	r3, #128	; 0x80
    88c8:	035b      	lsls	r3, r3, #13
    88ca:	431f      	orrs	r7, r3
    88cc:	4653      	mov	r3, sl
    88ce:	4a55      	ldr	r2, [pc, #340]	; (8a24 <__aeabi_ddiv+0x1c4>)
    88d0:	0f5b      	lsrs	r3, r3, #29
    88d2:	00ff      	lsls	r7, r7, #3
    88d4:	431f      	orrs	r7, r3
    88d6:	4694      	mov	ip, r2
    88d8:	4653      	mov	r3, sl
    88da:	2100      	movs	r1, #0
    88dc:	00db      	lsls	r3, r3, #3
    88de:	4460      	add	r0, ip
    88e0:	4642      	mov	r2, r8
    88e2:	4062      	eors	r2, r4
    88e4:	4692      	mov	sl, r2
    88e6:	1a2d      	subs	r5, r5, r0
    88e8:	430e      	orrs	r6, r1
    88ea:	2e0f      	cmp	r6, #15
    88ec:	d900      	bls.n	88f0 <__aeabi_ddiv+0x90>
    88ee:	e0a1      	b.n	8a34 <__aeabi_ddiv+0x1d4>
    88f0:	484d      	ldr	r0, [pc, #308]	; (8a28 <__aeabi_ddiv+0x1c8>)
    88f2:	00b6      	lsls	r6, r6, #2
    88f4:	5980      	ldr	r0, [r0, r6]
    88f6:	4687      	mov	pc, r0
    88f8:	465b      	mov	r3, fp
    88fa:	431e      	orrs	r6, r3
    88fc:	d000      	beq.n	8900 <__aeabi_ddiv+0xa0>
    88fe:	e076      	b.n	89ee <__aeabi_ddiv+0x18e>
    8900:	2300      	movs	r3, #0
    8902:	469b      	mov	fp, r3
    8904:	4699      	mov	r9, r3
    8906:	3302      	adds	r3, #2
    8908:	2608      	movs	r6, #8
    890a:	9300      	str	r3, [sp, #0]
    890c:	e7ce      	b.n	88ac <__aeabi_ddiv+0x4c>
    890e:	4699      	mov	r9, r3
    8910:	4643      	mov	r3, r8
    8912:	46bb      	mov	fp, r7
    8914:	9301      	str	r3, [sp, #4]
    8916:	9100      	str	r1, [sp, #0]
    8918:	9b00      	ldr	r3, [sp, #0]
    891a:	2b02      	cmp	r3, #2
    891c:	d16b      	bne.n	89f6 <__aeabi_ddiv+0x196>
    891e:	9b01      	ldr	r3, [sp, #4]
    8920:	469a      	mov	sl, r3
    8922:	2100      	movs	r1, #0
    8924:	4653      	mov	r3, sl
    8926:	2201      	movs	r2, #1
    8928:	2700      	movs	r7, #0
    892a:	4689      	mov	r9, r1
    892c:	401a      	ands	r2, r3
    892e:	4b3c      	ldr	r3, [pc, #240]	; (8a20 <__aeabi_ddiv+0x1c0>)
    8930:	2100      	movs	r1, #0
    8932:	033f      	lsls	r7, r7, #12
    8934:	0d0c      	lsrs	r4, r1, #20
    8936:	0524      	lsls	r4, r4, #20
    8938:	0b3f      	lsrs	r7, r7, #12
    893a:	4327      	orrs	r7, r4
    893c:	4c3b      	ldr	r4, [pc, #236]	; (8a2c <__aeabi_ddiv+0x1cc>)
    893e:	051b      	lsls	r3, r3, #20
    8940:	4027      	ands	r7, r4
    8942:	431f      	orrs	r7, r3
    8944:	007f      	lsls	r7, r7, #1
    8946:	07d2      	lsls	r2, r2, #31
    8948:	087f      	lsrs	r7, r7, #1
    894a:	4317      	orrs	r7, r2
    894c:	4648      	mov	r0, r9
    894e:	1c39      	adds	r1, r7, #0
    8950:	b007      	add	sp, #28
    8952:	bc3c      	pop	{r2, r3, r4, r5}
    8954:	4690      	mov	r8, r2
    8956:	4699      	mov	r9, r3
    8958:	46a2      	mov	sl, r4
    895a:	46ab      	mov	fp, r5
    895c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    895e:	4303      	orrs	r3, r0
    8960:	d03e      	beq.n	89e0 <__aeabi_ddiv+0x180>
    8962:	465b      	mov	r3, fp
    8964:	2b00      	cmp	r3, #0
    8966:	d100      	bne.n	896a <__aeabi_ddiv+0x10a>
    8968:	e19c      	b.n	8ca4 <__aeabi_ddiv+0x444>
    896a:	4658      	mov	r0, fp
    896c:	f7fe ffc2 	bl	78f4 <__clzsi2>
    8970:	2328      	movs	r3, #40	; 0x28
    8972:	1c31      	adds	r1, r6, #0
    8974:	1a1b      	subs	r3, r3, r0
    8976:	1c02      	adds	r2, r0, #0
    8978:	465f      	mov	r7, fp
    897a:	40d9      	lsrs	r1, r3
    897c:	3a08      	subs	r2, #8
    897e:	4097      	lsls	r7, r2
    8980:	1c0b      	adds	r3, r1, #0
    8982:	4096      	lsls	r6, r2
    8984:	433b      	orrs	r3, r7
    8986:	469b      	mov	fp, r3
    8988:	46b1      	mov	r9, r6
    898a:	2300      	movs	r3, #0
    898c:	4d28      	ldr	r5, [pc, #160]	; (8a30 <__aeabi_ddiv+0x1d0>)
    898e:	2600      	movs	r6, #0
    8990:	1a2d      	subs	r5, r5, r0
    8992:	9300      	str	r3, [sp, #0]
    8994:	e78a      	b.n	88ac <__aeabi_ddiv+0x4c>
    8996:	4652      	mov	r2, sl
    8998:	2103      	movs	r1, #3
    899a:	433a      	orrs	r2, r7
    899c:	d1a0      	bne.n	88e0 <__aeabi_ddiv+0x80>
    899e:	2700      	movs	r7, #0
    89a0:	2300      	movs	r3, #0
    89a2:	2102      	movs	r1, #2
    89a4:	e79c      	b.n	88e0 <__aeabi_ddiv+0x80>
    89a6:	4652      	mov	r2, sl
    89a8:	433a      	orrs	r2, r7
    89aa:	d015      	beq.n	89d8 <__aeabi_ddiv+0x178>
    89ac:	2f00      	cmp	r7, #0
    89ae:	d100      	bne.n	89b2 <__aeabi_ddiv+0x152>
    89b0:	e185      	b.n	8cbe <__aeabi_ddiv+0x45e>
    89b2:	1c38      	adds	r0, r7, #0
    89b4:	f7fe ff9e 	bl	78f4 <__clzsi2>
    89b8:	1c02      	adds	r2, r0, #0
    89ba:	2128      	movs	r1, #40	; 0x28
    89bc:	4650      	mov	r0, sl
    89be:	1a89      	subs	r1, r1, r2
    89c0:	1c13      	adds	r3, r2, #0
    89c2:	40c8      	lsrs	r0, r1
    89c4:	4651      	mov	r1, sl
    89c6:	3b08      	subs	r3, #8
    89c8:	4099      	lsls	r1, r3
    89ca:	409f      	lsls	r7, r3
    89cc:	1c0b      	adds	r3, r1, #0
    89ce:	4307      	orrs	r7, r0
    89d0:	4817      	ldr	r0, [pc, #92]	; (8a30 <__aeabi_ddiv+0x1d0>)
    89d2:	2100      	movs	r1, #0
    89d4:	1a80      	subs	r0, r0, r2
    89d6:	e783      	b.n	88e0 <__aeabi_ddiv+0x80>
    89d8:	2700      	movs	r7, #0
    89da:	2300      	movs	r3, #0
    89dc:	2101      	movs	r1, #1
    89de:	e77f      	b.n	88e0 <__aeabi_ddiv+0x80>
    89e0:	2300      	movs	r3, #0
    89e2:	469b      	mov	fp, r3
    89e4:	4699      	mov	r9, r3
    89e6:	3301      	adds	r3, #1
    89e8:	2604      	movs	r6, #4
    89ea:	9300      	str	r3, [sp, #0]
    89ec:	e75e      	b.n	88ac <__aeabi_ddiv+0x4c>
    89ee:	2303      	movs	r3, #3
    89f0:	260c      	movs	r6, #12
    89f2:	9300      	str	r3, [sp, #0]
    89f4:	e75a      	b.n	88ac <__aeabi_ddiv+0x4c>
    89f6:	2b03      	cmp	r3, #3
    89f8:	d100      	bne.n	89fc <__aeabi_ddiv+0x19c>
    89fa:	e23c      	b.n	8e76 <__aeabi_ddiv+0x616>
    89fc:	2b01      	cmp	r3, #1
    89fe:	d000      	beq.n	8a02 <__aeabi_ddiv+0x1a2>
    8a00:	e1bf      	b.n	8d82 <__aeabi_ddiv+0x522>
    8a02:	1c1a      	adds	r2, r3, #0
    8a04:	9b01      	ldr	r3, [sp, #4]
    8a06:	401a      	ands	r2, r3
    8a08:	2100      	movs	r1, #0
    8a0a:	2300      	movs	r3, #0
    8a0c:	2700      	movs	r7, #0
    8a0e:	4689      	mov	r9, r1
    8a10:	e78e      	b.n	8930 <__aeabi_ddiv+0xd0>
    8a12:	2300      	movs	r3, #0
    8a14:	2780      	movs	r7, #128	; 0x80
    8a16:	4699      	mov	r9, r3
    8a18:	2200      	movs	r2, #0
    8a1a:	033f      	lsls	r7, r7, #12
    8a1c:	4b00      	ldr	r3, [pc, #0]	; (8a20 <__aeabi_ddiv+0x1c0>)
    8a1e:	e787      	b.n	8930 <__aeabi_ddiv+0xd0>
    8a20:	000007ff 	.word	0x000007ff
    8a24:	fffffc01 	.word	0xfffffc01
    8a28:	0000ab18 	.word	0x0000ab18
    8a2c:	800fffff 	.word	0x800fffff
    8a30:	fffffc0d 	.word	0xfffffc0d
    8a34:	45bb      	cmp	fp, r7
    8a36:	d900      	bls.n	8a3a <__aeabi_ddiv+0x1da>
    8a38:	e151      	b.n	8cde <__aeabi_ddiv+0x47e>
    8a3a:	d100      	bne.n	8a3e <__aeabi_ddiv+0x1de>
    8a3c:	e14c      	b.n	8cd8 <__aeabi_ddiv+0x478>
    8a3e:	464a      	mov	r2, r9
    8a40:	9203      	str	r2, [sp, #12]
    8a42:	2200      	movs	r2, #0
    8a44:	465c      	mov	r4, fp
    8a46:	4690      	mov	r8, r2
    8a48:	3d01      	subs	r5, #1
    8a4a:	0e18      	lsrs	r0, r3, #24
    8a4c:	023f      	lsls	r7, r7, #8
    8a4e:	4338      	orrs	r0, r7
    8a50:	021b      	lsls	r3, r3, #8
    8a52:	9301      	str	r3, [sp, #4]
    8a54:	0c03      	lsrs	r3, r0, #16
    8a56:	4699      	mov	r9, r3
    8a58:	0403      	lsls	r3, r0, #16
    8a5a:	0c1b      	lsrs	r3, r3, #16
    8a5c:	4649      	mov	r1, r9
    8a5e:	1c06      	adds	r6, r0, #0
    8a60:	1c20      	adds	r0, r4, #0
    8a62:	1c1f      	adds	r7, r3, #0
    8a64:	9300      	str	r3, [sp, #0]
    8a66:	f7fe fe75 	bl	7754 <__aeabi_uidiv>
    8a6a:	1c02      	adds	r2, r0, #0
    8a6c:	437a      	muls	r2, r7
    8a6e:	9002      	str	r0, [sp, #8]
    8a70:	4649      	mov	r1, r9
    8a72:	1c20      	adds	r0, r4, #0
    8a74:	1c17      	adds	r7, r2, #0
    8a76:	f7fe fef3 	bl	7860 <__aeabi_uidivmod>
    8a7a:	9b03      	ldr	r3, [sp, #12]
    8a7c:	0409      	lsls	r1, r1, #16
    8a7e:	0c1b      	lsrs	r3, r3, #16
    8a80:	4319      	orrs	r1, r3
    8a82:	428f      	cmp	r7, r1
    8a84:	d90c      	bls.n	8aa0 <__aeabi_ddiv+0x240>
    8a86:	9b02      	ldr	r3, [sp, #8]
    8a88:	1989      	adds	r1, r1, r6
    8a8a:	3b01      	subs	r3, #1
    8a8c:	428e      	cmp	r6, r1
    8a8e:	d900      	bls.n	8a92 <__aeabi_ddiv+0x232>
    8a90:	e152      	b.n	8d38 <__aeabi_ddiv+0x4d8>
    8a92:	428f      	cmp	r7, r1
    8a94:	d800      	bhi.n	8a98 <__aeabi_ddiv+0x238>
    8a96:	e14f      	b.n	8d38 <__aeabi_ddiv+0x4d8>
    8a98:	9b02      	ldr	r3, [sp, #8]
    8a9a:	1989      	adds	r1, r1, r6
    8a9c:	3b02      	subs	r3, #2
    8a9e:	9302      	str	r3, [sp, #8]
    8aa0:	1bcc      	subs	r4, r1, r7
    8aa2:	1c20      	adds	r0, r4, #0
    8aa4:	4649      	mov	r1, r9
    8aa6:	f7fe fe55 	bl	7754 <__aeabi_uidiv>
    8aaa:	9f00      	ldr	r7, [sp, #0]
    8aac:	4683      	mov	fp, r0
    8aae:	4347      	muls	r7, r0
    8ab0:	4649      	mov	r1, r9
    8ab2:	1c20      	adds	r0, r4, #0
    8ab4:	f7fe fed4 	bl	7860 <__aeabi_uidivmod>
    8ab8:	9a03      	ldr	r2, [sp, #12]
    8aba:	040b      	lsls	r3, r1, #16
    8abc:	0414      	lsls	r4, r2, #16
    8abe:	0c24      	lsrs	r4, r4, #16
    8ac0:	4323      	orrs	r3, r4
    8ac2:	429f      	cmp	r7, r3
    8ac4:	d90d      	bls.n	8ae2 <__aeabi_ddiv+0x282>
    8ac6:	465a      	mov	r2, fp
    8ac8:	199b      	adds	r3, r3, r6
    8aca:	3a01      	subs	r2, #1
    8acc:	429e      	cmp	r6, r3
    8ace:	d900      	bls.n	8ad2 <__aeabi_ddiv+0x272>
    8ad0:	e130      	b.n	8d34 <__aeabi_ddiv+0x4d4>
    8ad2:	429f      	cmp	r7, r3
    8ad4:	d800      	bhi.n	8ad8 <__aeabi_ddiv+0x278>
    8ad6:	e12d      	b.n	8d34 <__aeabi_ddiv+0x4d4>
    8ad8:	2202      	movs	r2, #2
    8ada:	4252      	negs	r2, r2
    8adc:	4694      	mov	ip, r2
    8ade:	199b      	adds	r3, r3, r6
    8ae0:	44e3      	add	fp, ip
    8ae2:	9a02      	ldr	r2, [sp, #8]
    8ae4:	1bdb      	subs	r3, r3, r7
    8ae6:	0417      	lsls	r7, r2, #16
    8ae8:	465a      	mov	r2, fp
    8aea:	433a      	orrs	r2, r7
    8aec:	4693      	mov	fp, r2
    8aee:	9c01      	ldr	r4, [sp, #4]
    8af0:	0c17      	lsrs	r7, r2, #16
    8af2:	0c22      	lsrs	r2, r4, #16
    8af4:	1c10      	adds	r0, r2, #0
    8af6:	9204      	str	r2, [sp, #16]
    8af8:	465a      	mov	r2, fp
    8afa:	0411      	lsls	r1, r2, #16
    8afc:	0422      	lsls	r2, r4, #16
    8afe:	0c12      	lsrs	r2, r2, #16
    8b00:	1c14      	adds	r4, r2, #0
    8b02:	0c09      	lsrs	r1, r1, #16
    8b04:	437c      	muls	r4, r7
    8b06:	9205      	str	r2, [sp, #20]
    8b08:	434a      	muls	r2, r1
    8b0a:	4341      	muls	r1, r0
    8b0c:	4347      	muls	r7, r0
    8b0e:	1861      	adds	r1, r4, r1
    8b10:	0c10      	lsrs	r0, r2, #16
    8b12:	1809      	adds	r1, r1, r0
    8b14:	428c      	cmp	r4, r1
    8b16:	d903      	bls.n	8b20 <__aeabi_ddiv+0x2c0>
    8b18:	2080      	movs	r0, #128	; 0x80
    8b1a:	0240      	lsls	r0, r0, #9
    8b1c:	4684      	mov	ip, r0
    8b1e:	4467      	add	r7, ip
    8b20:	0c0c      	lsrs	r4, r1, #16
    8b22:	0412      	lsls	r2, r2, #16
    8b24:	0408      	lsls	r0, r1, #16
    8b26:	0c12      	lsrs	r2, r2, #16
    8b28:	193c      	adds	r4, r7, r4
    8b2a:	1881      	adds	r1, r0, r2
    8b2c:	42a3      	cmp	r3, r4
    8b2e:	d200      	bcs.n	8b32 <__aeabi_ddiv+0x2d2>
    8b30:	e0e5      	b.n	8cfe <__aeabi_ddiv+0x49e>
    8b32:	d100      	bne.n	8b36 <__aeabi_ddiv+0x2d6>
    8b34:	e0df      	b.n	8cf6 <__aeabi_ddiv+0x496>
    8b36:	1b1f      	subs	r7, r3, r4
    8b38:	4643      	mov	r3, r8
    8b3a:	1a5c      	subs	r4, r3, r1
    8b3c:	45a0      	cmp	r8, r4
    8b3e:	4192      	sbcs	r2, r2
    8b40:	4252      	negs	r2, r2
    8b42:	1abf      	subs	r7, r7, r2
    8b44:	42b7      	cmp	r7, r6
    8b46:	d100      	bne.n	8b4a <__aeabi_ddiv+0x2ea>
    8b48:	e10e      	b.n	8d68 <__aeabi_ddiv+0x508>
    8b4a:	1c38      	adds	r0, r7, #0
    8b4c:	4649      	mov	r1, r9
    8b4e:	f7fe fe01 	bl	7754 <__aeabi_uidiv>
    8b52:	9b00      	ldr	r3, [sp, #0]
    8b54:	9002      	str	r0, [sp, #8]
    8b56:	4343      	muls	r3, r0
    8b58:	4649      	mov	r1, r9
    8b5a:	1c38      	adds	r0, r7, #0
    8b5c:	4698      	mov	r8, r3
    8b5e:	f7fe fe7f 	bl	7860 <__aeabi_uidivmod>
    8b62:	0c23      	lsrs	r3, r4, #16
    8b64:	040f      	lsls	r7, r1, #16
    8b66:	431f      	orrs	r7, r3
    8b68:	45b8      	cmp	r8, r7
    8b6a:	d90c      	bls.n	8b86 <__aeabi_ddiv+0x326>
    8b6c:	9b02      	ldr	r3, [sp, #8]
    8b6e:	19bf      	adds	r7, r7, r6
    8b70:	3b01      	subs	r3, #1
    8b72:	42be      	cmp	r6, r7
    8b74:	d900      	bls.n	8b78 <__aeabi_ddiv+0x318>
    8b76:	e0fb      	b.n	8d70 <__aeabi_ddiv+0x510>
    8b78:	45b8      	cmp	r8, r7
    8b7a:	d800      	bhi.n	8b7e <__aeabi_ddiv+0x31e>
    8b7c:	e0f8      	b.n	8d70 <__aeabi_ddiv+0x510>
    8b7e:	9b02      	ldr	r3, [sp, #8]
    8b80:	19bf      	adds	r7, r7, r6
    8b82:	3b02      	subs	r3, #2
    8b84:	9302      	str	r3, [sp, #8]
    8b86:	4643      	mov	r3, r8
    8b88:	1aff      	subs	r7, r7, r3
    8b8a:	4649      	mov	r1, r9
    8b8c:	1c38      	adds	r0, r7, #0
    8b8e:	f7fe fde1 	bl	7754 <__aeabi_uidiv>
    8b92:	9b00      	ldr	r3, [sp, #0]
    8b94:	9003      	str	r0, [sp, #12]
    8b96:	4343      	muls	r3, r0
    8b98:	4649      	mov	r1, r9
    8b9a:	1c38      	adds	r0, r7, #0
    8b9c:	4698      	mov	r8, r3
    8b9e:	f7fe fe5f 	bl	7860 <__aeabi_uidivmod>
    8ba2:	0424      	lsls	r4, r4, #16
    8ba4:	0409      	lsls	r1, r1, #16
    8ba6:	0c24      	lsrs	r4, r4, #16
    8ba8:	4321      	orrs	r1, r4
    8baa:	4588      	cmp	r8, r1
    8bac:	d90c      	bls.n	8bc8 <__aeabi_ddiv+0x368>
    8bae:	9b03      	ldr	r3, [sp, #12]
    8bb0:	1989      	adds	r1, r1, r6
    8bb2:	3b01      	subs	r3, #1
    8bb4:	428e      	cmp	r6, r1
    8bb6:	d900      	bls.n	8bba <__aeabi_ddiv+0x35a>
    8bb8:	e0dc      	b.n	8d74 <__aeabi_ddiv+0x514>
    8bba:	4588      	cmp	r8, r1
    8bbc:	d800      	bhi.n	8bc0 <__aeabi_ddiv+0x360>
    8bbe:	e0d9      	b.n	8d74 <__aeabi_ddiv+0x514>
    8bc0:	9b03      	ldr	r3, [sp, #12]
    8bc2:	1989      	adds	r1, r1, r6
    8bc4:	3b02      	subs	r3, #2
    8bc6:	9303      	str	r3, [sp, #12]
    8bc8:	4643      	mov	r3, r8
    8bca:	1ac9      	subs	r1, r1, r3
    8bcc:	9b02      	ldr	r3, [sp, #8]
    8bce:	9a03      	ldr	r2, [sp, #12]
    8bd0:	041b      	lsls	r3, r3, #16
    8bd2:	9c05      	ldr	r4, [sp, #20]
    8bd4:	431a      	orrs	r2, r3
    8bd6:	0c10      	lsrs	r0, r2, #16
    8bd8:	0413      	lsls	r3, r2, #16
    8bda:	4691      	mov	r9, r2
    8bdc:	1c22      	adds	r2, r4, #0
    8bde:	9f04      	ldr	r7, [sp, #16]
    8be0:	0c1b      	lsrs	r3, r3, #16
    8be2:	435a      	muls	r2, r3
    8be4:	4344      	muls	r4, r0
    8be6:	437b      	muls	r3, r7
    8be8:	4378      	muls	r0, r7
    8bea:	18e3      	adds	r3, r4, r3
    8bec:	0c17      	lsrs	r7, r2, #16
    8bee:	19db      	adds	r3, r3, r7
    8bf0:	429c      	cmp	r4, r3
    8bf2:	d903      	bls.n	8bfc <__aeabi_ddiv+0x39c>
    8bf4:	2480      	movs	r4, #128	; 0x80
    8bf6:	0264      	lsls	r4, r4, #9
    8bf8:	46a4      	mov	ip, r4
    8bfa:	4460      	add	r0, ip
    8bfc:	0c1c      	lsrs	r4, r3, #16
    8bfe:	0412      	lsls	r2, r2, #16
    8c00:	041b      	lsls	r3, r3, #16
    8c02:	0c12      	lsrs	r2, r2, #16
    8c04:	1900      	adds	r0, r0, r4
    8c06:	189b      	adds	r3, r3, r2
    8c08:	4281      	cmp	r1, r0
    8c0a:	d200      	bcs.n	8c0e <__aeabi_ddiv+0x3ae>
    8c0c:	e096      	b.n	8d3c <__aeabi_ddiv+0x4dc>
    8c0e:	d100      	bne.n	8c12 <__aeabi_ddiv+0x3b2>
    8c10:	e0fc      	b.n	8e0c <__aeabi_ddiv+0x5ac>
    8c12:	464a      	mov	r2, r9
    8c14:	2301      	movs	r3, #1
    8c16:	431a      	orrs	r2, r3
    8c18:	4691      	mov	r9, r2
    8c1a:	4b9b      	ldr	r3, [pc, #620]	; (8e88 <__aeabi_ddiv+0x628>)
    8c1c:	18eb      	adds	r3, r5, r3
    8c1e:	2b00      	cmp	r3, #0
    8c20:	dc00      	bgt.n	8c24 <__aeabi_ddiv+0x3c4>
    8c22:	e099      	b.n	8d58 <__aeabi_ddiv+0x4f8>
    8c24:	464a      	mov	r2, r9
    8c26:	0752      	lsls	r2, r2, #29
    8c28:	d00a      	beq.n	8c40 <__aeabi_ddiv+0x3e0>
    8c2a:	220f      	movs	r2, #15
    8c2c:	4649      	mov	r1, r9
    8c2e:	400a      	ands	r2, r1
    8c30:	2a04      	cmp	r2, #4
    8c32:	d005      	beq.n	8c40 <__aeabi_ddiv+0x3e0>
    8c34:	3104      	adds	r1, #4
    8c36:	4549      	cmp	r1, r9
    8c38:	4192      	sbcs	r2, r2
    8c3a:	4689      	mov	r9, r1
    8c3c:	4252      	negs	r2, r2
    8c3e:	4493      	add	fp, r2
    8c40:	465a      	mov	r2, fp
    8c42:	01d2      	lsls	r2, r2, #7
    8c44:	d506      	bpl.n	8c54 <__aeabi_ddiv+0x3f4>
    8c46:	465a      	mov	r2, fp
    8c48:	4b90      	ldr	r3, [pc, #576]	; (8e8c <__aeabi_ddiv+0x62c>)
    8c4a:	401a      	ands	r2, r3
    8c4c:	2380      	movs	r3, #128	; 0x80
    8c4e:	4693      	mov	fp, r2
    8c50:	00db      	lsls	r3, r3, #3
    8c52:	18eb      	adds	r3, r5, r3
    8c54:	4a8e      	ldr	r2, [pc, #568]	; (8e90 <__aeabi_ddiv+0x630>)
    8c56:	4293      	cmp	r3, r2
    8c58:	dd00      	ble.n	8c5c <__aeabi_ddiv+0x3fc>
    8c5a:	e662      	b.n	8922 <__aeabi_ddiv+0xc2>
    8c5c:	464a      	mov	r2, r9
    8c5e:	4659      	mov	r1, fp
    8c60:	08d2      	lsrs	r2, r2, #3
    8c62:	0749      	lsls	r1, r1, #29
    8c64:	4311      	orrs	r1, r2
    8c66:	465a      	mov	r2, fp
    8c68:	4689      	mov	r9, r1
    8c6a:	0257      	lsls	r7, r2, #9
    8c6c:	4651      	mov	r1, sl
    8c6e:	2201      	movs	r2, #1
    8c70:	055b      	lsls	r3, r3, #21
    8c72:	0b3f      	lsrs	r7, r7, #12
    8c74:	0d5b      	lsrs	r3, r3, #21
    8c76:	400a      	ands	r2, r1
    8c78:	e65a      	b.n	8930 <__aeabi_ddiv+0xd0>
    8c7a:	2080      	movs	r0, #128	; 0x80
    8c7c:	465a      	mov	r2, fp
    8c7e:	0300      	lsls	r0, r0, #12
    8c80:	4202      	tst	r2, r0
    8c82:	d008      	beq.n	8c96 <__aeabi_ddiv+0x436>
    8c84:	4207      	tst	r7, r0
    8c86:	d106      	bne.n	8c96 <__aeabi_ddiv+0x436>
    8c88:	4307      	orrs	r7, r0
    8c8a:	033f      	lsls	r7, r7, #12
    8c8c:	4699      	mov	r9, r3
    8c8e:	0b3f      	lsrs	r7, r7, #12
    8c90:	4642      	mov	r2, r8
    8c92:	4b80      	ldr	r3, [pc, #512]	; (8e94 <__aeabi_ddiv+0x634>)
    8c94:	e64c      	b.n	8930 <__aeabi_ddiv+0xd0>
    8c96:	465f      	mov	r7, fp
    8c98:	4307      	orrs	r7, r0
    8c9a:	033f      	lsls	r7, r7, #12
    8c9c:	0b3f      	lsrs	r7, r7, #12
    8c9e:	1c22      	adds	r2, r4, #0
    8ca0:	4b7c      	ldr	r3, [pc, #496]	; (8e94 <__aeabi_ddiv+0x634>)
    8ca2:	e645      	b.n	8930 <__aeabi_ddiv+0xd0>
    8ca4:	f7fe fe26 	bl	78f4 <__clzsi2>
    8ca8:	1c03      	adds	r3, r0, #0
    8caa:	3020      	adds	r0, #32
    8cac:	2827      	cmp	r0, #39	; 0x27
    8cae:	dc00      	bgt.n	8cb2 <__aeabi_ddiv+0x452>
    8cb0:	e65e      	b.n	8970 <__aeabi_ddiv+0x110>
    8cb2:	3b08      	subs	r3, #8
    8cb4:	409e      	lsls	r6, r3
    8cb6:	2300      	movs	r3, #0
    8cb8:	46b3      	mov	fp, r6
    8cba:	4699      	mov	r9, r3
    8cbc:	e665      	b.n	898a <__aeabi_ddiv+0x12a>
    8cbe:	4650      	mov	r0, sl
    8cc0:	f7fe fe18 	bl	78f4 <__clzsi2>
    8cc4:	1c02      	adds	r2, r0, #0
    8cc6:	3220      	adds	r2, #32
    8cc8:	2a27      	cmp	r2, #39	; 0x27
    8cca:	dc00      	bgt.n	8cce <__aeabi_ddiv+0x46e>
    8ccc:	e675      	b.n	89ba <__aeabi_ddiv+0x15a>
    8cce:	4657      	mov	r7, sl
    8cd0:	3808      	subs	r0, #8
    8cd2:	4087      	lsls	r7, r0
    8cd4:	2300      	movs	r3, #0
    8cd6:	e67b      	b.n	89d0 <__aeabi_ddiv+0x170>
    8cd8:	4599      	cmp	r9, r3
    8cda:	d200      	bcs.n	8cde <__aeabi_ddiv+0x47e>
    8cdc:	e6af      	b.n	8a3e <__aeabi_ddiv+0x1de>
    8cde:	465a      	mov	r2, fp
    8ce0:	4659      	mov	r1, fp
    8ce2:	0854      	lsrs	r4, r2, #1
    8ce4:	464a      	mov	r2, r9
    8ce6:	07c8      	lsls	r0, r1, #31
    8ce8:	0852      	lsrs	r2, r2, #1
    8cea:	4302      	orrs	r2, r0
    8cec:	9203      	str	r2, [sp, #12]
    8cee:	464a      	mov	r2, r9
    8cf0:	07d2      	lsls	r2, r2, #31
    8cf2:	4690      	mov	r8, r2
    8cf4:	e6a9      	b.n	8a4a <__aeabi_ddiv+0x1ea>
    8cf6:	2700      	movs	r7, #0
    8cf8:	4588      	cmp	r8, r1
    8cfa:	d300      	bcc.n	8cfe <__aeabi_ddiv+0x49e>
    8cfc:	e71c      	b.n	8b38 <__aeabi_ddiv+0x2d8>
    8cfe:	9f01      	ldr	r7, [sp, #4]
    8d00:	465a      	mov	r2, fp
    8d02:	46bc      	mov	ip, r7
    8d04:	44e0      	add	r8, ip
    8d06:	45b8      	cmp	r8, r7
    8d08:	41bf      	sbcs	r7, r7
    8d0a:	427f      	negs	r7, r7
    8d0c:	19bf      	adds	r7, r7, r6
    8d0e:	18ff      	adds	r7, r7, r3
    8d10:	3a01      	subs	r2, #1
    8d12:	42be      	cmp	r6, r7
    8d14:	d206      	bcs.n	8d24 <__aeabi_ddiv+0x4c4>
    8d16:	42bc      	cmp	r4, r7
    8d18:	d85f      	bhi.n	8dda <__aeabi_ddiv+0x57a>
    8d1a:	d100      	bne.n	8d1e <__aeabi_ddiv+0x4be>
    8d1c:	e09f      	b.n	8e5e <__aeabi_ddiv+0x5fe>
    8d1e:	1b3f      	subs	r7, r7, r4
    8d20:	4693      	mov	fp, r2
    8d22:	e709      	b.n	8b38 <__aeabi_ddiv+0x2d8>
    8d24:	42b7      	cmp	r7, r6
    8d26:	d1fa      	bne.n	8d1e <__aeabi_ddiv+0x4be>
    8d28:	9b01      	ldr	r3, [sp, #4]
    8d2a:	4543      	cmp	r3, r8
    8d2c:	d9f3      	bls.n	8d16 <__aeabi_ddiv+0x4b6>
    8d2e:	1b37      	subs	r7, r6, r4
    8d30:	4693      	mov	fp, r2
    8d32:	e701      	b.n	8b38 <__aeabi_ddiv+0x2d8>
    8d34:	4693      	mov	fp, r2
    8d36:	e6d4      	b.n	8ae2 <__aeabi_ddiv+0x282>
    8d38:	9302      	str	r3, [sp, #8]
    8d3a:	e6b1      	b.n	8aa0 <__aeabi_ddiv+0x240>
    8d3c:	464a      	mov	r2, r9
    8d3e:	1989      	adds	r1, r1, r6
    8d40:	3a01      	subs	r2, #1
    8d42:	428e      	cmp	r6, r1
    8d44:	d918      	bls.n	8d78 <__aeabi_ddiv+0x518>
    8d46:	4691      	mov	r9, r2
    8d48:	4281      	cmp	r1, r0
    8d4a:	d000      	beq.n	8d4e <__aeabi_ddiv+0x4ee>
    8d4c:	e761      	b.n	8c12 <__aeabi_ddiv+0x3b2>
    8d4e:	9a01      	ldr	r2, [sp, #4]
    8d50:	429a      	cmp	r2, r3
    8d52:	d000      	beq.n	8d56 <__aeabi_ddiv+0x4f6>
    8d54:	e75d      	b.n	8c12 <__aeabi_ddiv+0x3b2>
    8d56:	e760      	b.n	8c1a <__aeabi_ddiv+0x3ba>
    8d58:	4f4f      	ldr	r7, [pc, #316]	; (8e98 <__aeabi_ddiv+0x638>)
    8d5a:	1b7f      	subs	r7, r7, r5
    8d5c:	2f38      	cmp	r7, #56	; 0x38
    8d5e:	dd13      	ble.n	8d88 <__aeabi_ddiv+0x528>
    8d60:	2201      	movs	r2, #1
    8d62:	4653      	mov	r3, sl
    8d64:	401a      	ands	r2, r3
    8d66:	e64f      	b.n	8a08 <__aeabi_ddiv+0x1a8>
    8d68:	2301      	movs	r3, #1
    8d6a:	425b      	negs	r3, r3
    8d6c:	4699      	mov	r9, r3
    8d6e:	e754      	b.n	8c1a <__aeabi_ddiv+0x3ba>
    8d70:	9302      	str	r3, [sp, #8]
    8d72:	e708      	b.n	8b86 <__aeabi_ddiv+0x326>
    8d74:	9303      	str	r3, [sp, #12]
    8d76:	e727      	b.n	8bc8 <__aeabi_ddiv+0x368>
    8d78:	4288      	cmp	r0, r1
    8d7a:	d83c      	bhi.n	8df6 <__aeabi_ddiv+0x596>
    8d7c:	d074      	beq.n	8e68 <__aeabi_ddiv+0x608>
    8d7e:	4691      	mov	r9, r2
    8d80:	e747      	b.n	8c12 <__aeabi_ddiv+0x3b2>
    8d82:	9b01      	ldr	r3, [sp, #4]
    8d84:	469a      	mov	sl, r3
    8d86:	e748      	b.n	8c1a <__aeabi_ddiv+0x3ba>
    8d88:	2f1f      	cmp	r7, #31
    8d8a:	dc44      	bgt.n	8e16 <__aeabi_ddiv+0x5b6>
    8d8c:	4b43      	ldr	r3, [pc, #268]	; (8e9c <__aeabi_ddiv+0x63c>)
    8d8e:	464a      	mov	r2, r9
    8d90:	469c      	mov	ip, r3
    8d92:	465b      	mov	r3, fp
    8d94:	4465      	add	r5, ip
    8d96:	40fa      	lsrs	r2, r7
    8d98:	40ab      	lsls	r3, r5
    8d9a:	4313      	orrs	r3, r2
    8d9c:	464a      	mov	r2, r9
    8d9e:	40aa      	lsls	r2, r5
    8da0:	1c15      	adds	r5, r2, #0
    8da2:	1e6a      	subs	r2, r5, #1
    8da4:	4195      	sbcs	r5, r2
    8da6:	465a      	mov	r2, fp
    8da8:	40fa      	lsrs	r2, r7
    8daa:	432b      	orrs	r3, r5
    8dac:	1c17      	adds	r7, r2, #0
    8dae:	075a      	lsls	r2, r3, #29
    8db0:	d009      	beq.n	8dc6 <__aeabi_ddiv+0x566>
    8db2:	220f      	movs	r2, #15
    8db4:	401a      	ands	r2, r3
    8db6:	2a04      	cmp	r2, #4
    8db8:	d005      	beq.n	8dc6 <__aeabi_ddiv+0x566>
    8dba:	1d1a      	adds	r2, r3, #4
    8dbc:	429a      	cmp	r2, r3
    8dbe:	419b      	sbcs	r3, r3
    8dc0:	425b      	negs	r3, r3
    8dc2:	18ff      	adds	r7, r7, r3
    8dc4:	1c13      	adds	r3, r2, #0
    8dc6:	023a      	lsls	r2, r7, #8
    8dc8:	d53e      	bpl.n	8e48 <__aeabi_ddiv+0x5e8>
    8dca:	4653      	mov	r3, sl
    8dcc:	2201      	movs	r2, #1
    8dce:	2100      	movs	r1, #0
    8dd0:	401a      	ands	r2, r3
    8dd2:	2700      	movs	r7, #0
    8dd4:	2301      	movs	r3, #1
    8dd6:	4689      	mov	r9, r1
    8dd8:	e5aa      	b.n	8930 <__aeabi_ddiv+0xd0>
    8dda:	2302      	movs	r3, #2
    8ddc:	425b      	negs	r3, r3
    8dde:	469c      	mov	ip, r3
    8de0:	9a01      	ldr	r2, [sp, #4]
    8de2:	44e3      	add	fp, ip
    8de4:	4694      	mov	ip, r2
    8de6:	44e0      	add	r8, ip
    8de8:	4590      	cmp	r8, r2
    8dea:	419b      	sbcs	r3, r3
    8dec:	425b      	negs	r3, r3
    8dee:	199b      	adds	r3, r3, r6
    8df0:	19df      	adds	r7, r3, r7
    8df2:	1b3f      	subs	r7, r7, r4
    8df4:	e6a0      	b.n	8b38 <__aeabi_ddiv+0x2d8>
    8df6:	9f01      	ldr	r7, [sp, #4]
    8df8:	464a      	mov	r2, r9
    8dfa:	007c      	lsls	r4, r7, #1
    8dfc:	42bc      	cmp	r4, r7
    8dfe:	41bf      	sbcs	r7, r7
    8e00:	427f      	negs	r7, r7
    8e02:	19bf      	adds	r7, r7, r6
    8e04:	3a02      	subs	r2, #2
    8e06:	19c9      	adds	r1, r1, r7
    8e08:	9401      	str	r4, [sp, #4]
    8e0a:	e79c      	b.n	8d46 <__aeabi_ddiv+0x4e6>
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d195      	bne.n	8d3c <__aeabi_ddiv+0x4dc>
    8e10:	2200      	movs	r2, #0
    8e12:	9201      	str	r2, [sp, #4]
    8e14:	e79b      	b.n	8d4e <__aeabi_ddiv+0x4ee>
    8e16:	465a      	mov	r2, fp
    8e18:	4b21      	ldr	r3, [pc, #132]	; (8ea0 <__aeabi_ddiv+0x640>)
    8e1a:	1b5b      	subs	r3, r3, r5
    8e1c:	40da      	lsrs	r2, r3
    8e1e:	2f20      	cmp	r7, #32
    8e20:	d027      	beq.n	8e72 <__aeabi_ddiv+0x612>
    8e22:	4b20      	ldr	r3, [pc, #128]	; (8ea4 <__aeabi_ddiv+0x644>)
    8e24:	469c      	mov	ip, r3
    8e26:	465b      	mov	r3, fp
    8e28:	4465      	add	r5, ip
    8e2a:	40ab      	lsls	r3, r5
    8e2c:	4649      	mov	r1, r9
    8e2e:	430b      	orrs	r3, r1
    8e30:	1e59      	subs	r1, r3, #1
    8e32:	418b      	sbcs	r3, r1
    8e34:	4313      	orrs	r3, r2
    8e36:	2207      	movs	r2, #7
    8e38:	2700      	movs	r7, #0
    8e3a:	401a      	ands	r2, r3
    8e3c:	d007      	beq.n	8e4e <__aeabi_ddiv+0x5ee>
    8e3e:	220f      	movs	r2, #15
    8e40:	2700      	movs	r7, #0
    8e42:	401a      	ands	r2, r3
    8e44:	2a04      	cmp	r2, #4
    8e46:	d1b8      	bne.n	8dba <__aeabi_ddiv+0x55a>
    8e48:	077a      	lsls	r2, r7, #29
    8e4a:	027f      	lsls	r7, r7, #9
    8e4c:	0b3f      	lsrs	r7, r7, #12
    8e4e:	08db      	lsrs	r3, r3, #3
    8e50:	4313      	orrs	r3, r2
    8e52:	4699      	mov	r9, r3
    8e54:	2201      	movs	r2, #1
    8e56:	4653      	mov	r3, sl
    8e58:	401a      	ands	r2, r3
    8e5a:	2300      	movs	r3, #0
    8e5c:	e568      	b.n	8930 <__aeabi_ddiv+0xd0>
    8e5e:	4541      	cmp	r1, r8
    8e60:	d8bb      	bhi.n	8dda <__aeabi_ddiv+0x57a>
    8e62:	4693      	mov	fp, r2
    8e64:	2700      	movs	r7, #0
    8e66:	e667      	b.n	8b38 <__aeabi_ddiv+0x2d8>
    8e68:	9c01      	ldr	r4, [sp, #4]
    8e6a:	429c      	cmp	r4, r3
    8e6c:	d3c3      	bcc.n	8df6 <__aeabi_ddiv+0x596>
    8e6e:	4691      	mov	r9, r2
    8e70:	e76d      	b.n	8d4e <__aeabi_ddiv+0x4ee>
    8e72:	2300      	movs	r3, #0
    8e74:	e7da      	b.n	8e2c <__aeabi_ddiv+0x5cc>
    8e76:	2780      	movs	r7, #128	; 0x80
    8e78:	465b      	mov	r3, fp
    8e7a:	033f      	lsls	r7, r7, #12
    8e7c:	431f      	orrs	r7, r3
    8e7e:	033f      	lsls	r7, r7, #12
    8e80:	0b3f      	lsrs	r7, r7, #12
    8e82:	9a01      	ldr	r2, [sp, #4]
    8e84:	4b03      	ldr	r3, [pc, #12]	; (8e94 <__aeabi_ddiv+0x634>)
    8e86:	e553      	b.n	8930 <__aeabi_ddiv+0xd0>
    8e88:	000003ff 	.word	0x000003ff
    8e8c:	feffffff 	.word	0xfeffffff
    8e90:	000007fe 	.word	0x000007fe
    8e94:	000007ff 	.word	0x000007ff
    8e98:	fffffc02 	.word	0xfffffc02
    8e9c:	0000041e 	.word	0x0000041e
    8ea0:	fffffbe2 	.word	0xfffffbe2
    8ea4:	0000043e 	.word	0x0000043e

00008ea8 <__eqdf2>:
    8ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eaa:	465f      	mov	r7, fp
    8eac:	464d      	mov	r5, r9
    8eae:	4644      	mov	r4, r8
    8eb0:	4656      	mov	r6, sl
    8eb2:	b4f0      	push	{r4, r5, r6, r7}
    8eb4:	031f      	lsls	r7, r3, #12
    8eb6:	005c      	lsls	r4, r3, #1
    8eb8:	0fdb      	lsrs	r3, r3, #31
    8eba:	4699      	mov	r9, r3
    8ebc:	4b1b      	ldr	r3, [pc, #108]	; (8f2c <__eqdf2+0x84>)
    8ebe:	030e      	lsls	r6, r1, #12
    8ec0:	004d      	lsls	r5, r1, #1
    8ec2:	0fc9      	lsrs	r1, r1, #31
    8ec4:	4684      	mov	ip, r0
    8ec6:	0b36      	lsrs	r6, r6, #12
    8ec8:	0d6d      	lsrs	r5, r5, #21
    8eca:	468b      	mov	fp, r1
    8ecc:	4690      	mov	r8, r2
    8ece:	0b3f      	lsrs	r7, r7, #12
    8ed0:	0d64      	lsrs	r4, r4, #21
    8ed2:	429d      	cmp	r5, r3
    8ed4:	d00c      	beq.n	8ef0 <__eqdf2+0x48>
    8ed6:	4b15      	ldr	r3, [pc, #84]	; (8f2c <__eqdf2+0x84>)
    8ed8:	429c      	cmp	r4, r3
    8eda:	d010      	beq.n	8efe <__eqdf2+0x56>
    8edc:	2301      	movs	r3, #1
    8ede:	42a5      	cmp	r5, r4
    8ee0:	d014      	beq.n	8f0c <__eqdf2+0x64>
    8ee2:	1c18      	adds	r0, r3, #0
    8ee4:	bc3c      	pop	{r2, r3, r4, r5}
    8ee6:	4690      	mov	r8, r2
    8ee8:	4699      	mov	r9, r3
    8eea:	46a2      	mov	sl, r4
    8eec:	46ab      	mov	fp, r5
    8eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ef0:	1c31      	adds	r1, r6, #0
    8ef2:	2301      	movs	r3, #1
    8ef4:	4301      	orrs	r1, r0
    8ef6:	d1f4      	bne.n	8ee2 <__eqdf2+0x3a>
    8ef8:	4b0c      	ldr	r3, [pc, #48]	; (8f2c <__eqdf2+0x84>)
    8efa:	429c      	cmp	r4, r3
    8efc:	d1ee      	bne.n	8edc <__eqdf2+0x34>
    8efe:	433a      	orrs	r2, r7
    8f00:	2301      	movs	r3, #1
    8f02:	2a00      	cmp	r2, #0
    8f04:	d1ed      	bne.n	8ee2 <__eqdf2+0x3a>
    8f06:	2301      	movs	r3, #1
    8f08:	42a5      	cmp	r5, r4
    8f0a:	d1ea      	bne.n	8ee2 <__eqdf2+0x3a>
    8f0c:	42be      	cmp	r6, r7
    8f0e:	d1e8      	bne.n	8ee2 <__eqdf2+0x3a>
    8f10:	45c4      	cmp	ip, r8
    8f12:	d1e6      	bne.n	8ee2 <__eqdf2+0x3a>
    8f14:	45cb      	cmp	fp, r9
    8f16:	d006      	beq.n	8f26 <__eqdf2+0x7e>
    8f18:	2d00      	cmp	r5, #0
    8f1a:	d1e2      	bne.n	8ee2 <__eqdf2+0x3a>
    8f1c:	4330      	orrs	r0, r6
    8f1e:	1c03      	adds	r3, r0, #0
    8f20:	1e58      	subs	r0, r3, #1
    8f22:	4183      	sbcs	r3, r0
    8f24:	e7dd      	b.n	8ee2 <__eqdf2+0x3a>
    8f26:	2300      	movs	r3, #0
    8f28:	e7db      	b.n	8ee2 <__eqdf2+0x3a>
    8f2a:	46c0      	nop			; (mov r8, r8)
    8f2c:	000007ff 	.word	0x000007ff

00008f30 <__gedf2>:
    8f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f32:	4657      	mov	r7, sl
    8f34:	4645      	mov	r5, r8
    8f36:	464e      	mov	r6, r9
    8f38:	b4e0      	push	{r5, r6, r7}
    8f3a:	030f      	lsls	r7, r1, #12
    8f3c:	004e      	lsls	r6, r1, #1
    8f3e:	0fc9      	lsrs	r1, r1, #31
    8f40:	468a      	mov	sl, r1
    8f42:	4932      	ldr	r1, [pc, #200]	; (900c <__gedf2+0xdc>)
    8f44:	031d      	lsls	r5, r3, #12
    8f46:	005c      	lsls	r4, r3, #1
    8f48:	4684      	mov	ip, r0
    8f4a:	0b3f      	lsrs	r7, r7, #12
    8f4c:	0d76      	lsrs	r6, r6, #21
    8f4e:	4690      	mov	r8, r2
    8f50:	0b2d      	lsrs	r5, r5, #12
    8f52:	0d64      	lsrs	r4, r4, #21
    8f54:	0fdb      	lsrs	r3, r3, #31
    8f56:	428e      	cmp	r6, r1
    8f58:	d00f      	beq.n	8f7a <__gedf2+0x4a>
    8f5a:	428c      	cmp	r4, r1
    8f5c:	d039      	beq.n	8fd2 <__gedf2+0xa2>
    8f5e:	2e00      	cmp	r6, #0
    8f60:	d110      	bne.n	8f84 <__gedf2+0x54>
    8f62:	4338      	orrs	r0, r7
    8f64:	4241      	negs	r1, r0
    8f66:	4141      	adcs	r1, r0
    8f68:	4689      	mov	r9, r1
    8f6a:	2c00      	cmp	r4, #0
    8f6c:	d127      	bne.n	8fbe <__gedf2+0x8e>
    8f6e:	432a      	orrs	r2, r5
    8f70:	d125      	bne.n	8fbe <__gedf2+0x8e>
    8f72:	2000      	movs	r0, #0
    8f74:	2900      	cmp	r1, #0
    8f76:	d10e      	bne.n	8f96 <__gedf2+0x66>
    8f78:	e008      	b.n	8f8c <__gedf2+0x5c>
    8f7a:	1c39      	adds	r1, r7, #0
    8f7c:	4301      	orrs	r1, r0
    8f7e:	d12e      	bne.n	8fde <__gedf2+0xae>
    8f80:	42b4      	cmp	r4, r6
    8f82:	d026      	beq.n	8fd2 <__gedf2+0xa2>
    8f84:	2c00      	cmp	r4, #0
    8f86:	d00b      	beq.n	8fa0 <__gedf2+0x70>
    8f88:	459a      	cmp	sl, r3
    8f8a:	d00d      	beq.n	8fa8 <__gedf2+0x78>
    8f8c:	4653      	mov	r3, sl
    8f8e:	4259      	negs	r1, r3
    8f90:	2301      	movs	r3, #1
    8f92:	4319      	orrs	r1, r3
    8f94:	1c08      	adds	r0, r1, #0
    8f96:	bc1c      	pop	{r2, r3, r4}
    8f98:	4690      	mov	r8, r2
    8f9a:	4699      	mov	r9, r3
    8f9c:	46a2      	mov	sl, r4
    8f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fa0:	432a      	orrs	r2, r5
    8fa2:	d0f3      	beq.n	8f8c <__gedf2+0x5c>
    8fa4:	459a      	cmp	sl, r3
    8fa6:	d1f1      	bne.n	8f8c <__gedf2+0x5c>
    8fa8:	42a6      	cmp	r6, r4
    8faa:	dcef      	bgt.n	8f8c <__gedf2+0x5c>
    8fac:	da1a      	bge.n	8fe4 <__gedf2+0xb4>
    8fae:	4650      	mov	r0, sl
    8fb0:	4241      	negs	r1, r0
    8fb2:	4148      	adcs	r0, r1
    8fb4:	2301      	movs	r3, #1
    8fb6:	4241      	negs	r1, r0
    8fb8:	4319      	orrs	r1, r3
    8fba:	1c08      	adds	r0, r1, #0
    8fbc:	e7eb      	b.n	8f96 <__gedf2+0x66>
    8fbe:	464a      	mov	r2, r9
    8fc0:	2a00      	cmp	r2, #0
    8fc2:	d0e1      	beq.n	8f88 <__gedf2+0x58>
    8fc4:	4258      	negs	r0, r3
    8fc6:	4158      	adcs	r0, r3
    8fc8:	2201      	movs	r2, #1
    8fca:	4241      	negs	r1, r0
    8fcc:	4311      	orrs	r1, r2
    8fce:	1c08      	adds	r0, r1, #0
    8fd0:	e7e1      	b.n	8f96 <__gedf2+0x66>
    8fd2:	1c29      	adds	r1, r5, #0
    8fd4:	4311      	orrs	r1, r2
    8fd6:	d102      	bne.n	8fde <__gedf2+0xae>
    8fd8:	2e00      	cmp	r6, #0
    8fda:	d0c2      	beq.n	8f62 <__gedf2+0x32>
    8fdc:	e7d4      	b.n	8f88 <__gedf2+0x58>
    8fde:	2002      	movs	r0, #2
    8fe0:	4240      	negs	r0, r0
    8fe2:	e7d8      	b.n	8f96 <__gedf2+0x66>
    8fe4:	42af      	cmp	r7, r5
    8fe6:	d8d1      	bhi.n	8f8c <__gedf2+0x5c>
    8fe8:	d009      	beq.n	8ffe <__gedf2+0xce>
    8fea:	2000      	movs	r0, #0
    8fec:	42af      	cmp	r7, r5
    8fee:	d2d2      	bcs.n	8f96 <__gedf2+0x66>
    8ff0:	4650      	mov	r0, sl
    8ff2:	4241      	negs	r1, r0
    8ff4:	4148      	adcs	r0, r1
    8ff6:	2301      	movs	r3, #1
    8ff8:	4240      	negs	r0, r0
    8ffa:	4318      	orrs	r0, r3
    8ffc:	e7cb      	b.n	8f96 <__gedf2+0x66>
    8ffe:	45c4      	cmp	ip, r8
    9000:	d8c4      	bhi.n	8f8c <__gedf2+0x5c>
    9002:	2000      	movs	r0, #0
    9004:	45c4      	cmp	ip, r8
    9006:	d3f3      	bcc.n	8ff0 <__gedf2+0xc0>
    9008:	e7c5      	b.n	8f96 <__gedf2+0x66>
    900a:	46c0      	nop			; (mov r8, r8)
    900c:	000007ff 	.word	0x000007ff

00009010 <__ledf2>:
    9010:	b5f0      	push	{r4, r5, r6, r7, lr}
    9012:	465f      	mov	r7, fp
    9014:	464d      	mov	r5, r9
    9016:	4644      	mov	r4, r8
    9018:	4656      	mov	r6, sl
    901a:	4680      	mov	r8, r0
    901c:	b4f0      	push	{r4, r5, r6, r7}
    901e:	1c06      	adds	r6, r0, #0
    9020:	0308      	lsls	r0, r1, #12
    9022:	0b00      	lsrs	r0, r0, #12
    9024:	4684      	mov	ip, r0
    9026:	482c      	ldr	r0, [pc, #176]	; (90d8 <__ledf2+0xc8>)
    9028:	004c      	lsls	r4, r1, #1
    902a:	031f      	lsls	r7, r3, #12
    902c:	005d      	lsls	r5, r3, #1
    902e:	0fc9      	lsrs	r1, r1, #31
    9030:	0d64      	lsrs	r4, r4, #21
    9032:	468b      	mov	fp, r1
    9034:	4691      	mov	r9, r2
    9036:	0b3f      	lsrs	r7, r7, #12
    9038:	0d6d      	lsrs	r5, r5, #21
    903a:	0fdb      	lsrs	r3, r3, #31
    903c:	4284      	cmp	r4, r0
    903e:	d012      	beq.n	9066 <__ledf2+0x56>
    9040:	4285      	cmp	r5, r0
    9042:	d025      	beq.n	9090 <__ledf2+0x80>
    9044:	2c00      	cmp	r4, #0
    9046:	d114      	bne.n	9072 <__ledf2+0x62>
    9048:	4661      	mov	r1, ip
    904a:	430e      	orrs	r6, r1
    904c:	4270      	negs	r0, r6
    904e:	4146      	adcs	r6, r0
    9050:	2d00      	cmp	r5, #0
    9052:	d035      	beq.n	90c0 <__ledf2+0xb0>
    9054:	2e00      	cmp	r6, #0
    9056:	d021      	beq.n	909c <__ledf2+0x8c>
    9058:	4258      	negs	r0, r3
    905a:	4158      	adcs	r0, r3
    905c:	2101      	movs	r1, #1
    905e:	4243      	negs	r3, r0
    9060:	430b      	orrs	r3, r1
    9062:	1c18      	adds	r0, r3, #0
    9064:	e00e      	b.n	9084 <__ledf2+0x74>
    9066:	4661      	mov	r1, ip
    9068:	2002      	movs	r0, #2
    906a:	4331      	orrs	r1, r6
    906c:	d10a      	bne.n	9084 <__ledf2+0x74>
    906e:	42a5      	cmp	r5, r4
    9070:	d00e      	beq.n	9090 <__ledf2+0x80>
    9072:	2d00      	cmp	r5, #0
    9074:	d112      	bne.n	909c <__ledf2+0x8c>
    9076:	433a      	orrs	r2, r7
    9078:	d110      	bne.n	909c <__ledf2+0x8c>
    907a:	465b      	mov	r3, fp
    907c:	4259      	negs	r1, r3
    907e:	2301      	movs	r3, #1
    9080:	4319      	orrs	r1, r3
    9082:	1c08      	adds	r0, r1, #0
    9084:	bc3c      	pop	{r2, r3, r4, r5}
    9086:	4690      	mov	r8, r2
    9088:	4699      	mov	r9, r3
    908a:	46a2      	mov	sl, r4
    908c:	46ab      	mov	fp, r5
    908e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9090:	1c39      	adds	r1, r7, #0
    9092:	2002      	movs	r0, #2
    9094:	4311      	orrs	r1, r2
    9096:	d1f5      	bne.n	9084 <__ledf2+0x74>
    9098:	2c00      	cmp	r4, #0
    909a:	d0d5      	beq.n	9048 <__ledf2+0x38>
    909c:	459b      	cmp	fp, r3
    909e:	d1ec      	bne.n	907a <__ledf2+0x6a>
    90a0:	42ac      	cmp	r4, r5
    90a2:	dcea      	bgt.n	907a <__ledf2+0x6a>
    90a4:	db05      	blt.n	90b2 <__ledf2+0xa2>
    90a6:	45bc      	cmp	ip, r7
    90a8:	d8e7      	bhi.n	907a <__ledf2+0x6a>
    90aa:	d00f      	beq.n	90cc <__ledf2+0xbc>
    90ac:	2000      	movs	r0, #0
    90ae:	45bc      	cmp	ip, r7
    90b0:	d2e8      	bcs.n	9084 <__ledf2+0x74>
    90b2:	4658      	mov	r0, fp
    90b4:	4241      	negs	r1, r0
    90b6:	4148      	adcs	r0, r1
    90b8:	4241      	negs	r1, r0
    90ba:	2001      	movs	r0, #1
    90bc:	4308      	orrs	r0, r1
    90be:	e7e1      	b.n	9084 <__ledf2+0x74>
    90c0:	433a      	orrs	r2, r7
    90c2:	d1c7      	bne.n	9054 <__ledf2+0x44>
    90c4:	2000      	movs	r0, #0
    90c6:	2e00      	cmp	r6, #0
    90c8:	d1dc      	bne.n	9084 <__ledf2+0x74>
    90ca:	e7d6      	b.n	907a <__ledf2+0x6a>
    90cc:	45c8      	cmp	r8, r9
    90ce:	d8d4      	bhi.n	907a <__ledf2+0x6a>
    90d0:	2000      	movs	r0, #0
    90d2:	45c8      	cmp	r8, r9
    90d4:	d3ed      	bcc.n	90b2 <__ledf2+0xa2>
    90d6:	e7d5      	b.n	9084 <__ledf2+0x74>
    90d8:	000007ff 	.word	0x000007ff

000090dc <__aeabi_dmul>:
    90dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90de:	465f      	mov	r7, fp
    90e0:	4656      	mov	r6, sl
    90e2:	464d      	mov	r5, r9
    90e4:	4644      	mov	r4, r8
    90e6:	b4f0      	push	{r4, r5, r6, r7}
    90e8:	1c05      	adds	r5, r0, #0
    90ea:	1c06      	adds	r6, r0, #0
    90ec:	0308      	lsls	r0, r1, #12
    90ee:	b087      	sub	sp, #28
    90f0:	4699      	mov	r9, r3
    90f2:	004f      	lsls	r7, r1, #1
    90f4:	0b03      	lsrs	r3, r0, #12
    90f6:	0fcc      	lsrs	r4, r1, #31
    90f8:	4692      	mov	sl, r2
    90fa:	469b      	mov	fp, r3
    90fc:	0d7f      	lsrs	r7, r7, #21
    90fe:	9401      	str	r4, [sp, #4]
    9100:	d067      	beq.n	91d2 <__aeabi_dmul+0xf6>
    9102:	4b6c      	ldr	r3, [pc, #432]	; (92b4 <__aeabi_dmul+0x1d8>)
    9104:	429f      	cmp	r7, r3
    9106:	d036      	beq.n	9176 <__aeabi_dmul+0x9a>
    9108:	2080      	movs	r0, #128	; 0x80
    910a:	465b      	mov	r3, fp
    910c:	0340      	lsls	r0, r0, #13
    910e:	4318      	orrs	r0, r3
    9110:	00c0      	lsls	r0, r0, #3
    9112:	0f6b      	lsrs	r3, r5, #29
    9114:	4318      	orrs	r0, r3
    9116:	4b68      	ldr	r3, [pc, #416]	; (92b8 <__aeabi_dmul+0x1dc>)
    9118:	4683      	mov	fp, r0
    911a:	469c      	mov	ip, r3
    911c:	2300      	movs	r3, #0
    911e:	4698      	mov	r8, r3
    9120:	00ee      	lsls	r6, r5, #3
    9122:	4467      	add	r7, ip
    9124:	9300      	str	r3, [sp, #0]
    9126:	464b      	mov	r3, r9
    9128:	4649      	mov	r1, r9
    912a:	031d      	lsls	r5, r3, #12
    912c:	0fc9      	lsrs	r1, r1, #31
    912e:	005b      	lsls	r3, r3, #1
    9130:	4652      	mov	r2, sl
    9132:	0b2d      	lsrs	r5, r5, #12
    9134:	0d5b      	lsrs	r3, r3, #21
    9136:	4689      	mov	r9, r1
    9138:	d100      	bne.n	913c <__aeabi_dmul+0x60>
    913a:	e06e      	b.n	921a <__aeabi_dmul+0x13e>
    913c:	495d      	ldr	r1, [pc, #372]	; (92b4 <__aeabi_dmul+0x1d8>)
    913e:	428b      	cmp	r3, r1
    9140:	d064      	beq.n	920c <__aeabi_dmul+0x130>
    9142:	2080      	movs	r0, #128	; 0x80
    9144:	495c      	ldr	r1, [pc, #368]	; (92b8 <__aeabi_dmul+0x1dc>)
    9146:	0340      	lsls	r0, r0, #13
    9148:	468c      	mov	ip, r1
    914a:	2100      	movs	r1, #0
    914c:	4305      	orrs	r5, r0
    914e:	00ed      	lsls	r5, r5, #3
    9150:	0f50      	lsrs	r0, r2, #29
    9152:	4305      	orrs	r5, r0
    9154:	00d2      	lsls	r2, r2, #3
    9156:	4463      	add	r3, ip
    9158:	4648      	mov	r0, r9
    915a:	18ff      	adds	r7, r7, r3
    915c:	1c7b      	adds	r3, r7, #1
    915e:	469a      	mov	sl, r3
    9160:	9b00      	ldr	r3, [sp, #0]
    9162:	4060      	eors	r0, r4
    9164:	9002      	str	r0, [sp, #8]
    9166:	430b      	orrs	r3, r1
    9168:	2b0f      	cmp	r3, #15
    916a:	d900      	bls.n	916e <__aeabi_dmul+0x92>
    916c:	e0ac      	b.n	92c8 <__aeabi_dmul+0x1ec>
    916e:	4853      	ldr	r0, [pc, #332]	; (92bc <__aeabi_dmul+0x1e0>)
    9170:	009b      	lsls	r3, r3, #2
    9172:	58c3      	ldr	r3, [r0, r3]
    9174:	469f      	mov	pc, r3
    9176:	465b      	mov	r3, fp
    9178:	431d      	orrs	r5, r3
    917a:	d000      	beq.n	917e <__aeabi_dmul+0xa2>
    917c:	e082      	b.n	9284 <__aeabi_dmul+0x1a8>
    917e:	2308      	movs	r3, #8
    9180:	9300      	str	r3, [sp, #0]
    9182:	2300      	movs	r3, #0
    9184:	469b      	mov	fp, r3
    9186:	3302      	adds	r3, #2
    9188:	2600      	movs	r6, #0
    918a:	4698      	mov	r8, r3
    918c:	e7cb      	b.n	9126 <__aeabi_dmul+0x4a>
    918e:	9b02      	ldr	r3, [sp, #8]
    9190:	9301      	str	r3, [sp, #4]
    9192:	4643      	mov	r3, r8
    9194:	2b02      	cmp	r3, #2
    9196:	d159      	bne.n	924c <__aeabi_dmul+0x170>
    9198:	2401      	movs	r4, #1
    919a:	2500      	movs	r5, #0
    919c:	2600      	movs	r6, #0
    919e:	9b01      	ldr	r3, [sp, #4]
    91a0:	401c      	ands	r4, r3
    91a2:	4b44      	ldr	r3, [pc, #272]	; (92b4 <__aeabi_dmul+0x1d8>)
    91a4:	2100      	movs	r1, #0
    91a6:	032d      	lsls	r5, r5, #12
    91a8:	0d0a      	lsrs	r2, r1, #20
    91aa:	0512      	lsls	r2, r2, #20
    91ac:	0b2d      	lsrs	r5, r5, #12
    91ae:	4315      	orrs	r5, r2
    91b0:	4a43      	ldr	r2, [pc, #268]	; (92c0 <__aeabi_dmul+0x1e4>)
    91b2:	051b      	lsls	r3, r3, #20
    91b4:	4015      	ands	r5, r2
    91b6:	431d      	orrs	r5, r3
    91b8:	006d      	lsls	r5, r5, #1
    91ba:	07e4      	lsls	r4, r4, #31
    91bc:	086d      	lsrs	r5, r5, #1
    91be:	4325      	orrs	r5, r4
    91c0:	1c30      	adds	r0, r6, #0
    91c2:	1c29      	adds	r1, r5, #0
    91c4:	b007      	add	sp, #28
    91c6:	bc3c      	pop	{r2, r3, r4, r5}
    91c8:	4690      	mov	r8, r2
    91ca:	4699      	mov	r9, r3
    91cc:	46a2      	mov	sl, r4
    91ce:	46ab      	mov	fp, r5
    91d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91d2:	432b      	orrs	r3, r5
    91d4:	d04e      	beq.n	9274 <__aeabi_dmul+0x198>
    91d6:	465b      	mov	r3, fp
    91d8:	2b00      	cmp	r3, #0
    91da:	d100      	bne.n	91de <__aeabi_dmul+0x102>
    91dc:	e185      	b.n	94ea <__aeabi_dmul+0x40e>
    91de:	4658      	mov	r0, fp
    91e0:	f7fe fb88 	bl	78f4 <__clzsi2>
    91e4:	1c02      	adds	r2, r0, #0
    91e6:	2328      	movs	r3, #40	; 0x28
    91e8:	1c29      	adds	r1, r5, #0
    91ea:	1a9b      	subs	r3, r3, r2
    91ec:	1c16      	adds	r6, r2, #0
    91ee:	4658      	mov	r0, fp
    91f0:	40d9      	lsrs	r1, r3
    91f2:	3e08      	subs	r6, #8
    91f4:	40b0      	lsls	r0, r6
    91f6:	1c0b      	adds	r3, r1, #0
    91f8:	40b5      	lsls	r5, r6
    91fa:	4303      	orrs	r3, r0
    91fc:	469b      	mov	fp, r3
    91fe:	1c2e      	adds	r6, r5, #0
    9200:	2300      	movs	r3, #0
    9202:	4f30      	ldr	r7, [pc, #192]	; (92c4 <__aeabi_dmul+0x1e8>)
    9204:	9300      	str	r3, [sp, #0]
    9206:	1abf      	subs	r7, r7, r2
    9208:	4698      	mov	r8, r3
    920a:	e78c      	b.n	9126 <__aeabi_dmul+0x4a>
    920c:	4651      	mov	r1, sl
    920e:	4329      	orrs	r1, r5
    9210:	d12e      	bne.n	9270 <__aeabi_dmul+0x194>
    9212:	2500      	movs	r5, #0
    9214:	2200      	movs	r2, #0
    9216:	2102      	movs	r1, #2
    9218:	e79e      	b.n	9158 <__aeabi_dmul+0x7c>
    921a:	4651      	mov	r1, sl
    921c:	4329      	orrs	r1, r5
    921e:	d023      	beq.n	9268 <__aeabi_dmul+0x18c>
    9220:	2d00      	cmp	r5, #0
    9222:	d100      	bne.n	9226 <__aeabi_dmul+0x14a>
    9224:	e154      	b.n	94d0 <__aeabi_dmul+0x3f4>
    9226:	1c28      	adds	r0, r5, #0
    9228:	f7fe fb64 	bl	78f4 <__clzsi2>
    922c:	1c03      	adds	r3, r0, #0
    922e:	2128      	movs	r1, #40	; 0x28
    9230:	4650      	mov	r0, sl
    9232:	1ac9      	subs	r1, r1, r3
    9234:	1c1a      	adds	r2, r3, #0
    9236:	40c8      	lsrs	r0, r1
    9238:	4651      	mov	r1, sl
    923a:	3a08      	subs	r2, #8
    923c:	4091      	lsls	r1, r2
    923e:	4095      	lsls	r5, r2
    9240:	1c0a      	adds	r2, r1, #0
    9242:	4305      	orrs	r5, r0
    9244:	481f      	ldr	r0, [pc, #124]	; (92c4 <__aeabi_dmul+0x1e8>)
    9246:	2100      	movs	r1, #0
    9248:	1ac3      	subs	r3, r0, r3
    924a:	e785      	b.n	9158 <__aeabi_dmul+0x7c>
    924c:	2b03      	cmp	r3, #3
    924e:	d100      	bne.n	9252 <__aeabi_dmul+0x176>
    9250:	e1c2      	b.n	95d8 <__aeabi_dmul+0x4fc>
    9252:	2b01      	cmp	r3, #1
    9254:	d000      	beq.n	9258 <__aeabi_dmul+0x17c>
    9256:	e16d      	b.n	9534 <__aeabi_dmul+0x458>
    9258:	4644      	mov	r4, r8
    925a:	9b01      	ldr	r3, [sp, #4]
    925c:	2500      	movs	r5, #0
    925e:	401c      	ands	r4, r3
    9260:	b2e4      	uxtb	r4, r4
    9262:	2300      	movs	r3, #0
    9264:	2600      	movs	r6, #0
    9266:	e79d      	b.n	91a4 <__aeabi_dmul+0xc8>
    9268:	2500      	movs	r5, #0
    926a:	2200      	movs	r2, #0
    926c:	2101      	movs	r1, #1
    926e:	e773      	b.n	9158 <__aeabi_dmul+0x7c>
    9270:	2103      	movs	r1, #3
    9272:	e771      	b.n	9158 <__aeabi_dmul+0x7c>
    9274:	2304      	movs	r3, #4
    9276:	9300      	str	r3, [sp, #0]
    9278:	2300      	movs	r3, #0
    927a:	469b      	mov	fp, r3
    927c:	3301      	adds	r3, #1
    927e:	2600      	movs	r6, #0
    9280:	4698      	mov	r8, r3
    9282:	e750      	b.n	9126 <__aeabi_dmul+0x4a>
    9284:	230c      	movs	r3, #12
    9286:	9300      	str	r3, [sp, #0]
    9288:	3b09      	subs	r3, #9
    928a:	4698      	mov	r8, r3
    928c:	e74b      	b.n	9126 <__aeabi_dmul+0x4a>
    928e:	2580      	movs	r5, #128	; 0x80
    9290:	2400      	movs	r4, #0
    9292:	032d      	lsls	r5, r5, #12
    9294:	2600      	movs	r6, #0
    9296:	4b07      	ldr	r3, [pc, #28]	; (92b4 <__aeabi_dmul+0x1d8>)
    9298:	e784      	b.n	91a4 <__aeabi_dmul+0xc8>
    929a:	464b      	mov	r3, r9
    929c:	46ab      	mov	fp, r5
    929e:	1c16      	adds	r6, r2, #0
    92a0:	9301      	str	r3, [sp, #4]
    92a2:	4688      	mov	r8, r1
    92a4:	e775      	b.n	9192 <__aeabi_dmul+0xb6>
    92a6:	9b02      	ldr	r3, [sp, #8]
    92a8:	46ab      	mov	fp, r5
    92aa:	1c16      	adds	r6, r2, #0
    92ac:	9301      	str	r3, [sp, #4]
    92ae:	4688      	mov	r8, r1
    92b0:	e76f      	b.n	9192 <__aeabi_dmul+0xb6>
    92b2:	46c0      	nop			; (mov r8, r8)
    92b4:	000007ff 	.word	0x000007ff
    92b8:	fffffc01 	.word	0xfffffc01
    92bc:	0000ab58 	.word	0x0000ab58
    92c0:	800fffff 	.word	0x800fffff
    92c4:	fffffc0d 	.word	0xfffffc0d
    92c8:	0c33      	lsrs	r3, r6, #16
    92ca:	0436      	lsls	r6, r6, #16
    92cc:	0c36      	lsrs	r6, r6, #16
    92ce:	469c      	mov	ip, r3
    92d0:	1c33      	adds	r3, r6, #0
    92d2:	0c14      	lsrs	r4, r2, #16
    92d4:	0412      	lsls	r2, r2, #16
    92d6:	0c12      	lsrs	r2, r2, #16
    92d8:	4353      	muls	r3, r2
    92da:	4698      	mov	r8, r3
    92dc:	4663      	mov	r3, ip
    92de:	4353      	muls	r3, r2
    92e0:	4699      	mov	r9, r3
    92e2:	4663      	mov	r3, ip
    92e4:	4363      	muls	r3, r4
    92e6:	9301      	str	r3, [sp, #4]
    92e8:	1c33      	adds	r3, r6, #0
    92ea:	4641      	mov	r1, r8
    92ec:	4363      	muls	r3, r4
    92ee:	0c09      	lsrs	r1, r1, #16
    92f0:	444b      	add	r3, r9
    92f2:	185b      	adds	r3, r3, r1
    92f4:	4599      	cmp	r9, r3
    92f6:	d905      	bls.n	9304 <__aeabi_dmul+0x228>
    92f8:	2080      	movs	r0, #128	; 0x80
    92fa:	0240      	lsls	r0, r0, #9
    92fc:	4681      	mov	r9, r0
    92fe:	9901      	ldr	r1, [sp, #4]
    9300:	4449      	add	r1, r9
    9302:	9101      	str	r1, [sp, #4]
    9304:	0c19      	lsrs	r1, r3, #16
    9306:	9103      	str	r1, [sp, #12]
    9308:	4641      	mov	r1, r8
    930a:	0409      	lsls	r1, r1, #16
    930c:	0c09      	lsrs	r1, r1, #16
    930e:	041b      	lsls	r3, r3, #16
    9310:	185b      	adds	r3, r3, r1
    9312:	9304      	str	r3, [sp, #16]
    9314:	0c2b      	lsrs	r3, r5, #16
    9316:	4698      	mov	r8, r3
    9318:	1c33      	adds	r3, r6, #0
    931a:	042d      	lsls	r5, r5, #16
    931c:	0c29      	lsrs	r1, r5, #16
    931e:	434b      	muls	r3, r1
    9320:	4660      	mov	r0, ip
    9322:	9300      	str	r3, [sp, #0]
    9324:	4643      	mov	r3, r8
    9326:	4665      	mov	r5, ip
    9328:	4358      	muls	r0, r3
    932a:	435e      	muls	r6, r3
    932c:	9b00      	ldr	r3, [sp, #0]
    932e:	434d      	muls	r5, r1
    9330:	0c1b      	lsrs	r3, r3, #16
    9332:	4699      	mov	r9, r3
    9334:	19ae      	adds	r6, r5, r6
    9336:	444e      	add	r6, r9
    9338:	4684      	mov	ip, r0
    933a:	42b5      	cmp	r5, r6
    933c:	d903      	bls.n	9346 <__aeabi_dmul+0x26a>
    933e:	2380      	movs	r3, #128	; 0x80
    9340:	025b      	lsls	r3, r3, #9
    9342:	4699      	mov	r9, r3
    9344:	44cc      	add	ip, r9
    9346:	0c35      	lsrs	r5, r6, #16
    9348:	1c2b      	adds	r3, r5, #0
    934a:	9803      	ldr	r0, [sp, #12]
    934c:	4463      	add	r3, ip
    934e:	4684      	mov	ip, r0
    9350:	9305      	str	r3, [sp, #20]
    9352:	9b00      	ldr	r3, [sp, #0]
    9354:	0436      	lsls	r6, r6, #16
    9356:	041b      	lsls	r3, r3, #16
    9358:	0c1b      	lsrs	r3, r3, #16
    935a:	18f3      	adds	r3, r6, r3
    935c:	449c      	add	ip, r3
    935e:	4660      	mov	r0, ip
    9360:	9003      	str	r0, [sp, #12]
    9362:	4658      	mov	r0, fp
    9364:	0405      	lsls	r5, r0, #16
    9366:	0c06      	lsrs	r6, r0, #16
    9368:	0c28      	lsrs	r0, r5, #16
    936a:	4684      	mov	ip, r0
    936c:	4350      	muls	r0, r2
    936e:	1c35      	adds	r5, r6, #0
    9370:	4681      	mov	r9, r0
    9372:	4660      	mov	r0, ip
    9374:	4365      	muls	r5, r4
    9376:	4344      	muls	r4, r0
    9378:	4648      	mov	r0, r9
    937a:	0c00      	lsrs	r0, r0, #16
    937c:	4683      	mov	fp, r0
    937e:	4372      	muls	r2, r6
    9380:	1914      	adds	r4, r2, r4
    9382:	445c      	add	r4, fp
    9384:	42a2      	cmp	r2, r4
    9386:	d903      	bls.n	9390 <__aeabi_dmul+0x2b4>
    9388:	2280      	movs	r2, #128	; 0x80
    938a:	0252      	lsls	r2, r2, #9
    938c:	4693      	mov	fp, r2
    938e:	445d      	add	r5, fp
    9390:	0c22      	lsrs	r2, r4, #16
    9392:	18ad      	adds	r5, r5, r2
    9394:	464a      	mov	r2, r9
    9396:	0412      	lsls	r2, r2, #16
    9398:	0c12      	lsrs	r2, r2, #16
    939a:	0424      	lsls	r4, r4, #16
    939c:	4640      	mov	r0, r8
    939e:	18a4      	adds	r4, r4, r2
    93a0:	4662      	mov	r2, ip
    93a2:	434a      	muls	r2, r1
    93a4:	4371      	muls	r1, r6
    93a6:	4346      	muls	r6, r0
    93a8:	4660      	mov	r0, ip
    93aa:	9600      	str	r6, [sp, #0]
    93ac:	4646      	mov	r6, r8
    93ae:	4370      	muls	r0, r6
    93b0:	4680      	mov	r8, r0
    93b2:	0c10      	lsrs	r0, r2, #16
    93b4:	4684      	mov	ip, r0
    93b6:	4488      	add	r8, r1
    93b8:	44e0      	add	r8, ip
    93ba:	4541      	cmp	r1, r8
    93bc:	d905      	bls.n	93ca <__aeabi_dmul+0x2ee>
    93be:	2180      	movs	r1, #128	; 0x80
    93c0:	0249      	lsls	r1, r1, #9
    93c2:	468c      	mov	ip, r1
    93c4:	9900      	ldr	r1, [sp, #0]
    93c6:	4461      	add	r1, ip
    93c8:	9100      	str	r1, [sp, #0]
    93ca:	9801      	ldr	r0, [sp, #4]
    93cc:	9903      	ldr	r1, [sp, #12]
    93ce:	4684      	mov	ip, r0
    93d0:	4461      	add	r1, ip
    93d2:	4299      	cmp	r1, r3
    93d4:	419b      	sbcs	r3, r3
    93d6:	425b      	negs	r3, r3
    93d8:	4699      	mov	r9, r3
    93da:	9805      	ldr	r0, [sp, #20]
    93dc:	4643      	mov	r3, r8
    93de:	4684      	mov	ip, r0
    93e0:	0412      	lsls	r2, r2, #16
    93e2:	0c12      	lsrs	r2, r2, #16
    93e4:	041b      	lsls	r3, r3, #16
    93e6:	189b      	adds	r3, r3, r2
    93e8:	4463      	add	r3, ip
    93ea:	469c      	mov	ip, r3
    93ec:	46ab      	mov	fp, r5
    93ee:	4283      	cmp	r3, r0
    93f0:	419b      	sbcs	r3, r3
    93f2:	4640      	mov	r0, r8
    93f4:	190a      	adds	r2, r1, r4
    93f6:	44cc      	add	ip, r9
    93f8:	42a2      	cmp	r2, r4
    93fa:	4189      	sbcs	r1, r1
    93fc:	44e3      	add	fp, ip
    93fe:	45cc      	cmp	ip, r9
    9400:	41b6      	sbcs	r6, r6
    9402:	465c      	mov	r4, fp
    9404:	0c00      	lsrs	r0, r0, #16
    9406:	4680      	mov	r8, r0
    9408:	4249      	negs	r1, r1
    940a:	4276      	negs	r6, r6
    940c:	425b      	negs	r3, r3
    940e:	1864      	adds	r4, r4, r1
    9410:	4333      	orrs	r3, r6
    9412:	4498      	add	r8, r3
    9414:	428c      	cmp	r4, r1
    9416:	4189      	sbcs	r1, r1
    9418:	45ab      	cmp	fp, r5
    941a:	419b      	sbcs	r3, r3
    941c:	4249      	negs	r1, r1
    941e:	425b      	negs	r3, r3
    9420:	4319      	orrs	r1, r3
    9422:	1c0d      	adds	r5, r1, #0
    9424:	9b00      	ldr	r3, [sp, #0]
    9426:	4445      	add	r5, r8
    9428:	18ee      	adds	r6, r5, r3
    942a:	0276      	lsls	r6, r6, #9
    942c:	0de5      	lsrs	r5, r4, #23
    942e:	432e      	orrs	r6, r5
    9430:	46b3      	mov	fp, r6
    9432:	9b04      	ldr	r3, [sp, #16]
    9434:	0256      	lsls	r6, r2, #9
    9436:	431e      	orrs	r6, r3
    9438:	1e73      	subs	r3, r6, #1
    943a:	419e      	sbcs	r6, r3
    943c:	465b      	mov	r3, fp
    943e:	0dd2      	lsrs	r2, r2, #23
    9440:	4332      	orrs	r2, r6
    9442:	0266      	lsls	r6, r4, #9
    9444:	4316      	orrs	r6, r2
    9446:	01db      	lsls	r3, r3, #7
    9448:	d50a      	bpl.n	9460 <__aeabi_dmul+0x384>
    944a:	2301      	movs	r3, #1
    944c:	4033      	ands	r3, r6
    944e:	0876      	lsrs	r6, r6, #1
    9450:	431e      	orrs	r6, r3
    9452:	465b      	mov	r3, fp
    9454:	07db      	lsls	r3, r3, #31
    9456:	431e      	orrs	r6, r3
    9458:	465b      	mov	r3, fp
    945a:	085b      	lsrs	r3, r3, #1
    945c:	469b      	mov	fp, r3
    945e:	4657      	mov	r7, sl
    9460:	4b63      	ldr	r3, [pc, #396]	; (95f0 <__aeabi_dmul+0x514>)
    9462:	18fb      	adds	r3, r7, r3
    9464:	2b00      	cmp	r3, #0
    9466:	dd5a      	ble.n	951e <__aeabi_dmul+0x442>
    9468:	0772      	lsls	r2, r6, #29
    946a:	d009      	beq.n	9480 <__aeabi_dmul+0x3a4>
    946c:	220f      	movs	r2, #15
    946e:	4032      	ands	r2, r6
    9470:	2a04      	cmp	r2, #4
    9472:	d005      	beq.n	9480 <__aeabi_dmul+0x3a4>
    9474:	1d32      	adds	r2, r6, #4
    9476:	42b2      	cmp	r2, r6
    9478:	41b6      	sbcs	r6, r6
    947a:	4276      	negs	r6, r6
    947c:	44b3      	add	fp, r6
    947e:	1c16      	adds	r6, r2, #0
    9480:	465a      	mov	r2, fp
    9482:	01d2      	lsls	r2, r2, #7
    9484:	d506      	bpl.n	9494 <__aeabi_dmul+0x3b8>
    9486:	465a      	mov	r2, fp
    9488:	4b5a      	ldr	r3, [pc, #360]	; (95f4 <__aeabi_dmul+0x518>)
    948a:	401a      	ands	r2, r3
    948c:	2380      	movs	r3, #128	; 0x80
    948e:	4693      	mov	fp, r2
    9490:	00db      	lsls	r3, r3, #3
    9492:	18fb      	adds	r3, r7, r3
    9494:	4a58      	ldr	r2, [pc, #352]	; (95f8 <__aeabi_dmul+0x51c>)
    9496:	4293      	cmp	r3, r2
    9498:	dd34      	ble.n	9504 <__aeabi_dmul+0x428>
    949a:	2401      	movs	r4, #1
    949c:	9b02      	ldr	r3, [sp, #8]
    949e:	2500      	movs	r5, #0
    94a0:	401c      	ands	r4, r3
    94a2:	2600      	movs	r6, #0
    94a4:	4b55      	ldr	r3, [pc, #340]	; (95fc <__aeabi_dmul+0x520>)
    94a6:	e67d      	b.n	91a4 <__aeabi_dmul+0xc8>
    94a8:	2080      	movs	r0, #128	; 0x80
    94aa:	465b      	mov	r3, fp
    94ac:	0300      	lsls	r0, r0, #12
    94ae:	4203      	tst	r3, r0
    94b0:	d008      	beq.n	94c4 <__aeabi_dmul+0x3e8>
    94b2:	4205      	tst	r5, r0
    94b4:	d106      	bne.n	94c4 <__aeabi_dmul+0x3e8>
    94b6:	4305      	orrs	r5, r0
    94b8:	032d      	lsls	r5, r5, #12
    94ba:	0b2d      	lsrs	r5, r5, #12
    94bc:	464c      	mov	r4, r9
    94be:	1c16      	adds	r6, r2, #0
    94c0:	4b4e      	ldr	r3, [pc, #312]	; (95fc <__aeabi_dmul+0x520>)
    94c2:	e66f      	b.n	91a4 <__aeabi_dmul+0xc8>
    94c4:	465d      	mov	r5, fp
    94c6:	4305      	orrs	r5, r0
    94c8:	032d      	lsls	r5, r5, #12
    94ca:	0b2d      	lsrs	r5, r5, #12
    94cc:	4b4b      	ldr	r3, [pc, #300]	; (95fc <__aeabi_dmul+0x520>)
    94ce:	e669      	b.n	91a4 <__aeabi_dmul+0xc8>
    94d0:	4650      	mov	r0, sl
    94d2:	f7fe fa0f 	bl	78f4 <__clzsi2>
    94d6:	1c03      	adds	r3, r0, #0
    94d8:	3320      	adds	r3, #32
    94da:	2b27      	cmp	r3, #39	; 0x27
    94dc:	dc00      	bgt.n	94e0 <__aeabi_dmul+0x404>
    94de:	e6a6      	b.n	922e <__aeabi_dmul+0x152>
    94e0:	4655      	mov	r5, sl
    94e2:	3808      	subs	r0, #8
    94e4:	4085      	lsls	r5, r0
    94e6:	2200      	movs	r2, #0
    94e8:	e6ac      	b.n	9244 <__aeabi_dmul+0x168>
    94ea:	1c28      	adds	r0, r5, #0
    94ec:	f7fe fa02 	bl	78f4 <__clzsi2>
    94f0:	1c02      	adds	r2, r0, #0
    94f2:	3220      	adds	r2, #32
    94f4:	2a27      	cmp	r2, #39	; 0x27
    94f6:	dc00      	bgt.n	94fa <__aeabi_dmul+0x41e>
    94f8:	e675      	b.n	91e6 <__aeabi_dmul+0x10a>
    94fa:	3808      	subs	r0, #8
    94fc:	4085      	lsls	r5, r0
    94fe:	2600      	movs	r6, #0
    9500:	46ab      	mov	fp, r5
    9502:	e67d      	b.n	9200 <__aeabi_dmul+0x124>
    9504:	465a      	mov	r2, fp
    9506:	08f6      	lsrs	r6, r6, #3
    9508:	0752      	lsls	r2, r2, #29
    950a:	4316      	orrs	r6, r2
    950c:	465a      	mov	r2, fp
    950e:	2401      	movs	r4, #1
    9510:	0255      	lsls	r5, r2, #9
    9512:	9a02      	ldr	r2, [sp, #8]
    9514:	055b      	lsls	r3, r3, #21
    9516:	0b2d      	lsrs	r5, r5, #12
    9518:	0d5b      	lsrs	r3, r3, #21
    951a:	4014      	ands	r4, r2
    951c:	e642      	b.n	91a4 <__aeabi_dmul+0xc8>
    951e:	4d38      	ldr	r5, [pc, #224]	; (9600 <__aeabi_dmul+0x524>)
    9520:	1bed      	subs	r5, r5, r7
    9522:	2d38      	cmp	r5, #56	; 0x38
    9524:	dd0a      	ble.n	953c <__aeabi_dmul+0x460>
    9526:	2401      	movs	r4, #1
    9528:	9b02      	ldr	r3, [sp, #8]
    952a:	2500      	movs	r5, #0
    952c:	401c      	ands	r4, r3
    952e:	2600      	movs	r6, #0
    9530:	2300      	movs	r3, #0
    9532:	e637      	b.n	91a4 <__aeabi_dmul+0xc8>
    9534:	9b01      	ldr	r3, [sp, #4]
    9536:	4657      	mov	r7, sl
    9538:	9302      	str	r3, [sp, #8]
    953a:	e791      	b.n	9460 <__aeabi_dmul+0x384>
    953c:	2d1f      	cmp	r5, #31
    953e:	dc25      	bgt.n	958c <__aeabi_dmul+0x4b0>
    9540:	4b30      	ldr	r3, [pc, #192]	; (9604 <__aeabi_dmul+0x528>)
    9542:	1c32      	adds	r2, r6, #0
    9544:	469c      	mov	ip, r3
    9546:	4467      	add	r7, ip
    9548:	40be      	lsls	r6, r7
    954a:	465b      	mov	r3, fp
    954c:	40bb      	lsls	r3, r7
    954e:	1c37      	adds	r7, r6, #0
    9550:	40ea      	lsrs	r2, r5
    9552:	1e7e      	subs	r6, r7, #1
    9554:	41b7      	sbcs	r7, r6
    9556:	4313      	orrs	r3, r2
    9558:	433b      	orrs	r3, r7
    955a:	1c1e      	adds	r6, r3, #0
    955c:	465b      	mov	r3, fp
    955e:	40eb      	lsrs	r3, r5
    9560:	1c1d      	adds	r5, r3, #0
    9562:	0773      	lsls	r3, r6, #29
    9564:	d009      	beq.n	957a <__aeabi_dmul+0x49e>
    9566:	230f      	movs	r3, #15
    9568:	4033      	ands	r3, r6
    956a:	2b04      	cmp	r3, #4
    956c:	d005      	beq.n	957a <__aeabi_dmul+0x49e>
    956e:	1d33      	adds	r3, r6, #4
    9570:	42b3      	cmp	r3, r6
    9572:	41b6      	sbcs	r6, r6
    9574:	4276      	negs	r6, r6
    9576:	19ad      	adds	r5, r5, r6
    9578:	1c1e      	adds	r6, r3, #0
    957a:	022b      	lsls	r3, r5, #8
    957c:	d520      	bpl.n	95c0 <__aeabi_dmul+0x4e4>
    957e:	2401      	movs	r4, #1
    9580:	9b02      	ldr	r3, [sp, #8]
    9582:	2500      	movs	r5, #0
    9584:	401c      	ands	r4, r3
    9586:	2600      	movs	r6, #0
    9588:	2301      	movs	r3, #1
    958a:	e60b      	b.n	91a4 <__aeabi_dmul+0xc8>
    958c:	465a      	mov	r2, fp
    958e:	4b1e      	ldr	r3, [pc, #120]	; (9608 <__aeabi_dmul+0x52c>)
    9590:	1bdb      	subs	r3, r3, r7
    9592:	40da      	lsrs	r2, r3
    9594:	1c13      	adds	r3, r2, #0
    9596:	2d20      	cmp	r5, #32
    9598:	d01c      	beq.n	95d4 <__aeabi_dmul+0x4f8>
    959a:	4a1c      	ldr	r2, [pc, #112]	; (960c <__aeabi_dmul+0x530>)
    959c:	4694      	mov	ip, r2
    959e:	465a      	mov	r2, fp
    95a0:	4467      	add	r7, ip
    95a2:	40ba      	lsls	r2, r7
    95a4:	1c17      	adds	r7, r2, #0
    95a6:	433e      	orrs	r6, r7
    95a8:	1e72      	subs	r2, r6, #1
    95aa:	4196      	sbcs	r6, r2
    95ac:	431e      	orrs	r6, r3
    95ae:	2307      	movs	r3, #7
    95b0:	2500      	movs	r5, #0
    95b2:	4033      	ands	r3, r6
    95b4:	d007      	beq.n	95c6 <__aeabi_dmul+0x4ea>
    95b6:	230f      	movs	r3, #15
    95b8:	2500      	movs	r5, #0
    95ba:	4033      	ands	r3, r6
    95bc:	2b04      	cmp	r3, #4
    95be:	d1d6      	bne.n	956e <__aeabi_dmul+0x492>
    95c0:	076b      	lsls	r3, r5, #29
    95c2:	026d      	lsls	r5, r5, #9
    95c4:	0b2d      	lsrs	r5, r5, #12
    95c6:	2401      	movs	r4, #1
    95c8:	08f6      	lsrs	r6, r6, #3
    95ca:	431e      	orrs	r6, r3
    95cc:	9b02      	ldr	r3, [sp, #8]
    95ce:	401c      	ands	r4, r3
    95d0:	2300      	movs	r3, #0
    95d2:	e5e7      	b.n	91a4 <__aeabi_dmul+0xc8>
    95d4:	2700      	movs	r7, #0
    95d6:	e7e6      	b.n	95a6 <__aeabi_dmul+0x4ca>
    95d8:	2580      	movs	r5, #128	; 0x80
    95da:	465b      	mov	r3, fp
    95dc:	2401      	movs	r4, #1
    95de:	032d      	lsls	r5, r5, #12
    95e0:	431d      	orrs	r5, r3
    95e2:	9b01      	ldr	r3, [sp, #4]
    95e4:	032d      	lsls	r5, r5, #12
    95e6:	4023      	ands	r3, r4
    95e8:	1c1c      	adds	r4, r3, #0
    95ea:	0b2d      	lsrs	r5, r5, #12
    95ec:	4b03      	ldr	r3, [pc, #12]	; (95fc <__aeabi_dmul+0x520>)
    95ee:	e5d9      	b.n	91a4 <__aeabi_dmul+0xc8>
    95f0:	000003ff 	.word	0x000003ff
    95f4:	feffffff 	.word	0xfeffffff
    95f8:	000007fe 	.word	0x000007fe
    95fc:	000007ff 	.word	0x000007ff
    9600:	fffffc02 	.word	0xfffffc02
    9604:	0000041e 	.word	0x0000041e
    9608:	fffffbe2 	.word	0xfffffbe2
    960c:	0000043e 	.word	0x0000043e

00009610 <__aeabi_dsub>:
    9610:	b5f0      	push	{r4, r5, r6, r7, lr}
    9612:	464d      	mov	r5, r9
    9614:	4644      	mov	r4, r8
    9616:	465f      	mov	r7, fp
    9618:	4656      	mov	r6, sl
    961a:	b4f0      	push	{r4, r5, r6, r7}
    961c:	1c0e      	adds	r6, r1, #0
    961e:	1c11      	adds	r1, r2, #0
    9620:	0332      	lsls	r2, r6, #12
    9622:	0a52      	lsrs	r2, r2, #9
    9624:	0f47      	lsrs	r7, r0, #29
    9626:	4317      	orrs	r7, r2
    9628:	00c5      	lsls	r5, r0, #3
    962a:	031a      	lsls	r2, r3, #12
    962c:	0058      	lsls	r0, r3, #1
    962e:	0fdb      	lsrs	r3, r3, #31
    9630:	4699      	mov	r9, r3
    9632:	0a52      	lsrs	r2, r2, #9
    9634:	0f4b      	lsrs	r3, r1, #29
    9636:	b083      	sub	sp, #12
    9638:	431a      	orrs	r2, r3
    963a:	00cb      	lsls	r3, r1, #3
    963c:	9301      	str	r3, [sp, #4]
    963e:	4bcf      	ldr	r3, [pc, #828]	; (997c <__aeabi_dsub+0x36c>)
    9640:	0074      	lsls	r4, r6, #1
    9642:	0ff6      	lsrs	r6, r6, #31
    9644:	0d64      	lsrs	r4, r4, #21
    9646:	46b0      	mov	r8, r6
    9648:	0d40      	lsrs	r0, r0, #21
    964a:	4298      	cmp	r0, r3
    964c:	d100      	bne.n	9650 <__aeabi_dsub+0x40>
    964e:	e0e8      	b.n	9822 <__aeabi_dsub+0x212>
    9650:	2301      	movs	r3, #1
    9652:	4649      	mov	r1, r9
    9654:	4059      	eors	r1, r3
    9656:	1c0b      	adds	r3, r1, #0
    9658:	429e      	cmp	r6, r3
    965a:	d100      	bne.n	965e <__aeabi_dsub+0x4e>
    965c:	e0b1      	b.n	97c2 <__aeabi_dsub+0x1b2>
    965e:	1a26      	subs	r6, r4, r0
    9660:	2e00      	cmp	r6, #0
    9662:	dc00      	bgt.n	9666 <__aeabi_dsub+0x56>
    9664:	e11c      	b.n	98a0 <__aeabi_dsub+0x290>
    9666:	2800      	cmp	r0, #0
    9668:	d142      	bne.n	96f0 <__aeabi_dsub+0xe0>
    966a:	1c13      	adds	r3, r2, #0
    966c:	9901      	ldr	r1, [sp, #4]
    966e:	430b      	orrs	r3, r1
    9670:	d000      	beq.n	9674 <__aeabi_dsub+0x64>
    9672:	e0e6      	b.n	9842 <__aeabi_dsub+0x232>
    9674:	076b      	lsls	r3, r5, #29
    9676:	d100      	bne.n	967a <__aeabi_dsub+0x6a>
    9678:	e08e      	b.n	9798 <__aeabi_dsub+0x188>
    967a:	230f      	movs	r3, #15
    967c:	402b      	ands	r3, r5
    967e:	2b04      	cmp	r3, #4
    9680:	d100      	bne.n	9684 <__aeabi_dsub+0x74>
    9682:	e089      	b.n	9798 <__aeabi_dsub+0x188>
    9684:	1d2a      	adds	r2, r5, #4
    9686:	42aa      	cmp	r2, r5
    9688:	41ad      	sbcs	r5, r5
    968a:	2380      	movs	r3, #128	; 0x80
    968c:	2601      	movs	r6, #1
    968e:	4641      	mov	r1, r8
    9690:	426d      	negs	r5, r5
    9692:	197f      	adds	r7, r7, r5
    9694:	041b      	lsls	r3, r3, #16
    9696:	403b      	ands	r3, r7
    9698:	400e      	ands	r6, r1
    969a:	1c15      	adds	r5, r2, #0
    969c:	2b00      	cmp	r3, #0
    969e:	d100      	bne.n	96a2 <__aeabi_dsub+0x92>
    96a0:	e083      	b.n	97aa <__aeabi_dsub+0x19a>
    96a2:	4bb6      	ldr	r3, [pc, #728]	; (997c <__aeabi_dsub+0x36c>)
    96a4:	3401      	adds	r4, #1
    96a6:	429c      	cmp	r4, r3
    96a8:	d100      	bne.n	96ac <__aeabi_dsub+0x9c>
    96aa:	e116      	b.n	98da <__aeabi_dsub+0x2ca>
    96ac:	1c3a      	adds	r2, r7, #0
    96ae:	4bb4      	ldr	r3, [pc, #720]	; (9980 <__aeabi_dsub+0x370>)
    96b0:	08ed      	lsrs	r5, r5, #3
    96b2:	401a      	ands	r2, r3
    96b4:	0750      	lsls	r0, r2, #29
    96b6:	0564      	lsls	r4, r4, #21
    96b8:	0252      	lsls	r2, r2, #9
    96ba:	4305      	orrs	r5, r0
    96bc:	0b12      	lsrs	r2, r2, #12
    96be:	0d64      	lsrs	r4, r4, #21
    96c0:	2100      	movs	r1, #0
    96c2:	0312      	lsls	r2, r2, #12
    96c4:	0d0b      	lsrs	r3, r1, #20
    96c6:	051b      	lsls	r3, r3, #20
    96c8:	0564      	lsls	r4, r4, #21
    96ca:	0b12      	lsrs	r2, r2, #12
    96cc:	431a      	orrs	r2, r3
    96ce:	0863      	lsrs	r3, r4, #1
    96d0:	4cac      	ldr	r4, [pc, #688]	; (9984 <__aeabi_dsub+0x374>)
    96d2:	07f6      	lsls	r6, r6, #31
    96d4:	4014      	ands	r4, r2
    96d6:	431c      	orrs	r4, r3
    96d8:	0064      	lsls	r4, r4, #1
    96da:	0864      	lsrs	r4, r4, #1
    96dc:	4334      	orrs	r4, r6
    96de:	1c28      	adds	r0, r5, #0
    96e0:	1c21      	adds	r1, r4, #0
    96e2:	b003      	add	sp, #12
    96e4:	bc3c      	pop	{r2, r3, r4, r5}
    96e6:	4690      	mov	r8, r2
    96e8:	4699      	mov	r9, r3
    96ea:	46a2      	mov	sl, r4
    96ec:	46ab      	mov	fp, r5
    96ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96f0:	4ba2      	ldr	r3, [pc, #648]	; (997c <__aeabi_dsub+0x36c>)
    96f2:	429c      	cmp	r4, r3
    96f4:	d0be      	beq.n	9674 <__aeabi_dsub+0x64>
    96f6:	2380      	movs	r3, #128	; 0x80
    96f8:	041b      	lsls	r3, r3, #16
    96fa:	431a      	orrs	r2, r3
    96fc:	2e38      	cmp	r6, #56	; 0x38
    96fe:	dd00      	ble.n	9702 <__aeabi_dsub+0xf2>
    9700:	e103      	b.n	990a <__aeabi_dsub+0x2fa>
    9702:	2e1f      	cmp	r6, #31
    9704:	dd00      	ble.n	9708 <__aeabi_dsub+0xf8>
    9706:	e13f      	b.n	9988 <__aeabi_dsub+0x378>
    9708:	2020      	movs	r0, #32
    970a:	1b83      	subs	r3, r0, r6
    970c:	4699      	mov	r9, r3
    970e:	1c13      	adds	r3, r2, #0
    9710:	4649      	mov	r1, r9
    9712:	408b      	lsls	r3, r1
    9714:	469c      	mov	ip, r3
    9716:	9b01      	ldr	r3, [sp, #4]
    9718:	4660      	mov	r0, ip
    971a:	40f3      	lsrs	r3, r6
    971c:	4303      	orrs	r3, r0
    971e:	9801      	ldr	r0, [sp, #4]
    9720:	40f2      	lsrs	r2, r6
    9722:	4088      	lsls	r0, r1
    9724:	1c01      	adds	r1, r0, #0
    9726:	1e48      	subs	r0, r1, #1
    9728:	4181      	sbcs	r1, r0
    972a:	430b      	orrs	r3, r1
    972c:	1aeb      	subs	r3, r5, r3
    972e:	429d      	cmp	r5, r3
    9730:	4180      	sbcs	r0, r0
    9732:	1c1d      	adds	r5, r3, #0
    9734:	1aba      	subs	r2, r7, r2
    9736:	4240      	negs	r0, r0
    9738:	1a17      	subs	r7, r2, r0
    973a:	023b      	lsls	r3, r7, #8
    973c:	d400      	bmi.n	9740 <__aeabi_dsub+0x130>
    973e:	e0a8      	b.n	9892 <__aeabi_dsub+0x282>
    9740:	027a      	lsls	r2, r7, #9
    9742:	0a56      	lsrs	r6, r2, #9
    9744:	2e00      	cmp	r6, #0
    9746:	d100      	bne.n	974a <__aeabi_dsub+0x13a>
    9748:	e0ca      	b.n	98e0 <__aeabi_dsub+0x2d0>
    974a:	1c30      	adds	r0, r6, #0
    974c:	f7fe f8d2 	bl	78f4 <__clzsi2>
    9750:	1c03      	adds	r3, r0, #0
    9752:	3b08      	subs	r3, #8
    9754:	2b1f      	cmp	r3, #31
    9756:	dd00      	ble.n	975a <__aeabi_dsub+0x14a>
    9758:	e0cb      	b.n	98f2 <__aeabi_dsub+0x2e2>
    975a:	2228      	movs	r2, #40	; 0x28
    975c:	1c29      	adds	r1, r5, #0
    975e:	1a12      	subs	r2, r2, r0
    9760:	40d1      	lsrs	r1, r2
    9762:	409e      	lsls	r6, r3
    9764:	1c0a      	adds	r2, r1, #0
    9766:	409d      	lsls	r5, r3
    9768:	4332      	orrs	r2, r6
    976a:	429c      	cmp	r4, r3
    976c:	dd00      	ble.n	9770 <__aeabi_dsub+0x160>
    976e:	e0c8      	b.n	9902 <__aeabi_dsub+0x2f2>
    9770:	1b1c      	subs	r4, r3, r4
    9772:	1c67      	adds	r7, r4, #1
    9774:	2f1f      	cmp	r7, #31
    9776:	dd00      	ble.n	977a <__aeabi_dsub+0x16a>
    9778:	e0ed      	b.n	9956 <__aeabi_dsub+0x346>
    977a:	231f      	movs	r3, #31
    977c:	1c29      	adds	r1, r5, #0
    977e:	1b1c      	subs	r4, r3, r4
    9780:	1c13      	adds	r3, r2, #0
    9782:	40a5      	lsls	r5, r4
    9784:	40a3      	lsls	r3, r4
    9786:	40f9      	lsrs	r1, r7
    9788:	1e6c      	subs	r4, r5, #1
    978a:	41a5      	sbcs	r5, r4
    978c:	40fa      	lsrs	r2, r7
    978e:	4319      	orrs	r1, r3
    9790:	430d      	orrs	r5, r1
    9792:	1c17      	adds	r7, r2, #0
    9794:	2400      	movs	r4, #0
    9796:	e76d      	b.n	9674 <__aeabi_dsub+0x64>
    9798:	2380      	movs	r3, #128	; 0x80
    979a:	2601      	movs	r6, #1
    979c:	4642      	mov	r2, r8
    979e:	041b      	lsls	r3, r3, #16
    97a0:	403b      	ands	r3, r7
    97a2:	4016      	ands	r6, r2
    97a4:	2b00      	cmp	r3, #0
    97a6:	d000      	beq.n	97aa <__aeabi_dsub+0x19a>
    97a8:	e77b      	b.n	96a2 <__aeabi_dsub+0x92>
    97aa:	4b74      	ldr	r3, [pc, #464]	; (997c <__aeabi_dsub+0x36c>)
    97ac:	08ed      	lsrs	r5, r5, #3
    97ae:	0778      	lsls	r0, r7, #29
    97b0:	4305      	orrs	r5, r0
    97b2:	08fa      	lsrs	r2, r7, #3
    97b4:	429c      	cmp	r4, r3
    97b6:	d03b      	beq.n	9830 <__aeabi_dsub+0x220>
    97b8:	0312      	lsls	r2, r2, #12
    97ba:	0564      	lsls	r4, r4, #21
    97bc:	0b12      	lsrs	r2, r2, #12
    97be:	0d64      	lsrs	r4, r4, #21
    97c0:	e77e      	b.n	96c0 <__aeabi_dsub+0xb0>
    97c2:	1a23      	subs	r3, r4, r0
    97c4:	469a      	mov	sl, r3
    97c6:	2b00      	cmp	r3, #0
    97c8:	dc00      	bgt.n	97cc <__aeabi_dsub+0x1bc>
    97ca:	e0a5      	b.n	9918 <__aeabi_dsub+0x308>
    97cc:	2800      	cmp	r0, #0
    97ce:	d044      	beq.n	985a <__aeabi_dsub+0x24a>
    97d0:	486a      	ldr	r0, [pc, #424]	; (997c <__aeabi_dsub+0x36c>)
    97d2:	4284      	cmp	r4, r0
    97d4:	d100      	bne.n	97d8 <__aeabi_dsub+0x1c8>
    97d6:	e74d      	b.n	9674 <__aeabi_dsub+0x64>
    97d8:	2080      	movs	r0, #128	; 0x80
    97da:	0400      	lsls	r0, r0, #16
    97dc:	4302      	orrs	r2, r0
    97de:	4653      	mov	r3, sl
    97e0:	2b38      	cmp	r3, #56	; 0x38
    97e2:	dc00      	bgt.n	97e6 <__aeabi_dsub+0x1d6>
    97e4:	e11c      	b.n	9a20 <__aeabi_dsub+0x410>
    97e6:	9b01      	ldr	r3, [sp, #4]
    97e8:	431a      	orrs	r2, r3
    97ea:	1e51      	subs	r1, r2, #1
    97ec:	418a      	sbcs	r2, r1
    97ee:	b2d1      	uxtb	r1, r2
    97f0:	2200      	movs	r2, #0
    97f2:	1949      	adds	r1, r1, r5
    97f4:	42a9      	cmp	r1, r5
    97f6:	4180      	sbcs	r0, r0
    97f8:	1c0d      	adds	r5, r1, #0
    97fa:	19d2      	adds	r2, r2, r7
    97fc:	4240      	negs	r0, r0
    97fe:	1817      	adds	r7, r2, r0
    9800:	023b      	lsls	r3, r7, #8
    9802:	d546      	bpl.n	9892 <__aeabi_dsub+0x282>
    9804:	4b5d      	ldr	r3, [pc, #372]	; (997c <__aeabi_dsub+0x36c>)
    9806:	3401      	adds	r4, #1
    9808:	429c      	cmp	r4, r3
    980a:	d100      	bne.n	980e <__aeabi_dsub+0x1fe>
    980c:	e169      	b.n	9ae2 <__aeabi_dsub+0x4d2>
    980e:	2001      	movs	r0, #1
    9810:	4a5b      	ldr	r2, [pc, #364]	; (9980 <__aeabi_dsub+0x370>)
    9812:	086b      	lsrs	r3, r5, #1
    9814:	403a      	ands	r2, r7
    9816:	4028      	ands	r0, r5
    9818:	4318      	orrs	r0, r3
    981a:	07d5      	lsls	r5, r2, #31
    981c:	4305      	orrs	r5, r0
    981e:	0857      	lsrs	r7, r2, #1
    9820:	e728      	b.n	9674 <__aeabi_dsub+0x64>
    9822:	1c13      	adds	r3, r2, #0
    9824:	9901      	ldr	r1, [sp, #4]
    9826:	430b      	orrs	r3, r1
    9828:	d100      	bne.n	982c <__aeabi_dsub+0x21c>
    982a:	e711      	b.n	9650 <__aeabi_dsub+0x40>
    982c:	464b      	mov	r3, r9
    982e:	e713      	b.n	9658 <__aeabi_dsub+0x48>
    9830:	1c2b      	adds	r3, r5, #0
    9832:	4313      	orrs	r3, r2
    9834:	d051      	beq.n	98da <__aeabi_dsub+0x2ca>
    9836:	2380      	movs	r3, #128	; 0x80
    9838:	031b      	lsls	r3, r3, #12
    983a:	431a      	orrs	r2, r3
    983c:	0312      	lsls	r2, r2, #12
    983e:	0b12      	lsrs	r2, r2, #12
    9840:	e73e      	b.n	96c0 <__aeabi_dsub+0xb0>
    9842:	3e01      	subs	r6, #1
    9844:	2e00      	cmp	r6, #0
    9846:	d000      	beq.n	984a <__aeabi_dsub+0x23a>
    9848:	e080      	b.n	994c <__aeabi_dsub+0x33c>
    984a:	1a69      	subs	r1, r5, r1
    984c:	428d      	cmp	r5, r1
    984e:	419b      	sbcs	r3, r3
    9850:	1aba      	subs	r2, r7, r2
    9852:	425b      	negs	r3, r3
    9854:	1ad7      	subs	r7, r2, r3
    9856:	1c0d      	adds	r5, r1, #0
    9858:	e76f      	b.n	973a <__aeabi_dsub+0x12a>
    985a:	1c10      	adds	r0, r2, #0
    985c:	9b01      	ldr	r3, [sp, #4]
    985e:	4318      	orrs	r0, r3
    9860:	d100      	bne.n	9864 <__aeabi_dsub+0x254>
    9862:	e707      	b.n	9674 <__aeabi_dsub+0x64>
    9864:	2301      	movs	r3, #1
    9866:	425b      	negs	r3, r3
    9868:	469c      	mov	ip, r3
    986a:	44e2      	add	sl, ip
    986c:	4653      	mov	r3, sl
    986e:	2b00      	cmp	r3, #0
    9870:	d000      	beq.n	9874 <__aeabi_dsub+0x264>
    9872:	e102      	b.n	9a7a <__aeabi_dsub+0x46a>
    9874:	9b01      	ldr	r3, [sp, #4]
    9876:	19d2      	adds	r2, r2, r7
    9878:	1959      	adds	r1, r3, r5
    987a:	42a9      	cmp	r1, r5
    987c:	419b      	sbcs	r3, r3
    987e:	425b      	negs	r3, r3
    9880:	18d7      	adds	r7, r2, r3
    9882:	1c0d      	adds	r5, r1, #0
    9884:	e7bc      	b.n	9800 <__aeabi_dsub+0x1f0>
    9886:	4663      	mov	r3, ip
    9888:	4303      	orrs	r3, r0
    988a:	d100      	bne.n	988e <__aeabi_dsub+0x27e>
    988c:	e128      	b.n	9ae0 <__aeabi_dsub+0x4d0>
    988e:	1c07      	adds	r7, r0, #0
    9890:	4665      	mov	r5, ip
    9892:	076b      	lsls	r3, r5, #29
    9894:	d000      	beq.n	9898 <__aeabi_dsub+0x288>
    9896:	e6f0      	b.n	967a <__aeabi_dsub+0x6a>
    9898:	2601      	movs	r6, #1
    989a:	4643      	mov	r3, r8
    989c:	401e      	ands	r6, r3
    989e:	e784      	b.n	97aa <__aeabi_dsub+0x19a>
    98a0:	2e00      	cmp	r6, #0
    98a2:	d000      	beq.n	98a6 <__aeabi_dsub+0x296>
    98a4:	e081      	b.n	99aa <__aeabi_dsub+0x39a>
    98a6:	1c60      	adds	r0, r4, #1
    98a8:	0540      	lsls	r0, r0, #21
    98aa:	0d40      	lsrs	r0, r0, #21
    98ac:	2801      	cmp	r0, #1
    98ae:	dc00      	bgt.n	98b2 <__aeabi_dsub+0x2a2>
    98b0:	e107      	b.n	9ac2 <__aeabi_dsub+0x4b2>
    98b2:	9901      	ldr	r1, [sp, #4]
    98b4:	1a68      	subs	r0, r5, r1
    98b6:	4684      	mov	ip, r0
    98b8:	4565      	cmp	r5, ip
    98ba:	41b6      	sbcs	r6, r6
    98bc:	1ab8      	subs	r0, r7, r2
    98be:	4276      	negs	r6, r6
    98c0:	1b86      	subs	r6, r0, r6
    98c2:	0230      	lsls	r0, r6, #8
    98c4:	d400      	bmi.n	98c8 <__aeabi_dsub+0x2b8>
    98c6:	e0a1      	b.n	9a0c <__aeabi_dsub+0x3fc>
    98c8:	468c      	mov	ip, r1
    98ca:	1b4d      	subs	r5, r1, r5
    98cc:	45ac      	cmp	ip, r5
    98ce:	4189      	sbcs	r1, r1
    98d0:	1bd2      	subs	r2, r2, r7
    98d2:	4249      	negs	r1, r1
    98d4:	1a56      	subs	r6, r2, r1
    98d6:	4698      	mov	r8, r3
    98d8:	e734      	b.n	9744 <__aeabi_dsub+0x134>
    98da:	2200      	movs	r2, #0
    98dc:	2500      	movs	r5, #0
    98de:	e6ef      	b.n	96c0 <__aeabi_dsub+0xb0>
    98e0:	1c28      	adds	r0, r5, #0
    98e2:	f7fe f807 	bl	78f4 <__clzsi2>
    98e6:	3020      	adds	r0, #32
    98e8:	1c03      	adds	r3, r0, #0
    98ea:	3b08      	subs	r3, #8
    98ec:	2b1f      	cmp	r3, #31
    98ee:	dc00      	bgt.n	98f2 <__aeabi_dsub+0x2e2>
    98f0:	e733      	b.n	975a <__aeabi_dsub+0x14a>
    98f2:	1c02      	adds	r2, r0, #0
    98f4:	3a28      	subs	r2, #40	; 0x28
    98f6:	4095      	lsls	r5, r2
    98f8:	1c2a      	adds	r2, r5, #0
    98fa:	2500      	movs	r5, #0
    98fc:	429c      	cmp	r4, r3
    98fe:	dc00      	bgt.n	9902 <__aeabi_dsub+0x2f2>
    9900:	e736      	b.n	9770 <__aeabi_dsub+0x160>
    9902:	4f1f      	ldr	r7, [pc, #124]	; (9980 <__aeabi_dsub+0x370>)
    9904:	1ae4      	subs	r4, r4, r3
    9906:	4017      	ands	r7, r2
    9908:	e6b4      	b.n	9674 <__aeabi_dsub+0x64>
    990a:	9b01      	ldr	r3, [sp, #4]
    990c:	431a      	orrs	r2, r3
    990e:	1e51      	subs	r1, r2, #1
    9910:	418a      	sbcs	r2, r1
    9912:	b2d3      	uxtb	r3, r2
    9914:	2200      	movs	r2, #0
    9916:	e709      	b.n	972c <__aeabi_dsub+0x11c>
    9918:	2b00      	cmp	r3, #0
    991a:	d000      	beq.n	991e <__aeabi_dsub+0x30e>
    991c:	e101      	b.n	9b22 <__aeabi_dsub+0x512>
    991e:	1c60      	adds	r0, r4, #1
    9920:	0543      	lsls	r3, r0, #21
    9922:	0d5b      	lsrs	r3, r3, #21
    9924:	2b01      	cmp	r3, #1
    9926:	dc00      	bgt.n	992a <__aeabi_dsub+0x31a>
    9928:	e0b0      	b.n	9a8c <__aeabi_dsub+0x47c>
    992a:	4b14      	ldr	r3, [pc, #80]	; (997c <__aeabi_dsub+0x36c>)
    992c:	4298      	cmp	r0, r3
    992e:	d100      	bne.n	9932 <__aeabi_dsub+0x322>
    9930:	e11e      	b.n	9b70 <__aeabi_dsub+0x560>
    9932:	9b01      	ldr	r3, [sp, #4]
    9934:	19d2      	adds	r2, r2, r7
    9936:	1959      	adds	r1, r3, r5
    9938:	42a9      	cmp	r1, r5
    993a:	419b      	sbcs	r3, r3
    993c:	425b      	negs	r3, r3
    993e:	18d2      	adds	r2, r2, r3
    9940:	0849      	lsrs	r1, r1, #1
    9942:	07d5      	lsls	r5, r2, #31
    9944:	430d      	orrs	r5, r1
    9946:	0857      	lsrs	r7, r2, #1
    9948:	1c04      	adds	r4, r0, #0
    994a:	e693      	b.n	9674 <__aeabi_dsub+0x64>
    994c:	4b0b      	ldr	r3, [pc, #44]	; (997c <__aeabi_dsub+0x36c>)
    994e:	429c      	cmp	r4, r3
    9950:	d000      	beq.n	9954 <__aeabi_dsub+0x344>
    9952:	e6d3      	b.n	96fc <__aeabi_dsub+0xec>
    9954:	e68e      	b.n	9674 <__aeabi_dsub+0x64>
    9956:	1c21      	adds	r1, r4, #0
    9958:	1c13      	adds	r3, r2, #0
    995a:	391f      	subs	r1, #31
    995c:	40cb      	lsrs	r3, r1
    995e:	1c19      	adds	r1, r3, #0
    9960:	2f20      	cmp	r7, #32
    9962:	d100      	bne.n	9966 <__aeabi_dsub+0x356>
    9964:	e08e      	b.n	9a84 <__aeabi_dsub+0x474>
    9966:	233f      	movs	r3, #63	; 0x3f
    9968:	1b1c      	subs	r4, r3, r4
    996a:	40a2      	lsls	r2, r4
    996c:	4315      	orrs	r5, r2
    996e:	1e6a      	subs	r2, r5, #1
    9970:	4195      	sbcs	r5, r2
    9972:	2700      	movs	r7, #0
    9974:	430d      	orrs	r5, r1
    9976:	2400      	movs	r4, #0
    9978:	e78b      	b.n	9892 <__aeabi_dsub+0x282>
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	000007ff 	.word	0x000007ff
    9980:	ff7fffff 	.word	0xff7fffff
    9984:	800fffff 	.word	0x800fffff
    9988:	1c33      	adds	r3, r6, #0
    998a:	1c10      	adds	r0, r2, #0
    998c:	3b20      	subs	r3, #32
    998e:	40d8      	lsrs	r0, r3
    9990:	2e20      	cmp	r6, #32
    9992:	d079      	beq.n	9a88 <__aeabi_dsub+0x478>
    9994:	2340      	movs	r3, #64	; 0x40
    9996:	1b9b      	subs	r3, r3, r6
    9998:	409a      	lsls	r2, r3
    999a:	1c13      	adds	r3, r2, #0
    999c:	9a01      	ldr	r2, [sp, #4]
    999e:	4313      	orrs	r3, r2
    99a0:	1e59      	subs	r1, r3, #1
    99a2:	418b      	sbcs	r3, r1
    99a4:	2200      	movs	r2, #0
    99a6:	4303      	orrs	r3, r0
    99a8:	e6c0      	b.n	972c <__aeabi_dsub+0x11c>
    99aa:	2c00      	cmp	r4, #0
    99ac:	d053      	beq.n	9a56 <__aeabi_dsub+0x446>
    99ae:	4cc7      	ldr	r4, [pc, #796]	; (9ccc <__aeabi_dsub+0x6bc>)
    99b0:	42a0      	cmp	r0, r4
    99b2:	d100      	bne.n	99b6 <__aeabi_dsub+0x3a6>
    99b4:	e0b0      	b.n	9b18 <__aeabi_dsub+0x508>
    99b6:	2480      	movs	r4, #128	; 0x80
    99b8:	4271      	negs	r1, r6
    99ba:	4689      	mov	r9, r1
    99bc:	0424      	lsls	r4, r4, #16
    99be:	4327      	orrs	r7, r4
    99c0:	4649      	mov	r1, r9
    99c2:	2938      	cmp	r1, #56	; 0x38
    99c4:	dd00      	ble.n	99c8 <__aeabi_dsub+0x3b8>
    99c6:	e0cd      	b.n	9b64 <__aeabi_dsub+0x554>
    99c8:	291f      	cmp	r1, #31
    99ca:	dd00      	ble.n	99ce <__aeabi_dsub+0x3be>
    99cc:	e159      	b.n	9c82 <__aeabi_dsub+0x672>
    99ce:	2420      	movs	r4, #32
    99d0:	1c3e      	adds	r6, r7, #0
    99d2:	1a61      	subs	r1, r4, r1
    99d4:	408e      	lsls	r6, r1
    99d6:	468a      	mov	sl, r1
    99d8:	46b0      	mov	r8, r6
    99da:	4649      	mov	r1, r9
    99dc:	1c2e      	adds	r6, r5, #0
    99de:	40ce      	lsrs	r6, r1
    99e0:	4651      	mov	r1, sl
    99e2:	46b4      	mov	ip, r6
    99e4:	408d      	lsls	r5, r1
    99e6:	4664      	mov	r4, ip
    99e8:	4646      	mov	r6, r8
    99ea:	4649      	mov	r1, r9
    99ec:	4326      	orrs	r6, r4
    99ee:	1e6c      	subs	r4, r5, #1
    99f0:	41a5      	sbcs	r5, r4
    99f2:	40cf      	lsrs	r7, r1
    99f4:	4335      	orrs	r5, r6
    99f6:	9901      	ldr	r1, [sp, #4]
    99f8:	1bd7      	subs	r7, r2, r7
    99fa:	468c      	mov	ip, r1
    99fc:	1b4d      	subs	r5, r1, r5
    99fe:	45ac      	cmp	ip, r5
    9a00:	4192      	sbcs	r2, r2
    9a02:	4252      	negs	r2, r2
    9a04:	1abf      	subs	r7, r7, r2
    9a06:	1c04      	adds	r4, r0, #0
    9a08:	4698      	mov	r8, r3
    9a0a:	e696      	b.n	973a <__aeabi_dsub+0x12a>
    9a0c:	4663      	mov	r3, ip
    9a0e:	4665      	mov	r5, ip
    9a10:	4333      	orrs	r3, r6
    9a12:	d000      	beq.n	9a16 <__aeabi_dsub+0x406>
    9a14:	e696      	b.n	9744 <__aeabi_dsub+0x134>
    9a16:	2600      	movs	r6, #0
    9a18:	2700      	movs	r7, #0
    9a1a:	2400      	movs	r4, #0
    9a1c:	2500      	movs	r5, #0
    9a1e:	e6c4      	b.n	97aa <__aeabi_dsub+0x19a>
    9a20:	2b1f      	cmp	r3, #31
    9a22:	dc61      	bgt.n	9ae8 <__aeabi_dsub+0x4d8>
    9a24:	2020      	movs	r0, #32
    9a26:	1ac3      	subs	r3, r0, r3
    9a28:	469b      	mov	fp, r3
    9a2a:	1c13      	adds	r3, r2, #0
    9a2c:	4659      	mov	r1, fp
    9a2e:	408b      	lsls	r3, r1
    9a30:	4651      	mov	r1, sl
    9a32:	4699      	mov	r9, r3
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	40cb      	lsrs	r3, r1
    9a38:	469c      	mov	ip, r3
    9a3a:	464b      	mov	r3, r9
    9a3c:	4660      	mov	r0, ip
    9a3e:	4303      	orrs	r3, r0
    9a40:	469c      	mov	ip, r3
    9a42:	465b      	mov	r3, fp
    9a44:	9901      	ldr	r1, [sp, #4]
    9a46:	4099      	lsls	r1, r3
    9a48:	4663      	mov	r3, ip
    9a4a:	1e48      	subs	r0, r1, #1
    9a4c:	4181      	sbcs	r1, r0
    9a4e:	4319      	orrs	r1, r3
    9a50:	4653      	mov	r3, sl
    9a52:	40da      	lsrs	r2, r3
    9a54:	e6cd      	b.n	97f2 <__aeabi_dsub+0x1e2>
    9a56:	1c3c      	adds	r4, r7, #0
    9a58:	432c      	orrs	r4, r5
    9a5a:	d05d      	beq.n	9b18 <__aeabi_dsub+0x508>
    9a5c:	43f1      	mvns	r1, r6
    9a5e:	4689      	mov	r9, r1
    9a60:	2900      	cmp	r1, #0
    9a62:	d155      	bne.n	9b10 <__aeabi_dsub+0x500>
    9a64:	9901      	ldr	r1, [sp, #4]
    9a66:	1bd2      	subs	r2, r2, r7
    9a68:	468c      	mov	ip, r1
    9a6a:	1b4d      	subs	r5, r1, r5
    9a6c:	45ac      	cmp	ip, r5
    9a6e:	4189      	sbcs	r1, r1
    9a70:	4249      	negs	r1, r1
    9a72:	1a57      	subs	r7, r2, r1
    9a74:	1c04      	adds	r4, r0, #0
    9a76:	4698      	mov	r8, r3
    9a78:	e65f      	b.n	973a <__aeabi_dsub+0x12a>
    9a7a:	4894      	ldr	r0, [pc, #592]	; (9ccc <__aeabi_dsub+0x6bc>)
    9a7c:	4284      	cmp	r4, r0
    9a7e:	d000      	beq.n	9a82 <__aeabi_dsub+0x472>
    9a80:	e6ad      	b.n	97de <__aeabi_dsub+0x1ce>
    9a82:	e5f7      	b.n	9674 <__aeabi_dsub+0x64>
    9a84:	2200      	movs	r2, #0
    9a86:	e771      	b.n	996c <__aeabi_dsub+0x35c>
    9a88:	2300      	movs	r3, #0
    9a8a:	e787      	b.n	999c <__aeabi_dsub+0x38c>
    9a8c:	1c3b      	adds	r3, r7, #0
    9a8e:	432b      	orrs	r3, r5
    9a90:	2c00      	cmp	r4, #0
    9a92:	d000      	beq.n	9a96 <__aeabi_dsub+0x486>
    9a94:	e0da      	b.n	9c4c <__aeabi_dsub+0x63c>
    9a96:	2b00      	cmp	r3, #0
    9a98:	d100      	bne.n	9a9c <__aeabi_dsub+0x48c>
    9a9a:	e113      	b.n	9cc4 <__aeabi_dsub+0x6b4>
    9a9c:	1c13      	adds	r3, r2, #0
    9a9e:	9901      	ldr	r1, [sp, #4]
    9aa0:	430b      	orrs	r3, r1
    9aa2:	d100      	bne.n	9aa6 <__aeabi_dsub+0x496>
    9aa4:	e5e6      	b.n	9674 <__aeabi_dsub+0x64>
    9aa6:	1949      	adds	r1, r1, r5
    9aa8:	42a9      	cmp	r1, r5
    9aaa:	419b      	sbcs	r3, r3
    9aac:	19d2      	adds	r2, r2, r7
    9aae:	425b      	negs	r3, r3
    9ab0:	18d7      	adds	r7, r2, r3
    9ab2:	023b      	lsls	r3, r7, #8
    9ab4:	d400      	bmi.n	9ab8 <__aeabi_dsub+0x4a8>
    9ab6:	e121      	b.n	9cfc <__aeabi_dsub+0x6ec>
    9ab8:	4b85      	ldr	r3, [pc, #532]	; (9cd0 <__aeabi_dsub+0x6c0>)
    9aba:	1c0d      	adds	r5, r1, #0
    9abc:	401f      	ands	r7, r3
    9abe:	1c04      	adds	r4, r0, #0
    9ac0:	e5d8      	b.n	9674 <__aeabi_dsub+0x64>
    9ac2:	1c38      	adds	r0, r7, #0
    9ac4:	4328      	orrs	r0, r5
    9ac6:	2c00      	cmp	r4, #0
    9ac8:	d140      	bne.n	9b4c <__aeabi_dsub+0x53c>
    9aca:	2800      	cmp	r0, #0
    9acc:	d000      	beq.n	9ad0 <__aeabi_dsub+0x4c0>
    9ace:	e083      	b.n	9bd8 <__aeabi_dsub+0x5c8>
    9ad0:	1c10      	adds	r0, r2, #0
    9ad2:	9901      	ldr	r1, [sp, #4]
    9ad4:	4308      	orrs	r0, r1
    9ad6:	d003      	beq.n	9ae0 <__aeabi_dsub+0x4d0>
    9ad8:	1c17      	adds	r7, r2, #0
    9ada:	1c0d      	adds	r5, r1, #0
    9adc:	4698      	mov	r8, r3
    9ade:	e5c9      	b.n	9674 <__aeabi_dsub+0x64>
    9ae0:	2600      	movs	r6, #0
    9ae2:	2700      	movs	r7, #0
    9ae4:	2500      	movs	r5, #0
    9ae6:	e660      	b.n	97aa <__aeabi_dsub+0x19a>
    9ae8:	4650      	mov	r0, sl
    9aea:	1c13      	adds	r3, r2, #0
    9aec:	3820      	subs	r0, #32
    9aee:	40c3      	lsrs	r3, r0
    9af0:	1c18      	adds	r0, r3, #0
    9af2:	4653      	mov	r3, sl
    9af4:	2b20      	cmp	r3, #32
    9af6:	d100      	bne.n	9afa <__aeabi_dsub+0x4ea>
    9af8:	e0c1      	b.n	9c7e <__aeabi_dsub+0x66e>
    9afa:	2340      	movs	r3, #64	; 0x40
    9afc:	4651      	mov	r1, sl
    9afe:	1a5b      	subs	r3, r3, r1
    9b00:	409a      	lsls	r2, r3
    9b02:	9901      	ldr	r1, [sp, #4]
    9b04:	4311      	orrs	r1, r2
    9b06:	1e4a      	subs	r2, r1, #1
    9b08:	4191      	sbcs	r1, r2
    9b0a:	2200      	movs	r2, #0
    9b0c:	4301      	orrs	r1, r0
    9b0e:	e670      	b.n	97f2 <__aeabi_dsub+0x1e2>
    9b10:	4c6e      	ldr	r4, [pc, #440]	; (9ccc <__aeabi_dsub+0x6bc>)
    9b12:	42a0      	cmp	r0, r4
    9b14:	d000      	beq.n	9b18 <__aeabi_dsub+0x508>
    9b16:	e753      	b.n	99c0 <__aeabi_dsub+0x3b0>
    9b18:	1c17      	adds	r7, r2, #0
    9b1a:	9d01      	ldr	r5, [sp, #4]
    9b1c:	1c04      	adds	r4, r0, #0
    9b1e:	4698      	mov	r8, r3
    9b20:	e5a8      	b.n	9674 <__aeabi_dsub+0x64>
    9b22:	2c00      	cmp	r4, #0
    9b24:	d128      	bne.n	9b78 <__aeabi_dsub+0x568>
    9b26:	1c3c      	adds	r4, r7, #0
    9b28:	432c      	orrs	r4, r5
    9b2a:	d100      	bne.n	9b2e <__aeabi_dsub+0x51e>
    9b2c:	e08a      	b.n	9c44 <__aeabi_dsub+0x634>
    9b2e:	43db      	mvns	r3, r3
    9b30:	469a      	mov	sl, r3
    9b32:	2b00      	cmp	r3, #0
    9b34:	d000      	beq.n	9b38 <__aeabi_dsub+0x528>
    9b36:	e082      	b.n	9c3e <__aeabi_dsub+0x62e>
    9b38:	9b01      	ldr	r3, [sp, #4]
    9b3a:	19d2      	adds	r2, r2, r7
    9b3c:	469c      	mov	ip, r3
    9b3e:	4465      	add	r5, ip
    9b40:	429d      	cmp	r5, r3
    9b42:	4189      	sbcs	r1, r1
    9b44:	4249      	negs	r1, r1
    9b46:	1857      	adds	r7, r2, r1
    9b48:	1c04      	adds	r4, r0, #0
    9b4a:	e659      	b.n	9800 <__aeabi_dsub+0x1f0>
    9b4c:	2800      	cmp	r0, #0
    9b4e:	d15b      	bne.n	9c08 <__aeabi_dsub+0x5f8>
    9b50:	1c10      	adds	r0, r2, #0
    9b52:	9901      	ldr	r1, [sp, #4]
    9b54:	4308      	orrs	r0, r1
    9b56:	d100      	bne.n	9b5a <__aeabi_dsub+0x54a>
    9b58:	e0a4      	b.n	9ca4 <__aeabi_dsub+0x694>
    9b5a:	1c17      	adds	r7, r2, #0
    9b5c:	1c0d      	adds	r5, r1, #0
    9b5e:	4698      	mov	r8, r3
    9b60:	4c5a      	ldr	r4, [pc, #360]	; (9ccc <__aeabi_dsub+0x6bc>)
    9b62:	e587      	b.n	9674 <__aeabi_dsub+0x64>
    9b64:	433d      	orrs	r5, r7
    9b66:	1e6f      	subs	r7, r5, #1
    9b68:	41bd      	sbcs	r5, r7
    9b6a:	2700      	movs	r7, #0
    9b6c:	b2ed      	uxtb	r5, r5
    9b6e:	e742      	b.n	99f6 <__aeabi_dsub+0x3e6>
    9b70:	1c04      	adds	r4, r0, #0
    9b72:	2700      	movs	r7, #0
    9b74:	2500      	movs	r5, #0
    9b76:	e618      	b.n	97aa <__aeabi_dsub+0x19a>
    9b78:	4c54      	ldr	r4, [pc, #336]	; (9ccc <__aeabi_dsub+0x6bc>)
    9b7a:	42a0      	cmp	r0, r4
    9b7c:	d062      	beq.n	9c44 <__aeabi_dsub+0x634>
    9b7e:	4653      	mov	r3, sl
    9b80:	2480      	movs	r4, #128	; 0x80
    9b82:	425b      	negs	r3, r3
    9b84:	469a      	mov	sl, r3
    9b86:	0424      	lsls	r4, r4, #16
    9b88:	4327      	orrs	r7, r4
    9b8a:	4653      	mov	r3, sl
    9b8c:	2b38      	cmp	r3, #56	; 0x38
    9b8e:	dd00      	ble.n	9b92 <__aeabi_dsub+0x582>
    9b90:	e08e      	b.n	9cb0 <__aeabi_dsub+0x6a0>
    9b92:	2b1f      	cmp	r3, #31
    9b94:	dd00      	ble.n	9b98 <__aeabi_dsub+0x588>
    9b96:	e09d      	b.n	9cd4 <__aeabi_dsub+0x6c4>
    9b98:	2420      	movs	r4, #32
    9b9a:	1ae3      	subs	r3, r4, r3
    9b9c:	469b      	mov	fp, r3
    9b9e:	1c3b      	adds	r3, r7, #0
    9ba0:	4659      	mov	r1, fp
    9ba2:	408b      	lsls	r3, r1
    9ba4:	4651      	mov	r1, sl
    9ba6:	4699      	mov	r9, r3
    9ba8:	1c2b      	adds	r3, r5, #0
    9baa:	40cb      	lsrs	r3, r1
    9bac:	469c      	mov	ip, r3
    9bae:	464b      	mov	r3, r9
    9bb0:	4664      	mov	r4, ip
    9bb2:	4323      	orrs	r3, r4
    9bb4:	469c      	mov	ip, r3
    9bb6:	465b      	mov	r3, fp
    9bb8:	409d      	lsls	r5, r3
    9bba:	4663      	mov	r3, ip
    9bbc:	1e6c      	subs	r4, r5, #1
    9bbe:	41a5      	sbcs	r5, r4
    9bc0:	40cf      	lsrs	r7, r1
    9bc2:	431d      	orrs	r5, r3
    9bc4:	9b01      	ldr	r3, [sp, #4]
    9bc6:	18bf      	adds	r7, r7, r2
    9bc8:	469c      	mov	ip, r3
    9bca:	4465      	add	r5, ip
    9bcc:	429d      	cmp	r5, r3
    9bce:	4192      	sbcs	r2, r2
    9bd0:	4252      	negs	r2, r2
    9bd2:	18bf      	adds	r7, r7, r2
    9bd4:	1c04      	adds	r4, r0, #0
    9bd6:	e613      	b.n	9800 <__aeabi_dsub+0x1f0>
    9bd8:	1c10      	adds	r0, r2, #0
    9bda:	9901      	ldr	r1, [sp, #4]
    9bdc:	4308      	orrs	r0, r1
    9bde:	d100      	bne.n	9be2 <__aeabi_dsub+0x5d2>
    9be0:	e548      	b.n	9674 <__aeabi_dsub+0x64>
    9be2:	1a68      	subs	r0, r5, r1
    9be4:	4684      	mov	ip, r0
    9be6:	4285      	cmp	r5, r0
    9be8:	4180      	sbcs	r0, r0
    9bea:	1abe      	subs	r6, r7, r2
    9bec:	4240      	negs	r0, r0
    9bee:	1a30      	subs	r0, r6, r0
    9bf0:	0206      	lsls	r6, r0, #8
    9bf2:	d400      	bmi.n	9bf6 <__aeabi_dsub+0x5e6>
    9bf4:	e647      	b.n	9886 <__aeabi_dsub+0x276>
    9bf6:	468c      	mov	ip, r1
    9bf8:	1b4d      	subs	r5, r1, r5
    9bfa:	45ac      	cmp	ip, r5
    9bfc:	4189      	sbcs	r1, r1
    9bfe:	1bd2      	subs	r2, r2, r7
    9c00:	4249      	negs	r1, r1
    9c02:	1a57      	subs	r7, r2, r1
    9c04:	4698      	mov	r8, r3
    9c06:	e535      	b.n	9674 <__aeabi_dsub+0x64>
    9c08:	1c10      	adds	r0, r2, #0
    9c0a:	9901      	ldr	r1, [sp, #4]
    9c0c:	4308      	orrs	r0, r1
    9c0e:	d034      	beq.n	9c7a <__aeabi_dsub+0x66a>
    9c10:	2480      	movs	r4, #128	; 0x80
    9c12:	0778      	lsls	r0, r7, #29
    9c14:	08ed      	lsrs	r5, r5, #3
    9c16:	08ff      	lsrs	r7, r7, #3
    9c18:	0324      	lsls	r4, r4, #12
    9c1a:	4328      	orrs	r0, r5
    9c1c:	4227      	tst	r7, r4
    9c1e:	d008      	beq.n	9c32 <__aeabi_dsub+0x622>
    9c20:	08d6      	lsrs	r6, r2, #3
    9c22:	4226      	tst	r6, r4
    9c24:	d105      	bne.n	9c32 <__aeabi_dsub+0x622>
    9c26:	08c9      	lsrs	r1, r1, #3
    9c28:	0752      	lsls	r2, r2, #29
    9c2a:	430a      	orrs	r2, r1
    9c2c:	1c10      	adds	r0, r2, #0
    9c2e:	1c37      	adds	r7, r6, #0
    9c30:	4698      	mov	r8, r3
    9c32:	00ff      	lsls	r7, r7, #3
    9c34:	0f42      	lsrs	r2, r0, #29
    9c36:	4317      	orrs	r7, r2
    9c38:	00c5      	lsls	r5, r0, #3
    9c3a:	4c24      	ldr	r4, [pc, #144]	; (9ccc <__aeabi_dsub+0x6bc>)
    9c3c:	e51a      	b.n	9674 <__aeabi_dsub+0x64>
    9c3e:	4c23      	ldr	r4, [pc, #140]	; (9ccc <__aeabi_dsub+0x6bc>)
    9c40:	42a0      	cmp	r0, r4
    9c42:	d1a2      	bne.n	9b8a <__aeabi_dsub+0x57a>
    9c44:	1c17      	adds	r7, r2, #0
    9c46:	9d01      	ldr	r5, [sp, #4]
    9c48:	1c04      	adds	r4, r0, #0
    9c4a:	e513      	b.n	9674 <__aeabi_dsub+0x64>
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d035      	beq.n	9cbc <__aeabi_dsub+0x6ac>
    9c50:	1c13      	adds	r3, r2, #0
    9c52:	9901      	ldr	r1, [sp, #4]
    9c54:	430b      	orrs	r3, r1
    9c56:	d010      	beq.n	9c7a <__aeabi_dsub+0x66a>
    9c58:	2480      	movs	r4, #128	; 0x80
    9c5a:	0778      	lsls	r0, r7, #29
    9c5c:	08ed      	lsrs	r5, r5, #3
    9c5e:	08ff      	lsrs	r7, r7, #3
    9c60:	0324      	lsls	r4, r4, #12
    9c62:	4328      	orrs	r0, r5
    9c64:	4227      	tst	r7, r4
    9c66:	d0e4      	beq.n	9c32 <__aeabi_dsub+0x622>
    9c68:	08d3      	lsrs	r3, r2, #3
    9c6a:	4223      	tst	r3, r4
    9c6c:	d1e1      	bne.n	9c32 <__aeabi_dsub+0x622>
    9c6e:	08c9      	lsrs	r1, r1, #3
    9c70:	0752      	lsls	r2, r2, #29
    9c72:	430a      	orrs	r2, r1
    9c74:	1c10      	adds	r0, r2, #0
    9c76:	1c1f      	adds	r7, r3, #0
    9c78:	e7db      	b.n	9c32 <__aeabi_dsub+0x622>
    9c7a:	4c14      	ldr	r4, [pc, #80]	; (9ccc <__aeabi_dsub+0x6bc>)
    9c7c:	e4fa      	b.n	9674 <__aeabi_dsub+0x64>
    9c7e:	2200      	movs	r2, #0
    9c80:	e73f      	b.n	9b02 <__aeabi_dsub+0x4f2>
    9c82:	464c      	mov	r4, r9
    9c84:	1c3e      	adds	r6, r7, #0
    9c86:	3c20      	subs	r4, #32
    9c88:	40e6      	lsrs	r6, r4
    9c8a:	4649      	mov	r1, r9
    9c8c:	1c34      	adds	r4, r6, #0
    9c8e:	2920      	cmp	r1, #32
    9c90:	d032      	beq.n	9cf8 <__aeabi_dsub+0x6e8>
    9c92:	2640      	movs	r6, #64	; 0x40
    9c94:	1a76      	subs	r6, r6, r1
    9c96:	40b7      	lsls	r7, r6
    9c98:	433d      	orrs	r5, r7
    9c9a:	1e6f      	subs	r7, r5, #1
    9c9c:	41bd      	sbcs	r5, r7
    9c9e:	2700      	movs	r7, #0
    9ca0:	4325      	orrs	r5, r4
    9ca2:	e6a8      	b.n	99f6 <__aeabi_dsub+0x3e6>
    9ca4:	2780      	movs	r7, #128	; 0x80
    9ca6:	2600      	movs	r6, #0
    9ca8:	03ff      	lsls	r7, r7, #15
    9caa:	4c08      	ldr	r4, [pc, #32]	; (9ccc <__aeabi_dsub+0x6bc>)
    9cac:	2500      	movs	r5, #0
    9cae:	e57c      	b.n	97aa <__aeabi_dsub+0x19a>
    9cb0:	433d      	orrs	r5, r7
    9cb2:	1e6f      	subs	r7, r5, #1
    9cb4:	41bd      	sbcs	r5, r7
    9cb6:	2700      	movs	r7, #0
    9cb8:	b2ed      	uxtb	r5, r5
    9cba:	e783      	b.n	9bc4 <__aeabi_dsub+0x5b4>
    9cbc:	1c17      	adds	r7, r2, #0
    9cbe:	9d01      	ldr	r5, [sp, #4]
    9cc0:	4c02      	ldr	r4, [pc, #8]	; (9ccc <__aeabi_dsub+0x6bc>)
    9cc2:	e4d7      	b.n	9674 <__aeabi_dsub+0x64>
    9cc4:	1c17      	adds	r7, r2, #0
    9cc6:	9d01      	ldr	r5, [sp, #4]
    9cc8:	e4d4      	b.n	9674 <__aeabi_dsub+0x64>
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	000007ff 	.word	0x000007ff
    9cd0:	ff7fffff 	.word	0xff7fffff
    9cd4:	4654      	mov	r4, sl
    9cd6:	1c3b      	adds	r3, r7, #0
    9cd8:	3c20      	subs	r4, #32
    9cda:	40e3      	lsrs	r3, r4
    9cdc:	1c1c      	adds	r4, r3, #0
    9cde:	4653      	mov	r3, sl
    9ce0:	2b20      	cmp	r3, #32
    9ce2:	d00d      	beq.n	9d00 <__aeabi_dsub+0x6f0>
    9ce4:	2340      	movs	r3, #64	; 0x40
    9ce6:	4651      	mov	r1, sl
    9ce8:	1a5b      	subs	r3, r3, r1
    9cea:	409f      	lsls	r7, r3
    9cec:	433d      	orrs	r5, r7
    9cee:	1e6f      	subs	r7, r5, #1
    9cf0:	41bd      	sbcs	r5, r7
    9cf2:	2700      	movs	r7, #0
    9cf4:	4325      	orrs	r5, r4
    9cf6:	e765      	b.n	9bc4 <__aeabi_dsub+0x5b4>
    9cf8:	2700      	movs	r7, #0
    9cfa:	e7cd      	b.n	9c98 <__aeabi_dsub+0x688>
    9cfc:	1c0d      	adds	r5, r1, #0
    9cfe:	e5c8      	b.n	9892 <__aeabi_dsub+0x282>
    9d00:	2700      	movs	r7, #0
    9d02:	e7f3      	b.n	9cec <__aeabi_dsub+0x6dc>

00009d04 <__aeabi_d2iz>:
    9d04:	030b      	lsls	r3, r1, #12
    9d06:	b530      	push	{r4, r5, lr}
    9d08:	4c13      	ldr	r4, [pc, #76]	; (9d58 <__aeabi_d2iz+0x54>)
    9d0a:	0b1a      	lsrs	r2, r3, #12
    9d0c:	004b      	lsls	r3, r1, #1
    9d0e:	1c05      	adds	r5, r0, #0
    9d10:	0d5b      	lsrs	r3, r3, #21
    9d12:	0fc9      	lsrs	r1, r1, #31
    9d14:	2000      	movs	r0, #0
    9d16:	42a3      	cmp	r3, r4
    9d18:	dd10      	ble.n	9d3c <__aeabi_d2iz+0x38>
    9d1a:	4810      	ldr	r0, [pc, #64]	; (9d5c <__aeabi_d2iz+0x58>)
    9d1c:	4283      	cmp	r3, r0
    9d1e:	dc0e      	bgt.n	9d3e <__aeabi_d2iz+0x3a>
    9d20:	2080      	movs	r0, #128	; 0x80
    9d22:	4c0f      	ldr	r4, [pc, #60]	; (9d60 <__aeabi_d2iz+0x5c>)
    9d24:	0340      	lsls	r0, r0, #13
    9d26:	4302      	orrs	r2, r0
    9d28:	1ae4      	subs	r4, r4, r3
    9d2a:	2c1f      	cmp	r4, #31
    9d2c:	dd0a      	ble.n	9d44 <__aeabi_d2iz+0x40>
    9d2e:	480d      	ldr	r0, [pc, #52]	; (9d64 <__aeabi_d2iz+0x60>)
    9d30:	1ac3      	subs	r3, r0, r3
    9d32:	40da      	lsrs	r2, r3
    9d34:	1c13      	adds	r3, r2, #0
    9d36:	4248      	negs	r0, r1
    9d38:	4043      	eors	r3, r0
    9d3a:	1858      	adds	r0, r3, r1
    9d3c:	bd30      	pop	{r4, r5, pc}
    9d3e:	4b0a      	ldr	r3, [pc, #40]	; (9d68 <__aeabi_d2iz+0x64>)
    9d40:	18c8      	adds	r0, r1, r3
    9d42:	e7fb      	b.n	9d3c <__aeabi_d2iz+0x38>
    9d44:	1c28      	adds	r0, r5, #0
    9d46:	40e0      	lsrs	r0, r4
    9d48:	4c08      	ldr	r4, [pc, #32]	; (9d6c <__aeabi_d2iz+0x68>)
    9d4a:	46a4      	mov	ip, r4
    9d4c:	4463      	add	r3, ip
    9d4e:	409a      	lsls	r2, r3
    9d50:	1c13      	adds	r3, r2, #0
    9d52:	4303      	orrs	r3, r0
    9d54:	e7ef      	b.n	9d36 <__aeabi_d2iz+0x32>
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	000003fe 	.word	0x000003fe
    9d5c:	0000041d 	.word	0x0000041d
    9d60:	00000433 	.word	0x00000433
    9d64:	00000413 	.word	0x00000413
    9d68:	7fffffff 	.word	0x7fffffff
    9d6c:	fffffbed 	.word	0xfffffbed

00009d70 <__aeabi_i2d>:
    9d70:	b538      	push	{r3, r4, r5, lr}
    9d72:	1e04      	subs	r4, r0, #0
    9d74:	d016      	beq.n	9da4 <__aeabi_i2d+0x34>
    9d76:	0fc5      	lsrs	r5, r0, #31
    9d78:	d000      	beq.n	9d7c <__aeabi_i2d+0xc>
    9d7a:	4244      	negs	r4, r0
    9d7c:	1c20      	adds	r0, r4, #0
    9d7e:	f7fd fdb9 	bl	78f4 <__clzsi2>
    9d82:	4b17      	ldr	r3, [pc, #92]	; (9de0 <__aeabi_i2d+0x70>)
    9d84:	1a1b      	subs	r3, r3, r0
    9d86:	280a      	cmp	r0, #10
    9d88:	dc21      	bgt.n	9dce <__aeabi_i2d+0x5e>
    9d8a:	1c02      	adds	r2, r0, #0
    9d8c:	1c21      	adds	r1, r4, #0
    9d8e:	3215      	adds	r2, #21
    9d90:	4091      	lsls	r1, r2
    9d92:	1c0a      	adds	r2, r1, #0
    9d94:	210b      	movs	r1, #11
    9d96:	1a08      	subs	r0, r1, r0
    9d98:	40c4      	lsrs	r4, r0
    9d9a:	055b      	lsls	r3, r3, #21
    9d9c:	0324      	lsls	r4, r4, #12
    9d9e:	0b24      	lsrs	r4, r4, #12
    9da0:	0d5b      	lsrs	r3, r3, #21
    9da2:	e003      	b.n	9dac <__aeabi_i2d+0x3c>
    9da4:	2500      	movs	r5, #0
    9da6:	2300      	movs	r3, #0
    9da8:	2400      	movs	r4, #0
    9daa:	2200      	movs	r2, #0
    9dac:	2100      	movs	r1, #0
    9dae:	1c10      	adds	r0, r2, #0
    9db0:	0324      	lsls	r4, r4, #12
    9db2:	0d0a      	lsrs	r2, r1, #20
    9db4:	0512      	lsls	r2, r2, #20
    9db6:	0b24      	lsrs	r4, r4, #12
    9db8:	4314      	orrs	r4, r2
    9dba:	4a0a      	ldr	r2, [pc, #40]	; (9de4 <__aeabi_i2d+0x74>)
    9dbc:	051b      	lsls	r3, r3, #20
    9dbe:	4014      	ands	r4, r2
    9dc0:	431c      	orrs	r4, r3
    9dc2:	0064      	lsls	r4, r4, #1
    9dc4:	07ed      	lsls	r5, r5, #31
    9dc6:	0864      	lsrs	r4, r4, #1
    9dc8:	432c      	orrs	r4, r5
    9dca:	1c21      	adds	r1, r4, #0
    9dcc:	bd38      	pop	{r3, r4, r5, pc}
    9dce:	380b      	subs	r0, #11
    9dd0:	4084      	lsls	r4, r0
    9dd2:	055b      	lsls	r3, r3, #21
    9dd4:	0324      	lsls	r4, r4, #12
    9dd6:	0b24      	lsrs	r4, r4, #12
    9dd8:	0d5b      	lsrs	r3, r3, #21
    9dda:	2200      	movs	r2, #0
    9ddc:	e7e6      	b.n	9dac <__aeabi_i2d+0x3c>
    9dde:	46c0      	nop			; (mov r8, r8)
    9de0:	0000041e 	.word	0x0000041e
    9de4:	800fffff 	.word	0x800fffff

00009de8 <__errno>:
    9de8:	4b01      	ldr	r3, [pc, #4]	; (9df0 <__errno+0x8>)
    9dea:	6818      	ldr	r0, [r3, #0]
    9dec:	4770      	bx	lr
    9dee:	46c0      	nop			; (mov r8, r8)
    9df0:	2000006c 	.word	0x2000006c

00009df4 <__libc_init_array>:
    9df4:	4b0e      	ldr	r3, [pc, #56]	; (9e30 <__libc_init_array+0x3c>)
    9df6:	b570      	push	{r4, r5, r6, lr}
    9df8:	2500      	movs	r5, #0
    9dfa:	1c1e      	adds	r6, r3, #0
    9dfc:	4c0d      	ldr	r4, [pc, #52]	; (9e34 <__libc_init_array+0x40>)
    9dfe:	1ae4      	subs	r4, r4, r3
    9e00:	10a4      	asrs	r4, r4, #2
    9e02:	42a5      	cmp	r5, r4
    9e04:	d004      	beq.n	9e10 <__libc_init_array+0x1c>
    9e06:	00ab      	lsls	r3, r5, #2
    9e08:	58f3      	ldr	r3, [r6, r3]
    9e0a:	4798      	blx	r3
    9e0c:	3501      	adds	r5, #1
    9e0e:	e7f8      	b.n	9e02 <__libc_init_array+0xe>
    9e10:	f000 fef4 	bl	abfc <_init>
    9e14:	4b08      	ldr	r3, [pc, #32]	; (9e38 <__libc_init_array+0x44>)
    9e16:	2500      	movs	r5, #0
    9e18:	1c1e      	adds	r6, r3, #0
    9e1a:	4c08      	ldr	r4, [pc, #32]	; (9e3c <__libc_init_array+0x48>)
    9e1c:	1ae4      	subs	r4, r4, r3
    9e1e:	10a4      	asrs	r4, r4, #2
    9e20:	42a5      	cmp	r5, r4
    9e22:	d004      	beq.n	9e2e <__libc_init_array+0x3a>
    9e24:	00ab      	lsls	r3, r5, #2
    9e26:	58f3      	ldr	r3, [r6, r3]
    9e28:	4798      	blx	r3
    9e2a:	3501      	adds	r5, #1
    9e2c:	e7f8      	b.n	9e20 <__libc_init_array+0x2c>
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	0000ac08 	.word	0x0000ac08
    9e34:	0000ac08 	.word	0x0000ac08
    9e38:	0000ac08 	.word	0x0000ac08
    9e3c:	0000ac0c 	.word	0x0000ac0c

00009e40 <memcpy>:
    9e40:	2300      	movs	r3, #0
    9e42:	b510      	push	{r4, lr}
    9e44:	4293      	cmp	r3, r2
    9e46:	d003      	beq.n	9e50 <memcpy+0x10>
    9e48:	5ccc      	ldrb	r4, [r1, r3]
    9e4a:	54c4      	strb	r4, [r0, r3]
    9e4c:	3301      	adds	r3, #1
    9e4e:	e7f9      	b.n	9e44 <memcpy+0x4>
    9e50:	bd10      	pop	{r4, pc}

00009e52 <memset>:
    9e52:	1c03      	adds	r3, r0, #0
    9e54:	1882      	adds	r2, r0, r2
    9e56:	4293      	cmp	r3, r2
    9e58:	d002      	beq.n	9e60 <memset+0xe>
    9e5a:	7019      	strb	r1, [r3, #0]
    9e5c:	3301      	adds	r3, #1
    9e5e:	e7fa      	b.n	9e56 <memset+0x4>
    9e60:	4770      	bx	lr
    9e62:	0000      	movs	r0, r0
    9e64:	00000002 	.word	0x00000002
    9e68:	00000003 	.word	0x00000003
    9e6c:	00000028 	.word	0x00000028
    9e70:	00000029 	.word	0x00000029
    9e74:	00000004 	.word	0x00000004
    9e78:	00000005 	.word	0x00000005
    9e7c:	00000006 	.word	0x00000006
    9e80:	00000007 	.word	0x00000007
    9e84:	00000020 	.word	0x00000020
    9e88:	00000021 	.word	0x00000021
    9e8c:	00000022 	.word	0x00000022
    9e90:	00000023 	.word	0x00000023
    9e94:	00000024 	.word	0x00000024
    9e98:	00000025 	.word	0x00000025
    9e9c:	00000026 	.word	0x00000026
    9ea0:	00000027 	.word	0x00000027
    9ea4:	00000008 	.word	0x00000008
    9ea8:	00000009 	.word	0x00000009
    9eac:	0000000a 	.word	0x0000000a
    9eb0:	0000000b 	.word	0x0000000b
    9eb4:	000004d6 	.word	0x000004d6
    9eb8:	000004dc 	.word	0x000004dc
    9ebc:	000004dc 	.word	0x000004dc
    9ec0:	000004dc 	.word	0x000004dc
    9ec4:	000004dc 	.word	0x000004dc
    9ec8:	000004dc 	.word	0x000004dc
    9ecc:	000004dc 	.word	0x000004dc
    9ed0:	000004dc 	.word	0x000004dc
    9ed4:	000004dc 	.word	0x000004dc
    9ed8:	000004dc 	.word	0x000004dc
    9edc:	000004dc 	.word	0x000004dc
    9ee0:	000004dc 	.word	0x000004dc
    9ee4:	000004dc 	.word	0x000004dc
    9ee8:	000004dc 	.word	0x000004dc
    9eec:	000004dc 	.word	0x000004dc
    9ef0:	000004dc 	.word	0x000004dc
    9ef4:	000004b4 	.word	0x000004b4
    9ef8:	000004dc 	.word	0x000004dc
    9efc:	000004dc 	.word	0x000004dc
    9f00:	000004dc 	.word	0x000004dc
    9f04:	000004dc 	.word	0x000004dc
    9f08:	000004dc 	.word	0x000004dc
    9f0c:	000004dc 	.word	0x000004dc
    9f10:	000004dc 	.word	0x000004dc
    9f14:	000004dc 	.word	0x000004dc
    9f18:	000004dc 	.word	0x000004dc
    9f1c:	000004dc 	.word	0x000004dc
    9f20:	000004dc 	.word	0x000004dc
    9f24:	000004dc 	.word	0x000004dc
    9f28:	000004dc 	.word	0x000004dc
    9f2c:	000004dc 	.word	0x000004dc
    9f30:	000004dc 	.word	0x000004dc
    9f34:	000004d0 	.word	0x000004d0
    9f38:	000004dc 	.word	0x000004dc
    9f3c:	000004dc 	.word	0x000004dc
    9f40:	000004dc 	.word	0x000004dc
    9f44:	000004dc 	.word	0x000004dc
    9f48:	000004dc 	.word	0x000004dc
    9f4c:	000004dc 	.word	0x000004dc
    9f50:	000004dc 	.word	0x000004dc
    9f54:	000004dc 	.word	0x000004dc
    9f58:	000004dc 	.word	0x000004dc
    9f5c:	000004dc 	.word	0x000004dc
    9f60:	000004dc 	.word	0x000004dc
    9f64:	000004dc 	.word	0x000004dc
    9f68:	000004dc 	.word	0x000004dc
    9f6c:	000004dc 	.word	0x000004dc
    9f70:	000004dc 	.word	0x000004dc
    9f74:	000004ca 	.word	0x000004ca
    9f78:	00000472 	.word	0x00000472
    9f7c:	00000488 	.word	0x00000488
    9f80:	0000049e 	.word	0x0000049e
    9f84:	00000458 	.word	0x00000458
    9f88:	42002c00 	.word	0x42002c00
    9f8c:	42003000 	.word	0x42003000
    9f90:	42003400 	.word	0x42003400
    9f94:	42003800 	.word	0x42003800
    9f98:	42003c00 	.word	0x42003c00
    9f9c:	1d1c1c1b 	.word	0x1d1c1c1b
    9fa0:	0000001d 	.word	0x0000001d
    9fa4:	10000800 	.word	0x10000800
    9fa8:	40002000 	.word	0x40002000
    9fac:	00008000 	.word	0x00008000
    9fb0:	42000800 	.word	0x42000800
    9fb4:	42000c00 	.word	0x42000c00
    9fb8:	42001000 	.word	0x42001000
    9fbc:	42001400 	.word	0x42001400
    9fc0:	42001800 	.word	0x42001800
    9fc4:	42001c00 	.word	0x42001c00

00009fc8 <table.15549>:
    9fc8:	c0408000 e060a020 d0509010 f070b030     ..@. .`...P.0.p.
    9fd8:	c8488808 e868a828 d8589818 f878b838     ..H.(.h...X.8.x.
    9fe8:	c4448404 e464a424 d4549414 f474b434     ..D.$.d...T.4.t.
    9ff8:	cc4c8c0c ec6cac2c dc5c9c1c fc7cbc3c     ..L.,.l...\.<.|.
    a008:	c2428202 e262a222 d2529212 f272b232     ..B.".b...R.2.r.
    a018:	ca4a8a0a ea6aaa2a da5a9a1a fa7aba3a     ..J.*.j...Z.:.z.
    a028:	c6468606 e666a626 d6569616 f676b636     ..F.&.f...V.6.v.
    a038:	ce4e8e0e ee6eae2e de5e9e1e fe7ebe3e     ..N...n...^.>.~.
    a048:	c1418101 e161a121 d1519111 f171b131     ..A.!.a...Q.1.q.
    a058:	c9498909 e969a929 d9599919 f979b939     ..I.).i...Y.9.y.
    a068:	c5458505 e565a525 d5559515 f575b535     ..E.%.e...U.5.u.
    a078:	cd4d8d0d ed6dad2d dd5d9d1d fd7dbd3d     ..M.-.m...].=.}.
    a088:	c3438303 e363a323 d3539313 f373b333     ..C.#.c...S.3.s.
    a098:	cb4b8b0b eb6bab2b db5b9b1b fb7bbb3b     ..K.+.k...[.;.{.
    a0a8:	c7478707 e767a727 d7579717 f777b737     ..G.'.g...W.7.w.
    a0b8:	cf4f8f0f ef6faf2f df5f9f1f ff7fbf3f     ..O./.o..._.?...

0000a0c8 <Roboto_Thin10x12>:
    a0c8:	00000006 00000000 00000000 00000000     ................
    a0d8:	00000000 00000200 0000027c 00000000     ........|.......
	...
    a0f0:	00020000 00001c00 00000000 00000000     ................
    a100:	00000000 06000000 03900080 029000fc     ................
    a110:	009401f8 00000000 00000000 bc000005     ................
    a120:	46022401 0003dc06 00000000 00000000     .$.F............
    a130:	00000800 0124003c 01e00098 02400258     ....<.$.....X.@.
    a140:	00000180 00060000 4403f800 9802a402     ...........D....
    a150:	00038002 00000000 02000000 001c0000     ................
	...
    a170:	fc000003 00080307 00000000 00000000     ................
    a180:	00000000 08010200 000007fe 00000000     ................
	...
    a198:	08040000 1c003000 00002800 00000000     .....0...(......
    a1a8:	00000000 06000000 00400040 01f80040     ........@.@.@...
    a1b8:	00400040 00000000 00000000 00000002     @.@.............
    a1c8:	00000007 00000000 00000000 00000000     ................
    a1d8:	00400300 00400040 00000000 00000000     ..@.@.@.........
    a1e8:	00000000 00020000 00020000 00000000     ................
	...
    a200:	04000000 01c00600 000c0030 00000000     ........0.......
	...
    a218:	f8000006 04020401 f0030c02 00000000     ................
    a228:	00000000 00000400 00040004 000003fc     ................
	...
    a240:	00060000 84031800 3c024402 00020002     .........D.<....
    a250:	00000000 05000000 018c0000 02240224     ............$.$.
    a260:	000003dc 00000000 00000000 e0008006     ................
    a270:	88009000 8003fc00 00000000 00000000     ................
    a280:	00000600 0224017c 02240224 000001c0     ....|.$.$.$.....
    a290:	00000000 00060000 1401f800 34021402     ...............4
    a2a0:	0000c003 00000000 05000000 00040004     ................
    a2b0:	002403c4 0000001c 00000000 00000000     ..$.............
    a2c0:	dc000006 24022403 80025c02 00000001     .....$.$.\......
    a2d0:	00000000 00000500 0244027c 01f80244     ........|.D.D...
	...
    a2e8:	00020000 00021000 00000000 00000000     ................
    a2f8:	00000000 02000000 07100000 00000000     ................
	...
    a314:	c0008005 2000c000 00012001 00000000     ....... . ......
    a324:	00000000 00000500 00a000a0 00a000a0     ................
	...
    a33c:	00050000 20012000 8000c001 00000000     ..... . ........
    a34c:	00000000 04000000 000c0000 003c02c4     ..............<.
	...
    a368:	f000000a e4040803 140a140b 0409e40a     ................
    a378:	e0031802 03000600 009800e0 00b0008c     ................
    a388:	00000340 00000000 00060000 2403fc00     @..............$
    a398:	24022402 0001d802 00000000 06000000     .$.$............
    a3a8:	01f80000 02040204 01980204 00000000     ................
    a3b8:	00000000 fc000006 04020403 f8020402     ................
    a3c8:	00000001 00000000 00000600 022403fc     ..............$.
    a3d8:	02240224 00000204 00000000 00060000     $.$.............
    a3e8:	2403fc00 24002400 00000400 00000000     ...$.$.$........
    a3f8:	07000000 01f80000 02040204 02440244     ............D.D.
    a408:	000001c8 00000000 fc000007 40004003     .............@.@
    a418:	40004000 0003fc00 00000000 00000200     .@.@............
    a428:	000003fc 00000000 00000000 00000000     ................
    a438:	80050000 00020001 fc020002 00000001     ................
    a448:	00000000 07000000 03fc0000 00500020     ............ .P.
    a458:	03040088 00000200 00000000 fc000005     ................
    a468:	00020003 00020002 00000000 00000000     ................
    a478:	00000800 003003fc 030000c0 00600080     ......0.......`.
    a488:	000003fc 00070000 1003fc00 c0002000     ............. ..
    a498:	fc010000 00000003 07000000 01f80000     ................
    a4a8:	02040204 01080204 000000f0 00000000     ................
    a4b8:	fc000006 44004403 38004400 00000000     .....D.D.D.8....
    a4c8:	00000000 00000700 020401f8 02040204     ................
    a4d8:	04f00308 00000000 00060000 4403fc00     ...............D
    a4e8:	44004400 0003b800 00000000 06000000     .D.D............
    a4f8:	019c0000 02240224 01980244 00000000     ....$.$.D.......
    a508:	00000000 04000406 fc000400 04000403     ................
	...
    a520:	00000600 020001fc 02000200 000001fc     ................
    a530:	00000000 0c060000 80007000 e0030001     .........p......
    a540:	00001c00 00000000 0a000000 00f0000c     ................
    a550:	00e00300 0018001c 030001e0 000c00f0     ................
    a560:	08020406 60009001 04009800 00000003     .......`........
    a570:	00000000 00040600 00200018 003003c0     .......... ...0.
    a580:	0000000c 00000000 00060000 44038402     ...............D
    a590:	14022402 00020c02 00000000 03000000     .$..............
    a5a0:	0ffe0000 00000802 00000000 00000000     ................
    a5b0:	00000000 38000404 0001c000 00000006     .......8........
	...
    a5c8:	0ffe0100 00000000 00000000 00000000     ................
    a5d8:	00000000 20040000 0c001800 00003000     ....... .....0..
	...
    a5f0:	05000000 04000400 04000400 00000400     ................
	...
    a608:	0c000002 00000000 00000000 00000000     ................
    a618:	00000000 01a00500 02500250 03e00250     ........P.P.P...
	...
    a630:	00050000 1003fc00 f0021002 00000003     ................
    a640:	00000000 05000000 03f00000 02100210     ................
    a650:	00000120 00000000 00000000 e0000005      ...............
    a660:	10021003 0003fc02 00000000 00000000     ................
    a670:	00e00500 02500350 01600250 00000000     ....P.P.P.`.....
    a680:	00000000 10040000 1403f800 00000400     ................
	...
    a698:	05000000 0be00000 0a100a10 000007f0     ................
	...
    a6b0:	fc000005 10001003 0003f000 00000000     ................
    a6c0:	00000000 00000200 000003f4 00000000     ................
	...
    a6d8:	f4010000 0000000f 00000000 00000000     ................
    a6e8:	00000000 05000000 03fc0000 012000a0     .............. .
    a6f8:	00000210 00000000 00000000 fc000002     ................
    a708:	00000003 00000000 00000000 00000000     ................
    a718:	00000900 001003f0 03e00010 00100020     ............ ...
    a728:	03e00010 00050000 1003f000 f0001000     ................
    a738:	00000003 00000000 06000000 013000c0     ..............0.
    a748:	02100210 00c00330 00000000 00000000     ....0...........
    a758:	f0000005 1002100f 0003f002 00000000     ................
    a768:	00000000 00000500 021003e0 0ff00210     ................
	...
    a780:	00040000 1003f000 00001000 00000000     ................
    a790:	00000000 05000000 03700000 02900250     ..........p.P...
    a7a0:	000001a0 00000000 00000000 fc001003     ................
    a7b0:	00021003 00000000 00000000 00000000     ................
    a7c0:	00000500 020001f0 03f00200 00000000     ................
    a7d0:	00000000 30050000 0000c000 3000c003     .......0.......0
	...
    a7e8:	08000000 01e00010 00c00300 03800070     ............p...
    a7f8:	003001c0 00000000 20021005 2000c001     ..0........ ... 
    a808:	00021001 00000000 00000000 00100500     ................
    a818:	070008e0 003000c0 00000000 00000000     ......0.........
    a828:	00050000 90031002 10027002 00000002     .........p......
    a838:	00000000 04000000 07bc0040 08020802     ........@.......
	...
    a854:	fc000002 00000007 00000000 00000000     ................
    a864:	00000000 08020300 00400fbe 00000000     ..........@.....
	...
    a87c:	00070000 4000c000 80004000 40008000     .......@.@.....@
    a88c:	00000000 03000000 010201fe 000001fe     ................
	...

0000a8a8 <COG_parameters>:
    a8a8:	00000000 00ff0f00 00100003 00390060     ............`.9.
    a8b8:	01e00000 00000000 00e0ff01 00190003     ................
    a8c8:	004b0060 01e00000 7f000000 0000feff     `.K.............
    a8d8:	00210000 006f00b0 02760000 03000000     ..!...o...v.....
    a8e8:	ff0000fc 00120003 00450080 01e00000     ..........E.....
    a8f8:	e01f0000 ff000000 001d0003 005b0080     ..............[.
    a908:	02760000                                ..v.

0000a90c <temperature_table>:
    a90c:	16801fe0 07800f00 03c005a0 015001e0     ..............P.
    a91c:	16801fe0 07800f00 03c005a0 015001e0     ..............P.
    a92c:	1d8829d6 09d813b0 04ec0762 01b90276     .)......b...v...
    a93c:	16801fe0 07800f00 03c005a0 015001e0     ..............P.
    a94c:	1d8829d6 09d813b0 04ec0762 01b90276     .)......b...v...

0000a95c <data_lookuptable>:
    a95c:	fabaeaaa febeeeae fbbbebab ffbfefaf     ................
    a96c:	a0208000 a8288808 a2228202 aa2a8a0a     .. ...(..."...*.
    a97c:	f575d555 fd7ddd5d f777d757 ff7fdf5f     U.u.].}.W.w._...
    a98c:	afefbfff abebbbfb aeeebefe aaeabafa     ................

0000a99c <scan_lookuptable>:
    a99c:	300cc003 03c00c30                       ...00...

0000a9a4 <BORDER_TABLE>:
    a9a4:	aa000000                                ....

0000a9a8 <SCAN_TABLE>:
    a9a8:	030c30c0 000026ea 00002704 0000271e     .0...&...'...'..
    a9b8:	00002738 00002752                       8'..R'..

0000a9c0 <_usb_device_irq_bits>:
    a9c0:	00080004 00800070 01000001 00000200     ....p...........
    a9d0:	000065ee 0000666a 0000666a 00006610     .e..jf..jf...f..
    a9e0:	0000660a 00006616 000065f4 0000661c     .f...f...e...f..
    a9f0:	00006650 00006810 00006860 00006860     Pf...h..`h..`h..
    aa00:	0000685c 00006802 00006822 000067f2     \h...h.."h...g..
    aa10:	00006834 00006846 000068ae 000068dc     4h..Fh...h...h..
    aa20:	000068dc 000068d8 000068a8 000068b4     .h...h...h...h..
    aa30:	000068a2 000068ba 000068c0 73696854     .h...h...h..This
    aa40:	20736920 74732061 676e6972 0000002e      is a string....
    aa50:	74727173 00000000 00007ac6 00007a8e     sqrt.....z...z..
    aa60:	00007aaa 00007a82 00007aaa 000079ee     .z...z...z...y..
    aa70:	00007aaa 00007a82 00007a8e 00007a8e     .z...z...z...z..
    aa80:	000079ee 00007a82 00007b2c 00007b2c     .y...z..,{..,{..
    aa90:	00007b2c 00007ab0 00007a8e 00007a8e     ,{...z...z...z..
    aaa0:	00007b76 00007a80 00007b76 000079ee     v{...z..v{...y..
    aab0:	00007b76 00007a80 00007a8e 00007a8e     v{...z...z...z..
    aac0:	000079ee 00007a80 00007b2c 00007b2c     .y...z..,{..,{..
    aad0:	00007b2c 00007b5a 00007d1a 00007d12     ,{..Z{...}...}..
    aae0:	00007d12 00007d0a 00007c5c 00007c5c     .}...}..\|..\|..
    aaf0:	00007d00 00007d0a 00007c5c 00007d00     .}...}..\|...}..
    ab00:	00007c5c 00007d0a 00007c5e 00007c5e     \|...}..^|..^|..
    ab10:	00007c5e 00007da4 00008a34 00008922     ^|...}..4..."...
    ab20:	00008a08 0000890e 00008a08 00008a12     ................
    ab30:	00008a08 0000890e 00008922 00008922     ........"..."...
    ab40:	00008a12 0000890e 00008918 00008918     ................
    ab50:	00008918 00008c7a 000092c8 000092a6     ....z...........
    ab60:	000092a6 0000929a 0000918e 0000918e     ................
    ab70:	0000928e 0000929a 0000918e 0000928e     ................
    ab80:	0000918e 0000929a 00009192 00009192     ................
    ab90:	00009192 000094a8 00000043              ........C...

0000ab9c <__sf_fake_stdin>:
	...

0000abbc <__sf_fake_stdout>:
	...

0000abdc <__sf_fake_stderr>:
	...

0000abfc <_init>:
    abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfe:	46c0      	nop			; (mov r8, r8)
    ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac02:	bc08      	pop	{r3}
    ac04:	469e      	mov	lr, r3
    ac06:	4770      	bx	lr

0000ac08 <__init_array_start>:
    ac08:	000000dd 	.word	0x000000dd

0000ac0c <_fini>:
    ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac0e:	46c0      	nop			; (mov r8, r8)
    ac10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac12:	bc08      	pop	{r3}
    ac14:	469e      	mov	lr, r3
    ac16:	4770      	bx	lr

0000ac18 <__fini_array_start>:
    ac18:	000000b5 	.word	0x000000b5
